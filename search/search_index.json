{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u7f16\u7801\u672d\u8bb0","text":"<p>\u7f16\u7a0b\u539f\u7406\u548c\u7f16\u7801\u6280\u5de7</p>"},{"location":"tech-view/","title":"\u6280\u672f\u72c2\u70ed-&gt;\u56de\u5f52\u7406\u6027","text":"<p>\u957f\u8fbe\u4e24\u5e74\u7684 Linux \u53d1\u884c\u7248\u4f7f\u7528\u53ca\u63a5\u89e6 \u5f00\u6e90\u4e0e\u82e6\u96be\u54f2\u5b66 \u4e00\u6587\u540e\uff0c\u6211\u5f7b\u5e95\u5bf9 Linux \u795b\u9b45\uff0c\u91cd\u65b0\u56de\u5f52 Windows \u684c\u9762\u3002</p> <p>\u5728 Linux \u5e73\u53f0\u4e0b\u7b97\u662f\u8d70\u4e86\u4e00\u6bb5\u6b67\u8def\u3002\u90a3\u6bb5\u65f6\u95f4\u5185\uff0c\u6211\u6267\u7740\u4e8e\u6784\u5efa\u201c\u81ea\u5df1\u7684\u201d\u73af\u5883\uff0c\u914d\u7f6e\u7ec8\u7aef\u7f16\u8f91\u5668\u548c\u6311\u9009\u4e00\u4e9b\u82b1\u54e8\u7684\u547d\u4ee4\u884c\u5e94\u7528\u3002\u79bb\u5f00\u4e86 IDE\uff0c\u5374\u4e0d\u538c\u5176\u70e6\u5730\u53bb\u914d\u7f6e Vim \u63d2\u4ef6\uff0c\u5c06\u5176\u6253\u9020\u6210\u201c\u9ad8\u6548\u201d\u7684 IDE\u3002\u957f\u671f\u6c89\u8ff7\u5728\u9ed1\u8272\u80cc\u666f\u7684\u7ec8\u7aef\u4e0b\uff0c\u505a\u4e00\u4e9b\u770b\u4f3c\u9ad8\u5927\u4e0a\u7684\u64cd\u4f5c\uff0c\u73b0\u5728\u60f3\u60f3\uff0c\u90a3\u7b80\u76f4\u8822\u900f\u4e86\u3002</p> <p>\u8fd9\u53ea\u662f\u4e00\u79cd\u72c2\u70ed\uff0c\u76f2\u76ee\u7684\u72c2\u70ed\uff1a\u575a\u4fe1\u81ea\u5df1\u7528\u7684\u66f4\u9002\u5408\u5f00\u53d1\u8005\uff0c\u66f4\u9002\u5408\u7f16\u5199\u7a0b\u5e8f\u3002\u4f46\u53ea\u770b\u5230\u4e86\u7a0b\u5e8f\uff0c\u6ca1\u6709\u770b\u5230\u4ea7\u54c1\u3002\u4ee5\u529f\u80fd\u800c\u4e0d\u662f\u6280\u672f\u70b9\u4e3a\u5355\u4f4d\u770b\u5f85\u67d0\u4e2a\u4ea7\u54c1\uff0c\u6211\u89c9\u5f97\u66f4\u7b26\u5408\u5f00\u53d1\u8005\u7684\u5b9a\u4e49\u3002</p> <p>\u56de\u5f52\u7406\u6027\u53ef\u4ee5\u4ece\u4e0b\u9762\u51e0\u70b9\u8003\u8651\uff0c</p>"},{"location":"tech-view/#_1","title":"\u8fdc\u79bb\u201c\u6280\u672f\u7fa4\u201d\u548c\u201c\u6280\u672f\u5927\u725b\u201d","text":"<p>\u6211\u66fe\u52a0\u8fc7\u4e00\u4e9b\u5173\u4e8e\u6280\u672f\u7684 QQ \u7fa4\uff0c\u6700\u540e\u5f97\u51fa\u7684\u7ed3\u8bba\u662f\uff0c\u522b\u5728\u5373\u65f6\u901a\u8baf\u4e0b\u8ba8\u8bba\u6280\u672f\u3002\u76f8\u6bd4\u8d77\u6765\uff0c\u90ae\u4ef6\u5217\u8868\u548c\u8bba\u575b\u66f4\u9002\u5408\u63d0\u51fa\u95ee\u9898\u6216\u4f5c\u51fa\u56de\u7b54\u3002\u90a3\u4e9b\u7fa4\u91cc\u9664\u4e86\u819c\u62dc\u5927\u4f6c\u5916\uff0c\u57fa\u672c\u6ca1\u522b\u7684\u5185\u5bb9\u4e86\u3002\u800c\u90a3\u4e9b\u5927\u4f6c\uff08\u6216\u8005\u79f0\u4f5c\u201c\u6280\u672f\u5927\u725b\u201d\uff09\u76f8\u5f53\u77dc\u6301\uff0c\u5f88\u5c11\u7ed9\u51fa\u56de\u7b54\uff0c\u8981\u4e48\u4e22\u51fa\u51e0\u4e2a\u540d\u8bcd\u5c31\u5f53\u4f5c\u56de\u590d\u4e86\u3002</p> <p>\u5373\u4f7f\u5728\u73b0\u5b9e\u4e2d\uff0c\u6211\u9047\u89c1\u7684\u5f88\u591a\u4ee5\u6280\u672f\u81ea\u79f0\u7684\u4eba\uff0c\u66f4\u559c\u6b22\u7684\u662f\u6253\u538b\u522b\u4eba\u3002\u50cf\u662f\u6c5f\u6e56\u4e2d\uff0c\u4e60\u5f97\u67d0\u79cd\u6b66\u529f\u7684\u4eba\u4f1a\u6253\u538b\u540e\u6765\u8005\uff0c\u9632\u6b62\u81ea\u5df1\u88ab\u8d85\u8d8a\u540e\u6dd8\u6c70\u4e86\u4e00\u822c\u3002</p> <p>\u8fd9\u79cd\u60c5\u51b5\u4e0d\u5982\u5c3d\u91cf\u4e0d\u63a5\u89e6\u3002</p>"},{"location":"tech-view/#_2","title":"\u5173\u6ce8\u529f\u80fd","text":"<p>\u540e\u7aef\u7684\u4eba\u6216\u8bb8\u4f1a\u66f4\u5173\u6ce8\u6027\u80fd\uff0c\u5c24\u5176\u65f6\u76ee\u524d\u5404\u79cd\u9ad8\u6027\u80fd\u7684\u7ec4\u4ef6\u5c42\u51fa\u4e0d\u7a77\uff0c\u6027\u80fd\u5982\u4f55\u6210\u4e86\u70ed\u95e8\u8bdd\u9898\u3002</p> <p>\u4f46\u6211\u89c9\u5f97\u529f\u80fd\u66f4\u91cd\u8981\u4e86\u3002\u770b\u4e0d\u89c1\u529f\u80fd\u7684\u4eba\uff0c\u4e0d\u5177\u5907\u6784\u5efa\u4ea7\u54c1\u7684\u610f\u613f\uff0c\u8fd9\u8bdd\u53cd\u8fc7\u6765\u8bf4\u4e5f\u662f\u4e00\u6837\u3002</p> <p>\u53ea\u4f1a\u6280\u672f\u7684\u4eba\uff0c\u5c31\u50cf\u5e94\u8bd5\u6559\u80b2\u4e0b\u4f1a\u505a\u6570\u5b66\u9898\u4e00\u6837\uff0c\u770b\u7740\u5389\u5bb3\uff0c\u5b9e\u5219\u6ca1\u5565\u7528\u3002\u670b\u53cb\u4eec\uff0c\u8981\u591a\u60f3\u60f3\u529f\u80fd\u554a\u3002</p>"},{"location":"tech-view/#_3","title":"\u5e73\u53f0\u548c\u517c\u5bb9\u6027\u66f4\u91cd\u8981","text":"<p>\u5f53\u6211\u60f3\u7f16\u5199\u53ef\u5206\u53d1\u7684\u7a33\u5b9a\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u624d\u5bdf\u89c9\u5230\u540e\u7aef\u4e2d\u90a3\u4e9b\u6280\u672f\u8fdc\u8fdc\u4e0d\u591f\u3002\u8d8a\u8ddf\u5e95\u5c42\u8026\u5408\uff0c\u6362\u4e2a\u5e73\u53f0\u8d8a\u5bb9\u6613\u6709\u95ee\u9898\u3002\u7279\u522b\u662f Linux \u4e0b\u7684\u5f00\u53d1\uff0c\u4e00\u4e2a\u8f6f\u4ef6\u9700\u8981\u63d0\u4f9b\u4e0d\u540c\u53d1\u884c\u7248\u7684\u7f16\u8bd1\u7a0b\u5e8f\uff0c\u4e14\u968f\u7740\u53d1\u884c\u7248\u66f4\u65b0\uff0c\u8f6f\u4ef6\u6253\u5305\u7b49\u67d0\u4e9b\u914d\u7f6e\u53ef\u80fd\u5931\u6548\uff0c\u8fd9\u6781\u4e0d\u7a33\u5b9a\u3002</p>"},{"location":"tech-view/#_4","title":"\u4e0d\u8981\u4f9d\u8d56\u7cfb\u7edf\u8c03\u7528","text":"<p>\u6700\u7ec8\u4f60\u53ef\u80fd\u60f3\u6446\u8131\u5b83\u4eec\u3002\u4e0d\u662f\u8d8a\u9760\u8fd1\u5e95\u5c42\u624d\u8d8a\u6709\u6280\u672f\u542b\u91cf\uff0c\u4e14\u6280\u672f\u542b\u91cf\u4e0d\u80fd\u4f5c\u4e3a\u8861\u91cf\u5f00\u53d1\u8005\u6c34\u5e73\u7684\u5168\u90e8\u6307\u6807\u3002</p>"},{"location":"tech-view/#_5","title":"\u6211\u4e5f\u662f\u7528\u6237","text":"<p>\u4e54\u7237\u8bf4\u8fc7\uff0c\u4ea7\u54c1\u8bbe\u8ba1\u8981\u6709\u54c1\u5473\u3002\u6700\u7ec8\u7684\u6210\u54c1\u5982\u679c\u590d\u6742\u96be\u61c2\uff0c\u754c\u9762\u4e11\u964b\uff0c\u4f30\u8ba1\u8fde\u81ea\u5df1\u4e5f\u4e0d\u592a\u613f\u610f\u53bb\u7528\u3002</p> <p>\u8bbe\u8ba1\u8ba9\u4eba\u611f\u5230\u8212\u670d\u7684\u4ea7\u54c1\uff0c\u4e5f\u662f\u4e00\u79cd\u81ea\u6211\u5b9e\u73b0\u3002\u770b\u91cd\u529f\u80fd\u548c\u7528\u6237\u4f53\u9a8c\uff0c\u5f00\u53d1\u8005\u7684\u751f\u6daf\u624d\u7b97\u5f00\u59cb\uff0c\u4e0d\u4f1a\u5728\u7a0b\u5e8f\u5458\u6216\u8005\u7801\u519c\u91cc\u6253\u8f6c\u3002</p>"},{"location":"codelang/","title":"\u7f16\u7a0b\u8bed\u8a00","text":"<p>\u8bed\u8a00\u6a21\u5f0f\u4f1a\u5851\u9020\u4f7f\u7528\u8005\u7684\u601d\u7ef4\u65b9\u5f0f\uff1a</p> <ul> <li>\u547d\u4ee4\u5f0f\uff0c\u63cf\u8ff0\u600e\u4e48\u505a\uff0c<code>c</code></li> <li>\u58f0\u660e\u5f0f\uff0c\u63cf\u8ff0\u505a\u4ec0\u4e48\uff0c<code>SQL</code></li> <li>\u9762\u5411\u5bf9\u8c61\uff0c\u4e00\u5207\u90fd\u662f\u5bf9\u8c61\uff0c\u5bf9\u8c61\u91cc\u9762\u6709\u6570\u636e\u548c\u64cd\u4f5c\u6570\u636e\u7684\u65b9\u6cd5\uff0c<code>java</code></li> <li>\u51fd\u6570\u5f0f\uff0c\u5c06\u8ba1\u7b97\u89c6\u4f5c\u6570\u5b66\u51fd\u6570\u7684\u6c42\u503c\uff0c<code>haskell</code></li> <li>\u903b\u8f91\u5f0f\uff0c\u901a\u8fc7\u5b9a\u4e49\u89c4\u5219\u548c\u4e8b\u5b9e\uff0c\u57fa\u4e8e\u903b\u8f91\u63a8\u7406\u8fdb\u884c\u7f16\u7a0b\uff0c<code>prolog</code></li> <li>\u4e8b\u4ef6\u9a71\u52a8\u5f0f\uff0c\u7a0b\u5e8f\u7684\u6267\u884c\u7531\u4e8b\u4ef6\u9a71\u52a8\uff0c<code>javascript</code></li> <li>\u5e76\u53d1\u5f0f\uff0c\u591a\u4e2a\u8ba1\u7b97\u540c\u65f6\u8fdb\u884c\uff0c\u4efb\u52a1\u4e4b\u95f4\u534f\u4f5c\u3001\u8d44\u6e90\u5171\u4eab\uff0c<code>go</code></li> <li>\u5143\u7f16\u7a0b\uff0c\u7a0b\u5e8f\u751f\u6210\u3001\u64cd\u4f5c\u3001\u5206\u6790\u5176\u4ed6\u7a0b\u5e8f\uff0c<code>lisp</code></li> </ul> <p>\u4e00\u79cd\u7f16\u7a0b\u8bed\u8a00\u53ef\u4ee5\u662f\u591a\u8303\u5f0f\u8bed\u8a00\uff0c\u6bd4\u5982 Java \u662f\u547d\u4ee4\u5f0f\u7684\uff0c\u4e5f\u662f\u9762\u5411\u5bf9\u8c61\u7684\u3002\u4e00\u79cd\u8bed\u8a00\u968f\u7740\u53d1\u5c55\u53ef\u80fd\u4f1a\u5bb9\u7eb3\u66f4\u591a\u7f16\u7a0b\u8303\u5f0f\uff08\u5f53\u7136\uff0c\u5e76\u4e0d\u662f\u50cf <code>c++</code> \u90a3\u6837\u8d8a\u591a\u8d8a\u597d\uff09\u3002</p> <p>\u8bed\u8a00\u7684\u6267\u884c\u7c7b\u578b\u53cd\u5e94\u4e86\u4f7f\u7528\u8005\u5bf9\u6027\u80fd\u3001\u8de8\u5e73\u53f0\u3001\u8d44\u6e90\u7ba1\u7406\u7684\u53d6\u820d</p> <ul> <li>\u7f16\u8bd1\u578b\uff1a\u5728\u8fd0\u884c\u524d\u5b8c\u5168\u8f6c\u6362\u4e3a\u673a\u5668\u7801\uff0c<code>c</code> <code>c++</code> <code>rust</code></li> <li>\u89e3\u91ca\u578b\uff1a\u9010\u884c\u8bfb\u53d6\u548c\u6267\u884c\u6e90\u4ee3\u7801\uff0c<code>python</code> <code>javascript</code></li> <li>\u5373\u65f6\u7f16\u8bd1\uff08JIT\uff09\uff1a\u5728\u8fd0\u884c\u65f6\u5c06\u4e2d\u95f4\u4ee3\u7801\u7f16\u8bd1\u4e3a\u673a\u5668\u7801\uff0c<code>java</code> <code>c#</code></li> </ul>"},{"location":"codelang/c/","title":"C","text":"<p>C \u7684\u57fa\u7840\u90e8\u5206\u5f88\u5c11\uff0c\u4f46\u7531\u4e8e\u5b83\u548c\u7cfb\u7edf\u6df1\u5ea6\u7ed1\u5b9a\uff0c\u56e0\u6b64\uff0c\u9700\u8981\u4e86\u89e3\u66f4\u591a\u7684\u7cfb\u7edf\u7f16\u7a0b\u77e5\u8bc6\u3002</p>"},{"location":"codelang/c/#_1","title":"\u5185\u5bb9","text":"<ul> <li>\u57fa\u7840</li> <li>\u8fdb\u7a0b</li> <li>\u7ebf\u7a0b</li> <li>\u5171\u4eab\u5185\u5b58</li> <li>Socket</li> <li>IO \u590d\u7528</li> <li>\u5e76\u884c\u7f16\u7a0b</li> </ul>"},{"location":"codelang/c/#_2","title":"\u6807\u51c6\u5e93","text":"<p>\u6807\u51c6\u5e93\u5e38\u7528\u51fd\u6570</p> <ul> <li>strcpy</li> </ul>"},{"location":"codelang/c/1/","title":"\u57fa\u7840","text":""},{"location":"codelang/c/1/#_2","title":"\u58f0\u660e\u7684\u4f18\u5148\u7ea7\u89c4\u5219","text":"<p>\u7ed3\u6784\u4f53</p> <p><pre><code>struct veg_tag { float weight; double price; };\nstruct veg_tag veg_a, veg_b, veg_c;\n</code></pre> union \u540c\u4e00\u4e3b\u4f53\uff0c\u4e0d\u540c\u89e3\u91ca</p> <pre><code>union bit_tag { int i; char c[sizeof(int)]; };\nunion bit_tag test;\ntest.i = 1;\nif (test.c[0] == 1) // \u8bfb\u5230\u7684\u7b2c\u4e00\u4e2a\u662f\u4f4e\u4f4d\u5b57\u8282\uff0c\u5c0f\u7aef\u6a21\u5f0f\n</code></pre> <p><code>char * const * (*next)();</code>, next \u662f\u4e00\u4e2a\u51fd\u6570\u6307\u9488\uff0c\u8fd9\u4e2a\u51fd\u6570\u7684\u5f62\u53c2\u5217\u8868\u662f\u7a7a\uff0c\u8fd4\u56de\u503c\u662f\u53e6\u4e00\u4e2a\u6307\u9488\uff0c\u6307\u5411 char \u578b\u7684\u5e38\u91cf\u6307\u9488\u3002\u5148\u8003\u8651\u53d8\u91cf\u540d\uff0c\u5148\u53f3\u540e\u5de6\u5224\u65ad\u3002</p> <p><code>char * (*c[10])(int **p);</code>, c \u662f\u4e00\u4e2a 10 \u4e2a\u5143\u7d20\u7684\u6570\u7ec4\uff0c\u6570\u7ec4\u5143\u7d20\u662f\u51fd\u6570\u6307\u9488\uff0c\u8fd9\u4e2a\u51fd\u6570\u7684\u5f62\u53c2\u662f\u4e8c\u7ea7 int \u6307\u9488\uff0c\u51fd\u6570\u7684\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u6307\u5411 char \u7684\u6307\u9488\u3002</p> <p>typedef \u7b80\u6d01\u6307\u5411\u5176\u4ed6\u7c7b\u578b\u7684\u6307\u9488\u3002</p> <p><code>void (*signal(int sig, void(*func)(int)))(int);</code>\uff0csignal \u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u8fd4\u56de\u4e86\u4e00\u4e2a\u51fd\u6570\u6307\u9488\uff0c\u8fd9\u4e2a\u6307\u9488\u6307\u5411\u7684\u51fd\u6570\u63a5\u53d7 int \u53c2\u6570\uff0c\u8fd4\u56de void\u3002signal \u51fd\u6570\u7684\u53c2\u6570 void(*func)(int)\uff0c\u63a5\u53d7 int\uff0c\u8fd4\u56de void\u3002 \u7528 typedef \u6765\u7b80\u5316\u4e00\u4e0b\u3002</p> <p><pre><code>typedef void(*func_ptr)(int);  /* func_ptr : void(*)(int) */\nfunc_ptr signal(int, func_ptr);\n</code></pre> \u4e0d\u8981\u6ee5\u7528 typedef\uff0c\u4e0d\u7136\u4f60\u4f1a\u75af\u7684\u3002</p> <p>\u90a3\u4e48\uff0ctypedef \u548c define \u533a\u522b\uff0c\u5b8f\u662f\u6587\u672c\u7684\u66ff\u6362\uff0ctypedef \u662f\u7ed9\u7c7b\u578b\u8d77\u522b\u540d\u3002typedef \u662f\u4e00\u79cd\u5f7b\u5e95\u7684\u5c01\u88c5\uff0c\u5c01\u88c5\u540e\u4e0d\u80fd\u518d\u52a0\u7c7b\u578b\u524d\u7f00\uff08unsigned\uff09\u4f7f\u7528\u3002</p> <p><pre><code>#define int_ptr int *\nint_ptr x, y; // x \u662f int \u6307\u9488\uff0c y \u662f int\uff0c \u4e0d\u5f7b\u5e95\u7684\u5c01\u88c5\n\ntypedef int *int_prt;\nint_ptr x, y; // x, y \u90fd\u662f int \u6307\u9488\uff0c \u662f\u5f7b\u5e95\u7684\u5c01\u88c5\n</code></pre> typedef \u4f7f\u7528\u7684\u7ed3\u6784\u7c7b\u578b\uff0c\u5982 typedef struct fruit {} fruit_type; fruit_type apple;\u3002</p>"},{"location":"codelang/c/1/#_3","title":"\u58f0\u660e\u4e0e\u5b9a\u4e49","text":"<p>\u58f0\u660e\uff0c\u53ef\u4ee5\u58f0\u660e\u591a\u6b21\uff0c\u5982 extern\uff0c\u63cf\u8ff0\u5176\u4ed6\u5730\u65b9\u521b\u5efa\u7684\u5bf9\u8c61\u3002 \u5b9a\u4e49\uff0c\u53ea\u80fd\u5b9a\u4e49\u4e00\u6b21\uff0c\u540c\u65f6\u4f1a\u4e3a\u5bf9\u8c61\u5206\u914d\u5185\u5b58\u3002</p>"},{"location":"codelang/c/1/#_4","title":"\u6570\u7ec4\u548c\u6307\u9488","text":"<p>\u6570\u7ec4\u548c\u6307\u9488\u5e38\u5e38\u6df7\u6dc6\uff0c\u4f46\u53ea\u8981\u8bb0\u4f4f\u8fd9\u4e00\u70b9\uff0c\u6307\u9488\u6307\u5411\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u6570\u7ec4\u662f\u4e00\u6bb5\u8fde\u7eed\u7684\u5185\u5b58\uff0c\u6570\u7ec4\u540d\u662f\u8fd9\u6bb5\u5185\u5b58\u7684\u8d77\u59cb\u5730\u5740\u3002 \u7528\u6307\u9488\u4ee3\u66ff\u6570\u7ec4\uff0c\u8fd8\u9700\u8981\u989d\u5916\u7684\u6570\u7ec4\u957f\u5ea6\u3002\u6570\u7ec4\u548c\u6307\u9488\u53ef\u4ee5\u4e92\u6362\u7684\u5730\u65b9\uff0c\u5f62\u53c2\u548c\u8868\u8fbe\u5f0f\u3002</p> <p>\u533a\u522b\uff0c \u6570\u7ec4\u76f4\u63a5\u5b58\u53d6\uff0c\u53ea\u8981\u6709\u4e0b\u6807\uff1b\u6307\u9488\u9700\u8981\u4e24\u6b21\u8fd0\u7b97\uff0c\u6307\u9488\u7684\u5185\u5bb9\u4f5c\u4e3a\u5730\u5740\uff0c\u52a0\u4e0a\u504f\u79fb\uff0c\u518d\u6b21\u63d0\u53d6\u6570\u636e\u3002 \u6307\u9488\u662f\u533f\u540d\u5185\u5b58\uff0c\u9700\u8981 malloc free\uff0c \u6570\u7ec4\u81ea\u8eab\u5c31\u662f\u6570\u636e\u540d\uff0c\u5206\u914d\u548c\u5220\u9664\u4e0d\u9700\u8981\u989d\u5916\u5173\u6ce8\u3002</p> <p>\u6709\u5173\u591a\u7ef4\u6570\u7ec4\uff0c</p> <p><code>int array[2][3][5];</code> \u5f88\u597d\u7406\u89e3\uff0c\u6574\u5757\u5185\u5b58\u5207\u4e3a\u5de6\u53f3\u4e24\u90e8\u5206\uff0c\u5de6\u4fa7\u662f array[0]\uff0c\u5de6\u4fa7\u518d\u6b21\u5207\u5206\u4e3a 3 \u4efd\uff0c\u4e2d\u95f4\u7684\u662f array[0][1], \u8fd9\u4e00\u4efd\u5207\u5206\u4e3a 5 \u4efd\uff0c \u6700\u53f3\u4fa7\u7684\u662f array[0][1][4]\u3002</p>"},{"location":"codelang/c/1/#_5","title":"\u5185\u5b58\u5bf9\u9f50","text":"<p><pre><code>struct foo {\n   int x;\n   char c;\n   int y;\n};\n</code></pre> \u6309\u7406\u8bf4\u8fd9\u4e2a\u7ed3\u6784\u5927\u5c0f\u662f 9 \u5b57\u8282\uff084+1+4\uff09\uff0c\u4f46\u5b9e\u9645\u662f 12 \u5b57\u8282\uff084+4+4\uff09\uff0c\u8fd9\u5c31\u662f\u5185\u5b58\u5bf9\u9f50\uff0c\u65b9\u4fbf\u673a\u5668\u8bfb\u53d6\u3002</p> <p>\u600e\u4e48\u8282\u7701\u7a7a\u95f4\uff0c\u4e00\u79cd\u662f\u4f7f\u7528 gcc \u7684 attribute \u673a\u5236\uff0c</p> <p><pre><code>struct foo {\n   ...\n} __attribute__((packed))\uff1b\n</code></pre> \u6216\u8005\u4f7f\u7528 pragma pack(size)\uff0c\u6307\u5b9a\u6700\u5c0f\u5bf9\u9f50\u5927\u5c0f\uff0c</p> <p><pre><code>#pragma pack(push)  // \u4fdd\u5b58\u5bf9\u9f50\u72b6\u6001\n#pragma pack(4)     // \u8bbe\u5b9a\u4e3a 4 \u5b57\u8282\u5bf9\u9f50\n\nstruct test\n{\n    char m1;\n    double m4;\n    int m3;\n};\n\n#pragma pack(pop)   // \u6062\u590d\u5bf9\u9f50\u72b6\u6001\n</code></pre> \u5982\u4e0a\uff0cpack(4) \u662f 16, pack(1) \u662f 13\u3002</p> <p>\u8fd8\u6709\u4e00\u79cd\u662f bit-filed\uff0c\u5236\u5b9a\u6bcf\u4e2a\u5360\u7528\u7a7a\u95f4\u7684\u5360\u7528\u5b57\u8282\u5927\u5c0f\uff0c\u4f4d\u57df\u4e0d\u80fd\u8bbe\u5b9a\u8d85\u51fa\u7c7b\u578b\u5927\u5c0f\u7684\u6570\u503c\uff0c\u5982int-32 char-8\u3002\u5e76\u4e14\u7f16\u8bd1\u5668\u4ecd\u7136\u4f1a\u81ea\u52a8\u5bf9\u9f50\uff0c\u53ea\u662f\u89c4\u5b9a\u4e86\u7c7b\u578b\u4e2d\u53ef\u4f9b\u4f7f\u7528\u7684\u7a7a\u95f4</p> <p><pre><code>struct foo {\n    int x:16;  /* 0x11111111 */\n    char c:8;  /* 'a' */\n    int y:16;  /* 0x22222222 */\n};\n\n(gdb) x/8xb &amp;foo\n0x7fffffffd59c: 0x11    0x11    0x61    0x00    0x22    0x22    0xff    0xff                                              \n\nstruct foo {\n    int x:32;  /* 0x11111111 */\n    char c:8;  /* 'a' */\n    int y:32;  /* 0x22222222 */\n};\n\n(gdb) x/12xb &amp;foo\n0x7fffffffd598: 0x11    0x11    0x11    0x11    0x61    0x7f    0x00    0x00\n0x7fffffffd5a0: 0x22    0x22    0x22    0x22\n</code></pre> \u4e3a\u4ec0\u4e48\u8981\u5185\u5b58\u5bf9\u9f50\uff1f\u8fd9\u6837\u65b9\u4fbf\u8ba1\u7b97\u673a\u8bfb\u53d6\uff0c\u63d0\u9ad8\u8bbf\u95ee\u6570\u636e\u7684\u6548\u7387\u3002\u53c2\u8003 csapp \u7684\u76f8\u5173\u7ae0\u8282\u3002</p>"},{"location":"codelang/c/1/#_6","title":"\u5806/\u6808\u4e0e\u5185\u5b58\u6cc4\u6f0f","text":"<p><code>Heap</code> \u548c <code>Stack</code> \u662f\u5185\u5b58\u7ba1\u7406\u4e2d\u7684\u4e24\u79cd\u4e0d\u540c\u7684\u5b58\u50a8\u533a\u57df\u3002\u4f7f\u7528\u65b9\u5f0f\u4e0a\uff0c<code>Heap</code> \u8981\u624b\u52a8\u5206\u914d\u91ca\u653e\uff0c<code>Stack</code> \u662f\u81ea\u52a8\u5206\u914d\u7684\u3002\u7ed3\u6784\u4e0a\uff0c<code>Stack</code> \u5206\u914d\u6bd4\u8f83\u5feb\uff0c\u8c03\u6574\u6307\u9488\u5c31\u884c\u4e86\uff0c<code>Heap</code> \u8981\u67e5\u627e\u7a7a\u95f2\u5757\u3002\u5927\u5c0f\u4e0a\uff0c<code>Stack</code> \u7684\u5927\u5c0f\u7531\u64cd\u4f5c\u7cfb\u7edf\u51b3\u5b9a\uff0c\u8d85\u51fa\u5c31\u4f1a\u6808\u6ea2\u51fa\uff0c<code>Heap</code> \u7684\u5927\u5c0f\u901a\u5e38\u6bd4\u8f83\u5927\uff0c\u53d7\u5230\u7cfb\u7edf\u5185\u5b58\u9650\u5236\u3002\u5b58\u6d3b\u65f6\u95f4\u4e0a\uff0c<code>Stack</code> \u6bd4 <code>Heap</code> \u77ed\u3002</p> <p>\u5806\uff0c\u5730\u5740\u5411\u4e0a\u589e\u957f\uff0c<code>malloc</code> \u5206\u914d\u5185\u5b58\uff0c<code>calloc</code> \u5206\u914d\u6e05\u96f6\u540e\u7684\u5185\u5b58\uff0c<code>realloc</code> \u6269\u5927\u7f29\u5c0f\u5206\u914d\u7684\u5185\u5b58\uff08\u4e00\u822c\u662f\u91cd\u5206\u914d\uff0c\u8fd4\u56de\u6307\u9488\uff09\u3002free \u91ca\u653e\u5206\u914d\u7684\u5185\u5b58\u3002\u800c\u4e14\u7533\u8bf7\u5185\u5b58\u65f6\uff0c\u4e00\u822c\u4f1a\u8fd4\u56de 2 \u7684\u6574\u6570\u6b21\u65b9\u7684\u5185\u5b58\u5927\u5c0f\u3002\u53ef\u4ee5\u5bdf\u89c9\u5230\uff0c\u53cd\u53cd\u590d\u590d\u7684\u7533\u8bf7\u91ca\u653e\uff0c\u4f1a\u4ea7\u751f\u5185\u5b58\u788e\u7247\uff0c\u4e8e\u662f\u5c31\u6709\u4e86\u5185\u5b58\u6c60\u6765\u4f18\u5316\u3002\u4ee5\u540e\u6709\u7a7a\u6765\u4ecb\u7ecd\u5185\u5b58\u6c60\u3002</p> <p>\u6808\uff0c\u5730\u5740\u5411\u4e0b\u589e\u957f\uff0c\u5b58\u50a8\u51fd\u6570\u5b9e\u53c2\u548c\u5c40\u90e8\u53d8\u91cf\uff0c\u51fd\u6570\u8c03\u7528\u7684\u94fe\u63a5\u4fe1\u606f\uff08\u53bb\u6267\u884c\u53e6\u4e00\u4e2a\u51fd\u6570\u65f6\uff0c\u5b58\u50a8\u5f53\u524d\u4fe1\u606f\uff0c\u65b9\u4fbf\u8fd4\u56de\uff09\u3002</p> <p>\u6808\u5e27\uff0c\u662f\u51fd\u6570\u8fd0\u884c\u65f6\uff0c\u5360\u7528\u7684\u6808\u8d44\u6e90\u3002\u5982\u51fd\u6570 A \u8c03\u7528\u51fd\u6570 B\uff0c\u4f1a\u5728\u6808\u4e2d\u538b\u5165\u8fd4\u56de\u5730\u5740\uff0cB \u7684\u53c2\u6570\uff0cB \u7684\u5c40\u90e8\u53d8\u91cf\uff0c\u7b49\u5230 B \u8fd0\u884c\u5b8c\u540e\uff0c\u4ee5\u76f8\u53cd\u7684\u987a\u5e8f\u9500\u6bc1\uff0c\u7136\u540e\u6839\u636e\u8fd4\u56de\u5730\u5740\uff0c\u56de\u5230 A\u3002\u53ef\u4ee5\u60f3\u8c61\uff0c\u5728\u6574\u4e2a\u7a0b\u5e8f\u7684\u8fd0\u884c\u671f\u95f4\uff0c\u6808\u7a7a\u95f4\u603b\u662f\u4e0d\u65ad\u5730\u589e\u957f\u548c\u7f29\u51cf\uff0c\u662f\u52a8\u6001\u7684\u3002 \u5728 gdb \u4e2d\u8fdb\u884c\u591a\u7ebf\u7a0b\u8c03\u8bd5\u65f6\uff0c info threads \u67e5\u770b\u6709\u54ea\u4e9b\u7ebf\u7a0b\uff0c thread num \u5207\u6362\u5230\u6307\u5b9a\u7684\u7ebf\u7a0b\uff0c bt \u6253\u5370\u5f53\u524d\u7ebf\u7a0b\u7684\u51fd\u6570\u8c03\u7528\u6808\uff0c f num \u8fdb\u5165\u6307\u5b9a\u7684\u5e27\uff0c\u4e00\u4e2a\u5e27\u5bf9\u5e94\u6267\u884c\u8fc7\u7a0b\u4e2d\u4e00\u4e2a\u7279\u5b9a\u7684\u51fd\u6570\u8c03\u7528\uff0c\u53ef\u4ee5\u67e5\u770b\u5c40\u90e8\u53d8\u91cf\u3001\u53c2\u6570\u3001\u8c03\u7528\u5173\u7cfb\u3002</p> <p>\u8fd8\u53ef\u4ee5\u901a\u8fc7 cat /proc/#num/maps\u67e5\u770b\u8fdb\u7a0b\u7684\u5185\u5b58\u7a7a\u95f4\u5206\u5e03\u3002</p> <p>\u5806\u6ea2\u51fa\uff0c\u4e0d\u65ad malloc \u5185\u5b58\uff0c\u4f46\u662f\u4e0d\u9500\u6bc1\uff0c\u8fbe\u5230\u4e0a\u9650\uff0c\u6216\u8005\u8d8a\u754c\u8bbf\u95ee\u3002 \u6808\u6ea2\u51fa\uff0c\u9012\u5f52\u8c03\u7528\u5c42\u6b21\u592a\u591a\uff0c\u5c40\u90e8\u6570\u7ec4\u8fc7\u5927\uff0c\u8d8a\u754c\u8bbf\u95ee\u3002</p> <p>\u91ca\u653e\u6216\u6539\u5199\u4ecd\u5728\u4f7f\u7528\u7684\u5185\u5b58\uff0c\u5185\u5b58\u635f\u574f \u672a\u91ca\u653e\u4e0d\u518d\u4f7f\u7528\u7684\u5185\u5b58\uff0c\u5185\u5b58\u6cc4\u6f0f\u3002</p>"},{"location":"codelang/c/1/#_7","title":"\u5e93\u51fd\u6570/\u7cfb\u7edf\u8c03\u7528","text":"<ul> <li>\u53ef\u79fb\u690d\u6027\uff0cC \u7684\u5e93\u51fd\u6570\u53ef\u79fb\u690d\uff0c\u800c\u4e0d\u540c\u64cd\u4f5c\u7cfb\u7edf\u7684\u7cfb\u7edf\u8c03\u7528\u662f\u4e0d\u540c\u7684\u3002</li> <li>\u5e93\u51fd\u6570\u5728\u7528\u6237\u7a7a\u95f4\u6267\u884c\uff0c\u7cfb\u7edf\u8c03\u7528\u5728\u5185\u6838\u6267\u884c\u3002</li> </ul> <p>\u6587\u4ef6\u6307\u9488\uff0c\u662f\u5e93\u51fd\u6570\u7684\u7ed3\u6784\uff0cfopen\u3001fclose\u3002 \u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u662f\u7cfb\u7edf\u8c03\u7528\u7684\u7ed3\u6784\uff0c\u6bd4\u5982\u7cfb\u7edf I/O\uff0c<code>create read write ioctl</code>\u3002</p>"},{"location":"codelang/c/1/#do-while0","title":"do {} while(0);","text":"<p>\u4e1a\u52a1\u4e0a\u7684\u4ee3\u7801\uff0c\u7ecf\u5e38\u9700\u8981\u5bf9\u9519\u8bef\u8fdb\u884c\u63a7\u5236\uff0c\u5982\u679c\u51fa\u9519\uff0c\u8981\u8df3\u5230\u6e05\u7406\u51fd\u6570\uff08\u901a\u5e38\u662f\u91ca\u653e\u5185\u5b58\uff09\uff0c\u5982\u4e0b\uff0c <pre><code>if ()\n    goto error;\n\nif ()\n    goto error;\n\nprocess();\n\nerror:\n    clean();\n</code></pre> \u8fd9\u6837\u5199\u5f88\u9ebb\u70e6\uff0c\u800c\u4e14\u7528 goto \u5473\u9053\u4e0d\u592a\u597d\u3002\u53ef\u4ee5\u91c7\u7528 do {} while(0), \u53d1\u751f\u9519\u8bef\u540e break \u51fa\u53bb\uff0c\u5982\u4e0b\uff0c <pre><code>do {\n    if ()\n        break;\n\n    process();\n\n} while(0);\n\nclean();\n</code></pre></p>"},{"location":"codelang/c/1/#_8","title":"\u7ed3\u6784\u4f53\u6570\u7ec4/\u8868\u9a71\u52a8","text":"<p>enum \u5b58\u50a8\u72b6\u6001\uff0c\u8fd9\u4e2a\u5728\u72b6\u6001\u8f6c\u79fb\u4e2d\u7ecf\u5e38\u7528\u5230\uff0c <pre><code>enum State {\n    HTTP_403,\n    HTTP_404,\n};\n</code></pre> \u8fdb\u4e00\u6b65\uff0c\u5728\u7ed3\u6784\u4f53\u6570\u7ec4\u4e2d\uff0c\u5b58\u50a8\u5bf9\u5e94\u7684\u4fe1\u606f\uff0c\u65b9\u4fbf\u4e0d\u540c\u60c5\u5f62\u4e0b\u7684\u6269\u5c55\u3002 <pre><code>typedef struct {\n    State state;\n    char *info;\n    void (*func)(int);\n} Stage;\n\nStage *vec[] = {\n    { HTTP_403, \"403\", action_403 }\uff0c\n    ...\n};\n</code></pre> \u8868\u9a71\u52a8\uff0c\u5c31\u662f\u5c06\u8fc7\u7a0b\u653e\u5165\u4e00\u5f20\u8868\u4e2d\uff0c\u5c06\u539f\u6765\u9700\u8981 switch \u6216 if else \u5224\u65ad\u7684\u903b\u8f91\u7b80\u5316\u3002\u53ef\u4ee5\u501f\u52a9\u521a\u521a\u7684\u7ed3\u6784\u4f53\u6570\u7ec4\u5b9e\u73b0\u3002\u597d\u5904\u662f\u65b9\u4fbf\u6269\u5c55\u529f\u80fd\u3002</p> <pre><code>struct tableEntry {\n    int input;\n    int output;\n};\n\nstruct tableEntry table[] = {\n    {1, 403},\n    {2, 404},\n    ...\n};\n</code></pre>"},{"location":"codelang/c/1/#inline","title":"inline","text":"<p>inline \u5185\u8054\u51fd\u6570\u53ef\u4ee5\u7701\u53bb\u5bf9\u6808\u7a7a\u95f4\u7684\u6d88\u8017\uff0c\u63d0\u9ad8\u8fd0\u884c\u901f\u5ea6\u3002\u7f3a\u70b9\u662f\u4ee3\u7801\u81a8\u80c0\uff0c\u6d88\u8017\u66f4\u591a\u5185\u5b58\u7a7a\u95f4\uff0c\u6240\u4ee5\u5c3d\u91cf\u9009\u7528\uff0c\u884c\u6570\u5c11\u3001\u590d\u7528\u6027\u9ad8\u7684\u51fd\u6570\uff0c\u8fdb\u884c\u5185\u8054\u3002</p>"},{"location":"codelang/c/1/#extern-c","title":"extern \"C\"","text":"<p>\u8fd9\u5e94\u8be5\u7b97\u662f\u5de5\u7a0b\u5b9e\u8df5\uff0c\u4e0d\u7ba1\u662f C \u8c03\u7528 C++\uff0c\u8fd8\u662f C++ \u8c03\u7528 C, \u56e0\u4e3a\u4e24\u8fb9\u7684\u7b26\u53f7\u4fee\u9970\u7cfb\u7edf\u4e0d\u4e00\u6837\uff0c\u56e0\u6b64\uff0c\u9700\u8981\u5bf9\u88ab\u8c03\u7528\u7684\u90e8\u5206\uff0c\u52a0\u4e0a extern \"C\"</p> <pre><code>#ifdef __cplusplus\nextern \"C\" {\n#endif\n\nvoid func(int, char* );\n\n#ifdef __cplusplus\n}\n#endif\n</code></pre>"},{"location":"codelang/c/1/#_9","title":"\u53d8\u957f\u6570\u7ec4\u4e0e\u67d4\u6027\u6570\u7ec4","text":"<p>\u7531\u4e8e\u51fa\u6808\u4f1a\u81ea\u52a8\u91ca\u653e\u5185\u5b58\uff0c\u5728\u6808\u4e0a\u7533\u8bf7\u7a7a\u95f4\uff0c\u4e0d\u7528\u8003\u8651\u4e3b\u52a8\u91ca\u653e\u7684\u95ee\u9898\uff0calloca \u5c31\u662f\u8fd9\u4e2a\u4f5c\u7528\uff0c\u4f46\u8fd9\u4e2a\u8c03\u7528\u4e0d\u5177\u6709\u53ef\u79fb\u690d\u6027\uff0c\u6240\u4ee5\uff0cC99\u589e\u52a0\u4e86\u53d8\u957f\u6570\u7ec4\uff0c\u5c31\u662f\u5141\u8bb8\u4f7f\u7528\u53d8\u91cf\u4ee3\u66ff\u7ef4\u5ea6\u3002 <pre><code>int x = 5;\nint y = 3;\n\nint pos[x][y];\n</code></pre> C99 \u8fd8\u652f\u6301\u4e86\u67d4\u6027\u6570\u7ec4\uff0c\u5c31\u662f\u4e0d\u5b8c\u6574\u7c7b\u578b\u7684\u6570\u7ec4\uff0c\u7ef4\u5ea6\u53ef\u4ee5\u63a8\u540e\u786e\u5b9a\uff08\u540e\u9762\u52a8\u6001\u5206\u914d\u3001\u91cd\u5206\u914d\uff09\uff0c <pre><code>int a[] = {1, 2};\n\ntypedef struct flex {\n    int a;\n    char c[];\n} f;\n\nf *pf = (f *)malloc(sizeof(f) + sizeof(char) * 32);\n</code></pre> \u7531\u4e8e\u5185\u5b58\u58f0\u660e\u7684\u8fde\u7eed\u6027\uff0c\u8fd9\u79cd\u4e0d\u5b8c\u5168\u58f0\u660e\u5fc5\u987b\u653e\u5230\u6700\u540e\u4e00\u4e2a\uff0c\u4e14\u4e0d\u80fd\u662f\u552f\u4e00\u7684\u6210\u5458\u3002\u8fd9\u4e2a\u7528\u6765\u89e3\u51b3\u6570\u7ec4\u53d8\u957f\u7684\u95ee\u9898\uff0c\u4ee5\u53ca\u8d8a\u754c\u7684\u95ee\u9898\u3002</p> <p>sizeof(f) = 4, \u4e0d\u5305\u62ec c \u8fd9\u4e2a\u67d4\u6027\u6570\u7ec4\u5927\u5c0f\uff0c\u5373\u4f7f c \u540e\u9762\u7ed9\u4e86\u5185\u5b58\u7a7a\u95f4\u4e5f\u662f\u3002\u5982\u679c\u7a7a\u95f4\u9700\u8981\u8c03\u6574\uff0c\u53ef\u4ee5\u7528 realloc \u91cd\u5206\u914d\u7a7a\u95f4\u3002 f new_pf = (f )realloc(pf, sizeof(f) + sizeof(char)* 64);</p> <p>\u8fd9\u6837\uff0c\u5c31\u53ef\u4ee5\u4e00\u6b21\u5206\u914d\uff0c\u4e00\u6b21\u91ca\u653e\u3002\u8fde\u7eed\u7684\u5185\u5b58\u4fbf\u4e8e\u8bbf\u95ee\uff0c\u63d0\u9ad8\u8fd0\u884c\u901f\u5ea6\uff0c\u548c\u51cf\u5c11\u5185\u5b58\u788e\u7247\u3002</p>"},{"location":"codelang/c/2/","title":"\u8fdb\u7a0b","text":"<p>\u770b <code>APUE</code> \u65f6\uff0c\u5199\u8fc7\u4e00\u4e2a\u4e0d\u6210\u6837\u5b50\u7684 shell\u3002</p> <p>\u9664\u4e86\u5185\u7f6e\u547d\u4ee4\uff0c<code>shell</code> \u5bf9\u4e8e\u522b\u7684\u547d\u4ee4\uff0c\u4f1a\u521b\u5efa\u4e00\u4e2a\u5b50\u8fdb\u7a0b\uff0c\u8ba9\u5b50\u8fdb\u7a0b\u53bb\u6267\u884c\u3002</p> <p>\u5916\u90e8\u547d\u4ee4\u6267\u884c\u65f6\uff0c\u6709\u7ee7\u627f <code>shell</code> \u73af\u5883\u7684\uff0c\u53c8\u7ee7\u7eed\u8c03\u7528 <code>exec*</code> \u63a5\u53e3\uff0c\u4f7f\u7528\u4e00\u4e2a\u65b0\u7684\u73af\u5883\u7684\u3002</p> <p>\u8fdb\u7a0b\u95f4\u901a\u4fe1\uff0c</p> <ul> <li>\u6709\u53ef\u4ee5\u50cf\u547d\u4ee4\u884c\u62fc\u63a5\u90a3\u6837\uff0c\u7528\u7ba1\u9053\u652f\u6301\u7eaf\u5b57\u7b26\u6d41</li> <li>\u6709\u7528\u4fe1\u53f7\u4ece\u5916\u90e8\u6740\u6b7b\u8fdb\u7a0b\u7684</li> <li>\u6709\u4fe1\u53f7\u91cf\u548c\u5171\u4eab\u5185\u5b58\u4ea4\u4e92\u7684</li> <li>\u8fd8\u6709\u65e0\u8111\u4e0a socket \u7684</li> </ul> <p>\u5bf9\u4e86\uff0c<code>gdb</code> \u6709\u4e00\u4e2a <code>attach</code> \u529f\u80fd\uff0c\u610f\u5473\u7740\u8fd8\u53ef\u4ee5\u901a\u8fc7\u6743\u9650\uff0c\u63a5\u7ba1\u8fdb\u7a0b\u3002</p>"},{"location":"codelang/c/3/","title":"\u7ebf\u7a0b","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;pthread.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;signal.h&gt;\n#include &lt;stdbool.h&gt;\n\nvolatile sig_atomic_t stop = false;\nvolatile bool running = true;\n\nvoid* worker(void *)\n{\n    while (running) {\n        printf(\"thread running...\\n\");\n        sleep(1);\n    }\n\n    printf(\"thread exit...\\n\");\n    return NULL;\n}\n\nvoid signal_handle(int sig)\n{\n    stop = 1;\n}\n\nint main()\n{\n    pthread_t t;\n    signal(SIGINT, signal_handle);\n\n    pthread_create(&amp;t, NULL, worker, NULL);\n\n    while (!stop) {\n        printf(\"Main Loop...\\n\");\n        sleep(1);\n    }\n\n    running = false;\n\n    pthread_join(t, NULL);\n\n    return 0;\n}\n</code></pre> <ul> <li><code>volatile</code> \u591a\u7528\u5728\u591a\u7ebf\u7a0b\u548c\u4fe1\u53f7\u7684\u53d8\u91cf\u4e2d\uff0c\u9632\u6b62\u7f16\u8bd1\u5668\u4f18\u5316\uff0c\u8bfb\u5230\u7684\u662f\u7f13\u5b58\u503c</li> </ul> <p>\u600e\u4e48\u80fd\u786e\u4fdd\u4fe1\u53f7\u88ab\u4e3b\u7ebf\u7a0b\u6355\u83b7\uff0c\u800c\u4e0d\u662f\u88ab\u5b50\u7ebf\u7a0b\u6355\u83b7\uff1f<code>pthread_sigmask</code> \u5728\u5b50\u7ebf\u7a0b\u4e2d\u5c4f\u853d\u7279\u5b9a\u4fe1\u53f7\u3002</p> <pre><code>    signal(SIGINT, signal_handle);\n\n    sigset_t set;\n    sigemptyset(&amp;set);\n    sigaddset(&amp;set, SIGINT);\n    pthread_sigmask(SIG_BLOCK, &amp;set, NULL);\n\n    pthread_create(&amp;t, NULL, worker, NULL);\n</code></pre> <p>\u5982\u679c\u6709\u591a\u4e2a\u7ebf\u7a0b\uff0c\u540c\u65f6\u64cd\u4f5c\u4e00\u4e2a\u5171\u4eab\u53d8\u91cf\uff0c\u600e\u4e48\u5904\u7406\uff1f</p>"},{"location":"codelang/c/3/#_2","title":"\u4e92\u65a5\u9501","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;pthread.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;signal.h&gt;\n#include &lt;stdbool.h&gt;\n\nvolatile sig_atomic_t stop = false;\nvolatile bool running = true;\n\npthread_mutex_t mutex;\nint global_var = 0;\n\nvoid* producer(void *)\n{\n    while (running) {\n        pthread_mutex_lock(&amp;mutex);\n        global_var += 1;\n        printf(\"[producer]: +1 -&gt; %d\\n\", global_var);\n        pthread_mutex_unlock(&amp;mutex);\n\n        sleep(1);\n    }\n\n    printf(\"producer exit...\\n\");\n    return NULL;\n}\n\nvoid* consumer(void *)\n{\n    while (running) {\n        pthread_mutex_lock(&amp;mutex);\n        global_var -= 1;\n        printf(\"[consumer]: -1 -&gt; %d\\n\", global_var);\n        pthread_mutex_unlock(&amp;mutex);\n\n        sleep(1);\n    }\n\n    printf(\"consumer exit...\\n\");\n    return NULL;\n}\n\nvoid signal_handle(int sig)\n{\n    stop = 1;\n}\n\nint main()\n{\n    pthread_t t1, t2;\n    pthread_mutex_init(&amp;mutex, NULL);\n    signal(SIGINT, signal_handle);\n\n    pthread_create(&amp;t1, NULL, producer, NULL);\n    pthread_create(&amp;t2, NULL, consumer, NULL);\n\n    while (!stop) {\n        sleep(1);\n    }\n\n    running = false;\n\n    pthread_join(t1, NULL);\n    pthread_join(t2, NULL);\n\n    pthread_mutex_destroy(&amp;mutex);\n    return 0;\n}\n</code></pre> <p>\u52a0\u9501\u662f\u6ca1\u95ee\u9898\u4e86\uff0c\u5728\u5f80\u4e0a\uff0c\u8fd8\u6709 CPU \u8c03\u5ea6\uff0c\u54ea\u4e2a\u7ebf\u7a0b\u8f6e\u5230\u7684\u6b21\u6570\u591a\u8fd8\u4e0d\u4e00\u5b9a\u3002 \u5982\u679c\u5b9e\u9645\u4e0a\u53ea\u9700\u8981\u4e00\u4e2a\u7ebf\u7a0b\u5199\uff0c\u5176\u4ed6\u7ebf\u7a0b\u8bfb\u5462\uff1f\u600e\u4e48\u8ba9\u8bfb\u7684\u4eba\u80fd\u4e00\u8d77\u770b\u5462\uff1f\u4e92\u65a5\u80af\u5b9a\u4e0d\u884c\uff0c\u4e0a\u8bfb\u5199\u9501\u5427\u3002</p>"},{"location":"codelang/c/3/#_3","title":"\u8bfb\u5199\u9501","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;pthread.h&gt;\n#include &lt;unistd.h&gt;\n\n#define NUM_READERS 5\n#define NUM_WRITERS 2\n\npthread_rwlock_t rwlock;\nint shared_data = 0;\n\nvoid* reader(void* arg) {\n    int id = *((int*)arg);\n    while (1) {\n        pthread_rwlock_rdlock(&amp;rwlock);\n        printf(\"Reader %d: read sharedData = %d\\n\", id, shared_data);\n        pthread_rwlock_unlock(&amp;rwlock); \n        sleep(1);\n    }\n    return NULL;\n}\n\nvoid* writer(void* arg) {\n    int id = *((int*)arg);\n    while (1) {\n        pthread_rwlock_wrlock(&amp;rwlock);\n        shared_data++;                    \n        printf(\"Writer %d: wrote sharedData = %d\\n\", id, shared_data);\n        pthread_rwlock_unlock(&amp;rwlock);\n        sleep(2);\n    }\n    return NULL;\n}\n\nint main() {\n    pthread_t readers[NUM_READERS], writers[NUM_WRITERS];\n    int reader_ids[NUM_READERS], writer_ids[NUM_WRITERS];\n\n    pthread_rwlock_init(&amp;rwlock, NULL);\n\n    for (int i = 0; i &lt; NUM_READERS; i++) {\n        reader_ids[i] = i + 1;\n        pthread_create(&amp;readers[i], NULL, reader, &amp;reader_ids[i]);\n    }\n\n    for (int i = 0; i &lt; NUM_WRITERS; i++) {\n        writer_ids[i] = i + 1;\n        pthread_create(&amp;writers[i], NULL, writer, &amp;writer_ids[i]);\n    }\n\n    for (int i = 0; i &lt; NUM_READERS; i++) {\n        pthread_join(readers[i], NULL);\n    }\n    for (int i = 0; i &lt; NUM_WRITERS; i++) {\n        pthread_join(writers[i], NULL);\n    }\n\n    // \u9500\u6bc1\u8bfb\u5199\u9501\n    pthread_rwlock_destroy(&amp;rwlock);\n\n    return 0;\n}\n</code></pre> <p>\u6211\u5b9e\u73b0\u4e86\u4e00\u4e2a\u961f\u5217\uff0c\u591a\u4e2a\u7ebf\u7a0b\u5f80\u91cc\u9762\u653e\u6570\u636e\u3001\u53d6\u6570\u636e\uff0c\u7528\u4e92\u65a5\u8fd8\u662f\u8bfb\u5199\u5462\uff1f \u90fd\u4e0d\u597d\uff0c<code>C</code> \u91cc\u7684\u94fe\u8868\u64cd\u4f5c\u90fd\u662f\u6307\u9488\uff0c\u6302\u4e2a\u6307\u9488\u8017\u4e0d\u4e86\u591a\u5c11\u65f6\u95f4\uff0c\u7a0d\u7a0d\u7b49\u4e00\u4e0b\u5c31\u884c\u4e86\u3002\u81ea\u65cb\u9501\u5c31\u662f\u5e72\u8fd9\u4e2a\u7684\u3002</p>"},{"location":"codelang/c/3/#_4","title":"\u81ea\u65cb\u9501","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;pthread.h&gt;\n#include &lt;unistd.h&gt;\n\n#define NUM_THREADS 4\n\npthread_spinlock_t spinlock;\nint sharedCounter = 0;\n\nvoid* incrementCounter(void* arg) {\n    for (int i = 0; i &lt; 100000; i++) {\n        pthread_spin_lock(&amp;spinlock);\n        sharedCounter++;\n        pthread_spin_unlock(&amp;spinlock);\n    }\n    return NULL;\n}\n\nint main() {\n    pthread_t threads[NUM_THREADS];\n\n    pthread_spin_init(&amp;spinlock, PTHREAD_PROCESS_PRIVATE);\n\n    for (int i = 0; i &lt; NUM_THREADS; i++) {\n        pthread_create(&amp;threads[i], NULL, incrementCounter, NULL);\n    }\n\n    for (int i = 0; i &lt; NUM_THREADS; i++) {\n        pthread_join(threads[i], NULL);\n    }\n\n    printf(\"Final counter value: %d\\n\", sharedCounter);\n\n    pthread_spin_destroy(&amp;spinlock);\n\n    return 0;\n}\n</code></pre> <p>\u987a\u5e26\u6765\u6bd4\u5bf9\u4e0b\uff0c\u4e92\u65a5\u9501\u548c\u81ea\u65cb\u9501\u7684\u6027\u80fd\uff0c</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;pthread.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;time.h&gt;\n\n#define NUM_THREADS 4\n#define NUM_INCREMENTS 10\n\npthread_spinlock_t spinlock;\nint sharedCounter_spinlock = 0;\n\nvoid* incrementCounter_spinlock(void* arg) {\n    for (int i = 0; i &lt; NUM_INCREMENTS; i++) {\n        pthread_spin_lock(&amp;spinlock);\n        sharedCounter_spinlock++;\n        pthread_spin_unlock(&amp;spinlock);\n    }\n    return NULL;\n}\n\nvoid measure_spinlock() {\n    pthread_t threads[NUM_THREADS];\n    pthread_spin_init(&amp;spinlock, PTHREAD_PROCESS_PRIVATE);\n\n    clock_t start = clock();\n\n    for (int i = 0; i &lt; NUM_THREADS; i++) {\n        pthread_create(&amp;threads[i], NULL, incrementCounter_spinlock, NULL);\n    }\n\n    for (int i = 0; i &lt; NUM_THREADS; i++) {\n        pthread_join(threads[i], NULL);\n    }\u56e0\u4e3a\u7ebf\u7a0b\u4f1a\n\n    clock_t end = clock();\n\n    printf(\"Final counter value (spinlock): %d\\n\", sharedCounter_spinlock);\n    printf(\"Time taken using spinlock: %lf seconds\\n\", (double)(end - start) / CLOCKS_PER_SEC);\n\n    pthread_spin_destroy(&amp;spinlock);\n}\n\n\npthread_mutex_t mutex;\nint sharedCounter_mutex = 0;\n\nvoid* incrementCounter_mutex(void* arg) {\n    for (int i = 0; i &lt; NUM_INCREMENTS; i++) {\n        pthread_mutex_lock(&amp;mutex);\n        sharedCounter_mutex++;\n        pthread_mutex_unlock(&amp;mutex);\n    }\n    return NULL;\n}\n\nvoid measure_mutex() {\n    pthread_t threads[NUM_THREADS];\n    pthread_mutex_init(&amp;mutex, NULL);\n\n    clock_t start = clock();\n\n    for (int i = 0; i &lt; NUM_THREADS; i++) {\n        pthread_create(&amp;threads[i], NULL, incrementCounter_mutex, NULL);\n    }\n\n    for (int i = 0; i &lt; NUM_THREADS; i++) {\n        pthread_join(threads[i], NULL);\n    }\n\n    clock_t end = clock();\n\n    printf(\"Final counter value (mutex): %d\\n\", sharedCounter_mutex);\n    printf(\"Time taken using mutex: %lf seconds\\n\", (double)(end - start) / CLOCKS_PER_SEC);\n\n    pthread_mutex_destroy(&amp;mutex);\n}\n\nint main() {\n    measure_spinlock();\n    measure_mutex();\n    return 0;\n}\n\n/*\nFinal counter value (spinlock): 4000000\nTime taken using spinlock: 0.708824 seconds\nFinal counter value (mutex): 4000000\nTime taken using mutex: 0.329922 seconds\n*/\n</code></pre> <p>\u53ef\u80fd\u662f\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u5728\u9891\u7e41\u5730\u83b7\u53d6\u548c\u91ca\u653e\u9501\u3002\u5982\u679c\u9501\u7684\u4e89\u7528\u5f88\u9ad8\uff0c\u81ea\u65cb\u9501\u7684\u4f18\u52bf\u4f1a\u88ab\u524a\u5f31\uff0c\u5728\u81ea\u65cb\u671f\u95f4\u6d88\u8017\u5927\u91cf CPU \u65f6\u95f4\u3002\u770b\u6765\u5728\u591a\u6838\u4e0a\uff0c\u81ea\u65cb\u9501\u4f1a\u5728\u540c\u4e00 CPU \u6838\u5fc3\u4e0a\u8fd0\u884c\uff0c\u51cf\u5c11\u4e86\u7f13\u5b58\u4e00\u81f4\u6027\u95ee\u9898\u6709\u4f18\u52bf\u4e86\u3002</p> <p>\u81ea\u65cb\u9501\u7684\u7279\u70b9\uff0c\u53ef\u4ee5\u770b\u51fa\uff0c\u9632\u6b62\u6302\u8d77\u5bfc\u81f4\u7684\u4e0a\u4e0b\u6587\u5207\u6362\uff0c\u5982\u679c\u9501\u7684\u6301\u6709\u65f6\u95f4\u5f88\u77ed\u6216\u7ade\u4e89\u4e0d\u6fc0\u70c8\uff0c\u90a3\u4e48\u975e\u5e38\u9002\u5408\u7528\u81ea\u65cb\u9501\uff0c\u6bd4\u5982\u961f\u5217\u8282\u70b9\u7684\u6dfb\u52a0\u548c\u5220\u9664\u4e0a\u3002</p>"},{"location":"codelang/c/3/#_5","title":"\u6761\u4ef6\u53d8\u91cf","text":"<p>\u524d\u9762\u5728\u4e92\u65a5\u90a3\u91cc\u9047\u5230\u8fc7\uff0c\u6211\u53ef\u4ee5\u4fdd\u62a4\u8fd9\u4e2a\u53d8\u91cf\u4e0d\u4f1a\u88ab\u591a\u4e2a\u7ebf\u7a0b\u540c\u65f6\u8bbf\u95ee\uff0c\u4f46\u6211\u963b\u6b62\u4e0d\u4e86\u7ebf\u7a0b\u8c03\u5ea6\u554a\u3002\u5c31\u662f\u8bf4\u6211\u51b3\u5b9a\u4e0d\u4e86\u6267\u884c\u987a\u5e8f\uff0c\u90a3\u4e48\u6761\u4ef6\u53d8\u91cf\u5c31\u7528\u5230\u4e86\u3002</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;pthread.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;signal.h&gt;\n#include &lt;stdbool.h&gt;\n\nvolatile sig_atomic_t stop = false;\nvolatile sig_atomic_t running = true;  /* to check at every loop */\n\npthread_mutex_t mutex;\npthread_cond_t not_empty;\npthread_cond_t not_full;\n\n#define PRODUCT_SIZE 5\nint goods[PRODUCT_SIZE];\nint count = 0;\n\nvoid* producer(void *)\n{\n    while (running) {\n        pthread_mutex_lock(&amp;mutex);\n\n        while (PRODUCT_SIZE == count) {\n            pthread_cond_wait(&amp;not_full, &amp;mutex);\n        }\n\n        goods[count++] = 1;\n        printf(\"[P]:  %d\\n\", count);\n\n        pthread_cond_signal(&amp;not_empty);\n        pthread_mutex_unlock(&amp;mutex);\n\n        sleep(2);\n    }\n\n    printf(\"producer exit...\\n\");\n    return NULL;\n}\n\nvoid* consumer(void *)\n{\n    while (running) {\n        pthread_mutex_lock(&amp;mutex);\n\n        while (0 == count) {\n            pthread_cond_wait(&amp;not_empty, &amp;mutex);\n        }\n\n        goods[count--] = 0;\n        printf(\"[C]: %d\\n\", count);\n\n        pthread_cond_signal(&amp;not_full);\n        pthread_mutex_unlock(&amp;mutex);\n\n        sleep(1);\n    }\n\n    printf(\"consumer exit...\\n\");\n    return NULL;\n}\n\nvoid signal_handle(int sig)\n{\n    stop = 1;\n}\n\nint main()\n{\n    pthread_t t1, t2;\n    pthread_mutex_init(&amp;mutex, NULL);\n    pthread_cond_init(&amp;not_empty, NULL);\n    pthread_cond_init(&amp;not_full, NULL);\n    signal(SIGINT, signal_handle);\n\n    pthread_create(&amp;t1, NULL, producer, NULL);\n    pthread_create(&amp;t2, NULL, consumer, NULL);\n\n\n    while (!stop) {\n        sleep(1);\n    }\n\n    running = false;\n\n    pthread_join(t1, NULL);\n    pthread_join(t2, NULL);\n\n    pthread_mutex_destroy(&amp;mutex);\n    pthread_cond_destroy(&amp;not_empty);\n    pthread_cond_destroy(&amp;not_full);\n    return 0;\n}\n</code></pre> <p>\u6211\u60f3\u8981\u6240\u6709\u7ebf\u7a0b\u90fd\u51c6\u5907\u597d\u4e86\uff08\u4e3b\u7ebf\u7a0b\u7ed9\u4ed6\u4eec\u914d\u7f6e\u597d\uff09\uff0c\u7136\u540e\u4e00\u8d77\u8fd0\u884c\uff0c\u600e\u4e48\u5f04\u5462\uff1f\u8bbe\u7f6e\u4e00\u9053\u8d77\u8dd1\u7ebf\u5427\uff0c\u53eb\u505a\u5c4f\u969c\uff08barrier\uff09\u3002</p>"},{"location":"codelang/c/3/#_6","title":"\u5c4f\u969c","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;pthread.h&gt;\n#include &lt;unistd.h&gt;\n\n#define NUM_THREADS 4\n\npthread_barrier_t barrier;\nint shared_data = 0;\n\nvoid* threadFunction(void* arg) {\n    int id = *((int*)arg);\n\n    printf(\"Thread %d is doing work...\\n\", id);\n    sleep(1);\n\n    pthread_barrier_wait(&amp;barrier);\n\n    printf(\"Thread %d has passed the barrier.\\n\", id);\n    shared_data += id;\n\n    return NULL;\n}\n\nint main() {\n    pthread_t threads[NUM_THREADS];\n    int thread_ids[NUM_THREADS];\n\n    pthread_barrier_init(&amp;barrier, NULL, NUM_THREADS);\n\n    for (int i = 0; i &lt; NUM_THREADS; i++) {\n        thread_ids[i] = i + 1;\n        pthread_create(&amp;threads[i], NULL, threadFunction, &amp;thread_ids[i]);\n    }\n\n    for (int i = 0; i &lt; NUM_THREADS; i++) {\n        pthread_join(threads[i], NULL);\n    }\n\n    printf(\"Final shared data value: %d\\n\", shared_data);\n\n    pthread_barrier_destroy(&amp;barrier);\n\n    return 0;\n}\n</code></pre>"},{"location":"codelang/c/3/#finally","title":"Finally","text":"<p>\u6700\u540e\uff0c\u6765\u770b\u770b\uff0c</p> <ul> <li>\u4e92\u65a5\uff0c\u53ea\u6709\u4e24\u79cd\u72b6\u6001\uff0c\u9501\u4f4f\u3001\u89e3\u9501\u3002</li> <li>\u8bfb\u5199\uff0c\u4e09\u72b6\u6001\u3002\u8bfb\u9501\u3001\u5199\u9501\u3001\u89e3\u9501\u3002\u5199\u65f6\u4e92\u65a5\uff08\u5176\u4f59\u5199\u9501\u3001\u8bfb\u9501\u88ab\u963b\u585e\uff09\uff0c\u8bfb\u65f6\u5171\u4eab\uff08\u5199\u9501\u4e00\u5b9a\u88ab\u963b\u585e\uff0c\u5176\u4f59\u8bfb\u9501\u4e0d\u4f1a\uff09\u3002</li> <li>\u81ea\u65cb\u9501\uff0c\u4e92\u65a5\u52a0\u9501\u5931\u8d25\uff0c\u7ebf\u7a0b\u4f1a\u4f11\u7720\u6302\u8d77\u5207\u6362\uff0c\u81ea\u65cb\u52a0\u9501\u4e0d\u4f1a\u4f11\u7720\u6302\u8d77\u5207\u6362\uff0c\u81ea\u65cb\uff0c\u5c31\u662f\u7b49\u4e00\u7b49\u7684\u610f\u601d:)\u3002</li> <li>\u6761\u4ef6\u53d8\u91cf\uff0c\u4e0d\u7ade\u4e89\uff0c\u7b49\u5f85\u6761\u4ef6\u7684\u53d1\u751f\u3002\u4f46\u9700\u8981\u4e92\u65a5\u53bb\u4fdd\u62a4\u6761\u4ef6\u53d8\u91cf\uff0c\u6761\u4ef6\u597d\u4e86\u53d1\u51fa\u4fe1\u53f7\u3002</li> <li>\u5c4f\u969c\uff0c\u4e00\u7ec4\u7ebf\u7a0b\u5230\u8fbe\u67d0\u4e2a\u70b9\uff0c\u96c6\u5408\u9f50\u4e86\u540e\uff0c\u518d\u7ee7\u7eed\u6267\u884c\u3002\u5176\u5b9e\uff0cpthread_join \u5c31\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u5c4f\u969c\uff0c\u5982\u679c\u4f60\u628a <code>join</code> \u653e\u5728\u4e00\u8d77\u7684\u8bdd\u3002</li> </ul> <p>\u6700\u540e\uff0c\u8fd8\u6709\u4e00\u79cd\u8ba8\u538c\u7684\u60c5\u51b5\uff0c\u6b7b\u9501\uff08deadlock\uff09\u3002</p> <p>\u5bf9\u4e00\u628a\u9501\u8fde\u7eed\u52a0\u9501\u4e24\u6b21\u4f1a\u6b7b\u9501\u3002</p> <p>\u4e24\u4e2a\u7ebf\u7a0b1\u30012\uff0c\u4e24\u628a\u9501 A\u3001B\uff0c\u7ebf\u7a0b 1 \u4e2d\uff0c\u5148\u9501 A \u518d\u9501 B,\u7ebf\u7a0b 2 \u4e2d\u5148\u9501 B \u518d\u9501 A\uff0c\u5c31\u4f1a\u4ea7\u751f\u5c34\u5c2c\u7684\u6b7b\u9501\u573a\u9762\u3002\u8868\u9762\u4e0a\uff0c\u662f\u9501\u7684\u8c03\u7528\u987a\u5e8f\u4e0d\u4e00\u6837\uff0c\u5b9e\u9645\u4e0a\uff0c\u662f\u4e24\u4e2a\u7ebf\u7a0b\u90fd\u5728\u8bf7\u6c42\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u9501\u4f4f\u7684\u8d44\u6e90\u3002</p>"},{"location":"codelang/c/4/","title":"\u5171\u4eab\u5185\u5b58","text":"<p>\u8fd9\u73a9\u610f\u513f\u53ef\u4ee5\u7528\u6765\u8fdb\u7a0b\u95f4\u901a\u4fe1\uff0c\u4e00\u76f4\u6ca1\u600e\u4e48\u73a9\u8fc7\uff0c\u4e5f\u6ca1\u4e2a\u5b9e\u9645\u9700\u6c42\u7528\u4e0a\u3002</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/mman.h&gt;\n#include &lt;fcntl.h&gt;\n\n#define SHM_NAME \"my_shm\" /* /dev/shm/my_shm */\n#define SHM_SIZE 256\n\nvoid reader()\n{\n    int shm_fd = shm_open(SHM_NAME, O_RDONLY, 0666);\n\n    char *ptr = mmap(0, SHM_SIZE, PROT_READ, MAP_SHARED, shm_fd, 0);\n\n    printf(\"Read from shared memory: %s\\n\", ptr);\n\n    munmap(ptr, SHM_SIZE);\n    close(shm_fd);\n}\n\nvoid writer()\n{\n    int shm_fd = shm_open(SHM_NAME, O_CREAT | O_RDWR, 0666);\n    ftruncate(shm_fd, SHM_SIZE);\n\n    char *ptr = mmap(0, SHM_SIZE, PROT_WRITE, MAP_SHARED, shm_fd, 0);\n\n    sprintf(ptr, \"Hello from writer process!\");\n\n    munmap(ptr, SHM_SIZE);\n    close(shm_fd);\n}\n\nint main(int argc, char **argv)\n{\n    if (argc != 2) {\n        printf(\"usage: ./test r/w\\n\");\n        exit(EXIT_FAILURE);\n    }\n\n    if ('r' == argv[1][0])\n        reader();\n    else\n        writer();\n\n    return 0;\n}\n</code></pre> <p><code>shm</code> \u521b\u5efa\u7684\u7a7a\u95f4\u5728\u54ea\uff1f\u5185\u5b58\u91cc\u8fd8\u662f\u78c1\u76d8\u91cc\uff1f\u5982\u679c\u5728\u5185\u5b58\u91cc\uff0c\u521b\u5efa\u5b83\u7684\u8fdb\u7a0b\u6302\u4e86\uff0c\u5b83\u4f1a\u600e\u4e48\u6837\uff1f</p> <ul> <li><code>ftruncate(shm_fd, SHM_SIZE);</code> \u9ed8\u8ba4\u5185\u5b58\u5927\u5c0f\u662f 0\uff0c\u8fd9\u91cc\u8bbe\u7f6e\u597d\u5927\u5c0f</li> <li>\u521b\u5efa\u7684\u5171\u4eab\u5185\u5b58\u533a\u57df\u76f4\u63a5\u6620\u5c04\u5230 <code>RAM</code> \u4e2d\uff0c\u6240\u4ee5\u8bbf\u95ee\u901f\u5ea6\u975e\u5e38\u5feb</li> <li>\u521b\u5efa <code>shm</code> \u7684\u8fdb\u7a0b\u6302\u4e86\u4e0d\u5f71\u54cd\uff0c\u5b83\u662f\u72ec\u7acb\u7684\uff0c\u6ca1\u4eba\u7528\u4e86\u624d\u88ab\u91ca\u653e\uff08\u5f15\u7528\u8ba1\u6570\uff0c\u9700\u8981\u624b\u52a8\u5b9e\u73b0\uff09</li> <li><code>shm_unlink</code> \u624b\u52a8\u6e05\u7406\uff0c\u5220\u9664\u91ca\u653e\u3002</li> </ul> <p>\u6211\u600e\u4e48\u77e5\u9053\u6709\u6ca1\u6709\u5176\u4ed6\u4eba\u5728\u4f7f\u7528\u5171\u4eab\u5185\u5b58\uff1f<code>mmap</code> \u8fd4\u56de\u7684\u662f <code>shm</code> \u7684\u8d77\u59cb\u5730\u5740\uff0c\u5728\u8fd9\u91cc\u521b\u5efa\u5f15\u7528\u7684\u7ed3\u6784\uff0c\u522b\u4eba\u8981\u60f3\u77e5\u9053\uff0c\u53ea\u9700\u8981\u67e5\u4e00\u4e0b\u5c31\u884c\u4e86\u3002</p> <pre><code>typedef struct {\n    int count;                          /* \u5f15\u7528\u8ba1\u6570 */ \n    char data[SHM_SIZE - sizeof(int)];  /* \u6570\u636e\u533a */ \n} SharedMemory;\n\n...\n    SharedMemory *ptr = mmap(0, SHM_SIZE, PROT_WRITE, MAP_SHARED, shm_fd, 0);\n    ptr-&gt;count ++;\n\n    sprintf(ptr-&gt;data, \"Hello from writer process!\");\n...\n</code></pre> <p>\u90a3 <code>reader</code> \u4e0d\u4e5f\u80fd\u64cd\u4f5c\u6240\u6709\u6570\u636e\u4e86\u5417\uff1f\u8fd9\u6837\u4e0d\u597d\uff0c\u4e0d\u5982\u5206\u5f00\uff0c\u4e00\u5757\u5c0f\u7684 <code>shm</code> \u7528\u6765\u8ba1\u6570 \u4e00\u5757\u5927\u7684 <code>shm</code> \u7528\u6765\u5171\u4eab\u6570\u636e\u3002\u8fd8\u8981\u8003\u8651\u8ba1\u6570\u65f6\u662f\u5426\u540c\u65f6\u5728\u5199\uff0c\u90a3\u8fd8\u662f\u4e0a\u4fe1\u53f7\u91cf\u5427\u3002</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/mman.h&gt;\n#include &lt;fcntl.h&gt;\n#include &lt;semaphore.h&gt;\n\n#define SEM_NAME \"my_sem\" /* -&gt; /dev/shm/sem.my_sem */\n#define SHM_NAME \"my_shm\" /* -&gt; /dev/shm/my_shm */\n#define SHM_SIZE 256\n\nvoid reader()\n{\n    int shm_fd = shm_open(SHM_NAME, O_RDWR, 0666);\n\n    char *ptr = mmap(0, SHM_SIZE, PROT_READ, MAP_SHARED, shm_fd, 0);\n    sem_t *sem = sem_open(SEM_NAME, 0);\n\n    sem_wait(sem);\n    sleep(30);\n    printf(\"Read from shared memory: %s\\n\", ptr);\n    sem_post(sem);\n\n    munmap(ptr, SHM_SIZE);\n    close(shm_fd);\n    sem_close(sem);\n}\n\nvoid writer()\n{\n    int shm_fd = shm_open(SHM_NAME, O_CREAT | O_RDWR, 0666);\n    ftruncate(shm_fd, SHM_SIZE);\n\n    char *ptr = mmap(0, SHM_SIZE, PROT_WRITE, MAP_SHARED, shm_fd, 0);\n\n    sem_t *sem = sem_open(SEM_NAME, O_CREAT, 0666, 1);  // creat sem = 1\n\n    sem_wait(sem);  // sem - 1\n    sprintf(ptr, \"Hello from writer process!\");\n    sem_post(sem);  // sem + 1\n\n    munmap(ptr, SHM_SIZE);\n    close(shm_fd);\n    sem_close(sem);\n}\n\nint lookup()\n{\n    sem_t *sem = sem_open(SEM_NAME, 0);\n\n    int v;\n    sem_getvalue(sem, &amp;v);\n\n    printf(\"sem value : %d\", v);\n    sem_close(sem);\n\n    return v;\n}\n\nvoid cleanup()\n{\n    if (1 == lookup()) {\n        shm_unlink(SHM_NAME);\n        sem_unlink(SEM_NAME);\n    } else {\n        printf(\"someone here is using.\\n\");\n    }\n}\n\nint main(int argc, char **argv)\n{\n    if (argc != 2) {\n        printf(\"usage: ./test r/w\\n\");\n        exit(EXIT_FAILURE);\n    }\n\n    switch (argv[1][0]) {\n    case 'r':\n        reader();\n        break;\n    case 'w':\n        writer();\n        break;\n    case 'l':\n        lookup();\n        break;\n    case 'c':\n        cleanup();\n        break;\n    default:\n        printf(\"Invalid option: %c\\n\", argv[1][0]);\n        exit(EXIT_FAILURE);\n\n    return 0;\n}\n</code></pre> <pre><code>&gt; ./test w\n&gt; hexdump sem.my_sem\n0000000 0001 0000 0000 0000 0080 0000 0000 0000 \n0000010 0000 0000 0000 0000 0000 0000 0000 0000 \n0000020\n&gt; ./test r\n&gt; hexdump sem.my_sem\n0000000 0000 0000 0000 0000 0080 0000 0000 0000 \n0000010 0000 0000 0000 0000 0000 0000 0000 0000 \n0000020\n</code></pre> <p><code>C</code> \u7684\u4ee3\u7801\u771f\u9ebb\u70e6\uff0c\u6bd4\u5982\u4e0a\u9762\u7684 lookup \u8981\u5148\u5224\u65ad <code>sem</code> \u662f\u5426\u5b58\u5728\uff0c\u8fd9\u79cd\u5b58\u4e0d\u5b58\u5728\u95ee\u9898\u592a\u591a\u4e86\uff0c\u5199\u8d77\u6765\u771f\u9ebb\u70e6\u3002</p>"},{"location":"codelang/c/5/","title":"socket","text":"<pre><code>                                 +--------+\n(AF_INET    SOCK_STREAM)         | socket |\n AF_INET6   SOCK_DGRAM           +--+-----+   setsockopt() ------ SO_REUSEADDR\n                                    |                           | SO_RCVBUF     SO_SNDBUF\n                 +------------------+------------------+        | SO_RCVLOWAT   SO_SNDLOWAT\n                 |                                     | %      - SO_LINGER\n                 |                                  +--+-----+\n                 |                                  | bind   |  EADDRINUSE\n                 |                                  +--+-----+\n                 |                                     | %\n                 |                                  +--+-----+\n                 |                                  | listen |  ESTABLISHED QUEUE\n               % |                                  +--+-----+  + SYN_RCVD  QUEUE &lt; backlog\n              +--+------+ syn -&gt;                       |\nECONNREFUSED  | connect +------------------------------+\nETIMEDOUT     +--+------+                              | %#\n                 |                                  +--+-----+\n                 |            ( return one of       | accept |  (listening socket, ...)\n                 |              connected sockets ) +--+-----+\n               % |                                     | %#\n              +--+-------------------------------------+-----+\n              | write sendto                recvform  read   |  &lt;sys/uio.h&gt;\n              |       sendmsg               recvmsg          |  readv\n              | read                                  write  |  writev\n              +--+-------------------------------------+-----+\n               % |                                     | %#\n               +-+---+                               +-+---+\n               |close| fin -&gt;                &lt;- fin  |close|\n               +-----+                               +-----+    # connfd\n                                                         %      % sockfd\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\u4e00\u4e2a\u5178\u578b TCP \u8fde\u63a5\u9500\u6bc1\u7684\u8fc7\u7a0b\u3002</p> <ul> <li> <p><code>connect</code> <code>accept</code> \u4f1a\u89e6\u53d1 <code>syn</code> \u63e1\u624b\u8bf7\u6c42\u5305\uff0c\u63e1\u624b\u5b8c\u6210\uff0c\u7ef4\u62a4\u4e86\u4e00\u4e2a\u901a\u4fe1\u5e8f\u5217\u53f7</p> </li> <li> <p><code>close</code> \u4f1a\u89e6\u53d1 <code>fin</code> \u6325\u624b\u901a\u77e5\u5305\uff0c\u53e6\u4e00\u65b9 <code>read</code> \u8fd4\u56de\u975e\u6b63\u6570\uff08\u4e00\u822c\u662f\u8df3\u51fa\u5faa\u73af\uff09\uff0c\u4fc3\u4f7f\u8d70\u5411 close \u72b6\u6001\u3002\u53cc\u65b9\u7ec8\u6b62\u8fde\u63a5</p> </li> </ul> <p>\u5173\u95ed\u8fde\u63a5\u65f6\u7684\u72b6\u6001\u5f88\u6709\u610f\u601d\uff0c\u4e3a\u4e86\u9632\u6b62\u6f5c\u5728\u7684\u6570\u636e\u4e22\u5931\u548c\u8fde\u63a5\u6df7\u4e71\uff0c</p> <ul> <li>\u4e3b\u52a8\u5173\u95ed\u7684\u4e00\u65b9\uff1a<ul> <li>\u53d1 FIN \u5305\uff1a\u6211\u8fd9\u8fb9\u6ca1\u4ec0\u4e48\u6570\u636e\u8981\u4f20\u8f93\u4e86\uff0c\u8981\u4e0d\u6563\u4e86\u5427\uff1f\u8bf7\u4f60\u786e\u8ba4\u4e00\u4e0b\uff01</li> <li>\u8fdb\u5165 FIN_WAIT_1 \u72b6\u6001</li> <li>\u6536\u5230 ACK \u5305\uff1a\u770b\u6765\u5bf9\u65b9\u5df2\u7ecf\u6536\u5230\u4e86\u6211\u7684 FIN\uff0c\u5e76\u7ed9\u4e86\u6211\u4e00\u4e2a ACK</li> <li>\u8fdb\u5165 FIN_WAIT_2 \u72b6\u6001</li> <li>\u6536\u5230 FIN\uff0c\u5e76\u53d1\u9001 ACK\uff1a\u5bf9\u65b9\u53c8\u53d1\u6765\u4e86\u5b83\u7684 FIN\uff0c\u6211\u7ed9\u5b83\u4e00\u4e2a ACK \u786e\u8ba4\u5427\uff01</li> <li>\u8fdb\u5165 TIME_WAIT \u72b6\u6001\uff0c\u7b49\u5f85 <code>2MSL</code></li> </ul> </li> </ul> <p>\u4e3a\u4ec0\u4e48\u4f1a\u7b49\u5f85 <code>2MSL</code> \u5462\uff1f\u5047\u8bbe\u6700\u540e\u7684 ACK \u5305\u4e22\u6389\u4e86\uff0c\u88ab\u52a8\u5173\u95ed\u7684\u4e00\u65b9\u4f1a\u91cd\u4f20 FIN\uff08\u7136\u540e\uff0c\u4e3b\u52a8\u5173\u95ed\u7684\u4e00\u65b9\u4f1a\u53d1 RST \u7ec8\u6b62\u8fde\u63a5\uff09\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u9700\u8981 2MSL \u65f6\u95f4\u3002\u7b2c\u4e00\u4e2a MSL \u662f ACK \u5230\u5bf9\u9762\u7684\u65f6\u95f4\uff0c\u7b2c\u4e8c\u4e2a MSL \u662f\u5bf9\u9762\u91cd\u4f20 FIN \u7684\u65f6\u95f4\u3002</p> <p>\u5728\u5927\u591a\u6570 Linux \u7cfb\u7edf\u4e2d\uff0cTIME_WAIT \u72b6\u6001\u7684\u6301\u7eed\u65f6\u95f4\u901a\u5e38\u4e3a 2 \u500d\u7684\u6700\u5927\u6bb5\u751f\u547d\u671f\uff08MSL\uff09\uff0c\u4e00\u822c\u8bbe\u7f6e\u4e3a 60 \u79d2\u3002\u53ef\u4ee5\u901a\u8fc7\u7ec8\u7aef\u67e5\u8be2\uff0c</p> <pre><code>sysctl net.ipv4.tcp_fin_timeout\n</code></pre>"},{"location":"codelang/c/6/","title":"IO \u590d\u7528","text":"<p>\u4e86\u89e3 IO \u590d\u7528\uff0c\u5148\u6765\u770b\u4e0b\u7b80\u5355\u7684\u670d\u52a1\u5668\u7a0b\u5e8f\u3002</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;arpa/inet.h&gt;\n\n#define PORT 8080\n#define BUFFER_SIZE 1024\n\nint main() {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n    char buffer[BUFFER_SIZE] = {0};\n\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"Socket failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = INADDR_ANY;\n    address.sin_port = htons(PORT);\n\n    if (bind(server_fd, (struct sockaddr *)&amp;address, sizeof(address)) &lt; 0) {\n        perror(\"Bind failed\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    if (listen(server_fd, 3) &lt; 0) {\n        perror(\"Listen failed\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    printf(\"Listening on port %d...\\n\", PORT);\n\n    if ((new_socket = accept(server_fd, (struct sockaddr *)&amp;address, (socklen_t*)&amp;addrlen)) &lt; 0) {\n        perror(\"Accept failed\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    printf(\"Connection accepted.\\n\");\n\n    int valread = read(new_socket, buffer, BUFFER_SIZE);\n    printf(\"Message from client: %s\\n\", buffer);\n\n    const char *reply = \"Hello from server!\";\n    send(new_socket, reply, strlen(reply), 0);\n    printf(\"Reply sent to client.\\n\");\n\n    close(new_socket);\n    close(server_fd);\n    return 0;\n}\n</code></pre> <p>\u5ba2\u6237\u7aef <code>nc localhost 8080</code>\u3002\u4f46\u8fd9\u4e2a\u4f8b\u5b50\u53ea\u80fd\u5904\u7406\u4e00\u4e2a\u5ba2\u6237\u7aef\uff0c\u968f\u540e\u5173\u95ed\u8fde\u63a5\u4e86\uff0c\u53ef\u4ee5\u4e0a\u591a\u7ebf\u7a0b\uff0c\u6bcf\u6765\u4e00\u4e2a\u8fde\u63a5\uff0c\u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u53bb\u5904\u7406\u3002</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;arpa/inet.h&gt;\n#include &lt;pthread.h&gt;\n\n#define PORT 8080\n#define BUFFER_SIZE 1024\n\nvoid *handle_client(void *socket_desc) {\n    int sock = *(int *)socket_desc;\n    char buffer[BUFFER_SIZE] = {0};\n\n    int valread = read(sock, buffer, BUFFER_SIZE);\n    printf(\"Message from client: %s\\n\", buffer);\n\n    const char *reply = \"Hello from server!\";\n    send(sock, reply, strlen(reply), 0);\n    printf(\"Reply sent to client.\\n\");\n\n    close(sock);\n    return NULL;\n}\n\nint main() {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n    pthread_t thread_id;\n\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"Socket failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = INADDR_ANY;\n    address.sin_port = htons(PORT);\n\n    if (bind(server_fd, (struct sockaddr *)&amp;address, sizeof(address)) &lt; 0) {\n        perror(\"Bind failed\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    if (listen(server_fd, 3) &lt; 0) {\n        perror(\"Listen failed\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    printf(\"Listening on port %d...\\n\", PORT);\n\n    while (1) {\n        new_socket = accept(server_fd, (struct sockaddr *)&amp;address, (socklen_t*)&amp;addrlen);\n        if (new_socket &lt; 0) {\n            perror(\"Accept failed\");\n            continue;\n        }\n\n        printf(\"Connection accepted.\\n\");\n\n        if (pthread_create(&amp;thread_id, NULL, handle_client, (void *)&amp;new_socket) != 0) {\n            perror(\"Could not create thread\");\n        }\n\n        pthread_detach(thread_id);\n    }\n\n    close(server_fd);\n    return 0;\n}\n</code></pre> <p>\u53ef\u662f\u7ebf\u7a0b\u867d\u7136\u597d\uff0c\u4e5f\u4e0d\u80fd\u65e0\u9650\u5236\u4f7f\u7528\u554a\uff0c\u8fd8\u5f97\u6539\uff0c\u5982\u679c\u6709\u591a\u53f0\u673a\u5668\u8fd8\u80fd\u5206\u62c5\u4e0b\uff0c\u5355\u53f0\u673a\u5668\u600e\u4e48\u5f04\u5462\uff1f\u4e00\u4e2a\u7ebf\u7a0b\u5904\u7406\u5b8c\u4e00\u4e2a\u8fde\u63a5\u5c31\u5173\u95ed\uff0c\u592a\u5962\u4f88\u4e86\uff0c\u5f97\u8ba9\u5b83\u591a\u5904\u7406\u3002</p>"},{"location":"codelang/c/6/#select","title":"select \u8f6e\u8be2","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;arpa/inet.h&gt;\n#include &lt;sys/select.h&gt;\n#include &lt;errno.h&gt;\n\n#define PORT 8080\n#define MAX_CLIENTS 10\n#define BUFFER_SIZE 1024\n\nint main() {\n    int server_fd, new_socket, client_sockets[MAX_CLIENTS];\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n    char buffer[BUFFER_SIZE];\n    fd_set readfds;\n\n    for (int i = 0; i &lt; MAX_CLIENTS; i++) {\n        client_sockets[i] = 0;\n    }\n\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"Socket failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = INADDR_ANY;\n    address.sin_port = htons(PORT);\n\n    if (bind(server_fd, (struct sockaddr *)&amp;address, sizeof(address)) &lt; 0) {\n        perror(\"Bind failed\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    if (listen(server_fd, 3) &lt; 0) {\n        perror(\"Listen failed\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    printf(\"Listening on port %d...\\n\", PORT);\n\n    while (1) {\n        // \u6e05\u7a7a\u6587\u4ef6\u63cf\u8ff0\u7b26\u96c6\u5408\n        FD_ZERO(&amp;readfds);\n        FD_SET(server_fd, &amp;readfds);\n        int max_sd = server_fd;\n\n        // \u5c06\u5ba2\u6237\u7aef\u5957\u63a5\u5b57\u52a0\u5165\u96c6\u5408\n        for (int i = 0; i &lt; MAX_CLIENTS; i++) {\n            int sd = client_sockets[i];\n            if (sd &gt; 0) {\n                FD_SET(sd, &amp;readfds);\n            }\n            if (sd &gt; max_sd) {\n                max_sd = sd;\n            }\n        }\n\n        // \u7b49\u5f85\u6d3b\u52a8\u5957\u63a5\u5b57\n        int activity = select(max_sd + 1, &amp;readfds, NULL, NULL, NULL);\n\n        if ((activity &lt; 0) &amp;&amp; (errno != EINTR)) {\n            printf(\"Select error\");\n        }\n\n        // \u5904\u7406\u65b0\u8fde\u63a5\n        if (FD_ISSET(server_fd, &amp;readfds)) {\n            new_socket = accept(server_fd, (struct sockaddr *)&amp;address, (socklen_t*)&amp;addrlen);\n            printf(\"New connection accepted.\\n\");\n\n            // \u5c06\u65b0\u5957\u63a5\u5b57\u52a0\u5165\u6570\u7ec4\n            for (int i = 0; i &lt; MAX_CLIENTS; i++) {\n                if (client_sockets[i] == 0) {\n                    client_sockets[i] = new_socket;\n                    break;\n                }\n            }\n        }\n\n        // \u5904\u7406\u5ba2\u6237\u7aef\u8bf7\u6c42\n        for (int i = 0; i &lt; MAX_CLIENTS; i++) {\n            int sd = client_sockets[i];\n            if (FD_ISSET(sd, &amp;readfds)) {\n                int valread = read(sd, buffer, BUFFER_SIZE);\n                if (valread == 0) {\n                    // \u8fde\u63a5\u5173\u95ed\n                    getpeername(sd, (struct sockaddr*)&amp;address, (socklen_t*)&amp;addrlen);\n                    printf(\"Host disconnected, ip: %s, port: %d\\n\",\n                           inet_ntoa(address.sin_addr), ntohs(address.sin_port));\n                    close(sd);\n                    client_sockets[i] = 0;\n                } else {\n                    buffer[valread] = '\\0';\n                    printf(\"Message from client: %s\\n\", buffer);\n                    send(sd, buffer, valread, 0); // Echo back\n                }\n            }\n        }\n    }\n\n    close(server_fd);\n    return 0;\n}\n</code></pre> <p>\u4e0a\u9762\u7684\u6bcf\u6b21\u5faa\u73af\uff0c\u90fd\u8981\u6e05\u7a7a\u96c6\u5408\uff0c\u7136\u540e\u91cd\u65b0\u52a0\u5165\u8fde\u63a5\u63cf\u8ff0\u7b26\uff0c\u592a\u8822\u4e86\uff0c\u80fd\u4e0d\u80fd\u7075\u6d3b\u4e9b\uff1f</p>"},{"location":"codelang/c/6/#poll","title":"poll \u8f6e\u8be2","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;arpa/inet.h&gt;\n#include &lt;poll.h&gt;\n\n#define PORT 8080\n#define MAX_CLIENTS 10\n#define BUFFER_SIZE 1024\n\nint main() {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n    char buffer[BUFFER_SIZE];\n\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"Socket failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = INADDR_ANY;\n    address.sin_port = htons(PORT);\n\n    if (bind(server_fd, (struct sockaddr *)&amp;address, sizeof(address)) &lt; 0) {\n        perror(\"Bind failed\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    if (listen(server_fd, 3) &lt; 0) {\n        perror(\"Listen failed\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    printf(\"Listening on port %d...\\n\", PORT);\n\n    // \u8bbe\u7f6e poll \u7ed3\u6784\n    struct pollfd fds[MAX_CLIENTS + 1]; // +1 for server_fd\n    for (int i = 0; i &lt; MAX_CLIENTS + 1; i++) {\n        fds[i].fd = -1;\n        fds[i].events = POLLIN;\n    }\n    fds[0].fd = server_fd; // \u670d\u52a1\u5668\u5957\u63a5\u5b57\n\n    while (1) {\n        // \u8c03\u7528 poll\n        int poll_count = poll(fds, MAX_CLIENTS + 1, -1);\n        if (poll_count &lt; 0) {\n            perror(\"Poll error\");\n            break;\n        }\n\n        // \u5904\u7406\u65b0\u8fde\u63a5\n        if (fds[0].revents &amp; POLLIN) {\n            new_socket = accept(server_fd, (struct sockaddr *)&amp;address, (socklen_t*)&amp;addrlen);\n            printf(\"New connection accepted.\\n\");\n\n            // \u5c06\u65b0\u5957\u63a5\u5b57\u6dfb\u52a0\u5230 pollfd \u6570\u7ec4\n            for (int i = 1; i &lt; MAX_CLIENTS + 1; i++) {\n                if (fds[i].fd == -1) {\n                    fds[i].fd = new_socket;\n                    break;\n                }\n            }\n        }\n\n        // \u5904\u7406\u5ba2\u6237\u7aef\u8bf7\u6c42\n        for (int i = 1; i &lt; MAX_CLIENTS + 1; i++) {\n            if (fds[i].fd &gt; 0 &amp;&amp; (fds[i].revents &amp; POLLIN)) {\n                int valread = read(fds[i].fd, buffer, BUFFER_SIZE);\n                if (valread == 0) {\n                    // \u8fde\u63a5\u5173\u95ed\n                    getpeername(fds[i].fd, (struct sockaddr*)&amp;address, (socklen_t*)&amp;addrlen);\n                    printf(\"Host disconnected, ip: %s, port: %d\\n\",\n                           inet_ntoa(address.sin_addr), ntohs(address.sin_port));\n                    close(fds[i].fd);\n                    fds[i].fd = -1; // Mark as unused\n                } else {\n                    buffer[valread] = '\\0';\n                    printf(\"Message from client: %s\\n\", buffer);\n                    send(fds[i].fd, buffer, valread, 0); // Echo back\n                }\n            }\n        }\n    }\n\n    close(server_fd);\n    return 0;\n}\n</code></pre> <p>\u8f6e\u8be2\u6548\u7387\u4e0d\u884c\u554a\uff0c\u6709\u6ca1\u6709\u522b\u7684\u65b9\u6cd5\uff1f</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;arpa/inet.h&gt;\n#include &lt;sys/epoll.h&gt;\n\n#define PORT 8080\n#define MAX_EVENTS 10\n#define BUFFER_SIZE 1024\n\nint main() {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n    char buffer[BUFFER_SIZE];\n\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"Socket failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = INADDR_ANY;\n    address.sin_port = htons(PORT);\n\n    if (bind(server_fd, (struct sockaddr *)&amp;address, sizeof(address)) &lt; 0) {\n        perror(\"Bind failed\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    if (listen(server_fd, 3) &lt; 0) {\n        perror(\"Listen failed\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    printf(\"Listening on port %d...\\n\", PORT);\n\n    // \u521b\u5efa epoll \u5b9e\u4f8b\n    int epoll_fd = epoll_create1(0);\n    struct epoll_event ev, events[MAX_EVENTS];\n\n    // \u5c06\u670d\u52a1\u5668\u5957\u63a5\u5b57\u6dfb\u52a0\u5230 epoll \u76d1\u63a7\u4e2d\n    ev.events = EPOLLIN;\n    ev.data.fd = server_fd;\n    epoll_ctl(epoll_fd, EPOLL_CTL_ADD, server_fd, &amp;ev);\n\n    while (1) {\n        // \u7b49\u5f85\u4e8b\u4ef6\u53d1\u751f\n        int num_events = epoll_wait(epoll_fd, events, MAX_EVENTS, -1);\n        for (int i = 0; i &lt; num_events; i++) {\n            // \u5904\u7406\u65b0\u8fde\u63a5\n            if (events[i].data.fd == server_fd) {\n                new_socket = accept(server_fd, (struct sockaddr *)&amp;address, (socklen_t*)&amp;addrlen);\n                printf(\"New connection accepted.\\n\");\n\n                // \u5c06\u65b0\u5957\u63a5\u5b57\u6dfb\u52a0\u5230 epoll \u76d1\u63a7\u4e2d\n                ev.events = EPOLLIN;\n                ev.data.fd = new_socket;\n                epoll_ctl(epoll_fd, EPOLL_CTL_ADD, new_socket, &amp;ev);\n            } else {\n                // \u5904\u7406\u5ba2\u6237\u7aef\u6d88\u606f\n                int valread = read(events[i].data.fd, buffer, BUFFER_SIZE);\n                if (valread == 0) {\n                    // \u8fde\u63a5\u5173\u95ed\n                    getpeername(events[i].data.fd, (struct sockaddr*)&amp;address, (socklen_t*)&amp;addrlen);\n                    printf(\"Host disconnected, ip: %s, port: %d\\n\",\n                           inet_ntoa(address.sin_addr), ntohs(address.sin_port));\n                    close(events[i].data.fd);\n                } else {\n                    buffer[valread] = '\\0';\n                    printf(\"Message from client: %s\\n\", buffer);\n                    send(events[i].data.fd, buffer, valread, 0); // Echo back\n                }\n            }\n        }\n    }\n\n    // \u5173\u95ed\u670d\u52a1\u5668\u5957\u63a5\u5b57\n    close(server_fd);\n    return 0;\n}\n</code></pre> <ul> <li><code>epoll_create1</code> \u662f <code>epoll_create</code> \u7684\u6539\u8fdb\u7248\u672c</li> <li><code>close(events[i].data.fd)</code> \u5173\u95ed\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u540e\uff0c\u8be5\u6587\u4ef6\u63cf\u8ff0\u7b26\u5bf9\u5e94\u7684\u8d44\u6e90\u5c06\u88ab\u91ca\u653e\uff0c\u5e76\u4e14\u8fd9\u4e2a\u4f4d\u7f6e\u53ef\u4ee5\u88ab\u91cd\u65b0\u4f7f\u7528</li> </ul> <p><code>LT\uff08Level Triggered\uff09</code>:\u5728 <code>LT</code> \u6a21\u5f0f\u4e0b\uff0c\u53ea\u8981\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u72b6\u6001\u6ee1\u8db3\u6761\u4ef6\uff08\u4f8b\u5982\uff0c\u6709\u6570\u636e\u53ef\u8bfb\uff09\uff0c<code>epoll_wait</code> \u5c06\u6301\u7eed\u8fd4\u56de\u8be5\u4e8b\u4ef6\u3002\u53ea\u8981\u6709\u6570\u636e\u53ef\u7528\uff0c\u53ef\u4ee5\u591a\u6b21\u8bfb\u53d6\u540c\u4e00\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u76f4\u5230\u6ca1\u6709\u6570\u636e\u4e3a\u6b62\u3002</p> <ul> <li>\u4f18\u70b9\uff1a<ul> <li>\u7b80\u5355\u6613\u61c2\uff0c\u5bb9\u6613\u5b9e\u73b0</li> <li>\u53ef\u4ee5\u5728\u4efb\u4f55\u65f6\u5019\u68c0\u67e5\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u72b6\u6001\uff0c\u65e0\u9700\u62c5\u5fc3\u6f0f\u6389\u4e8b\u4ef6</li> </ul> </li> <li>\u7f3a\u70b9\uff1a<ul> <li>\u5982\u679c\u4e0d\u53ca\u65f6\u8bfb\u53d6\u6570\u636e\uff0c\u53ef\u80fd\u5bfc\u81f4\u9891\u7e41\u7684\u4e8b\u4ef6\u901a\u77e5\uff0c\u5f71\u54cd\u6027\u80fd</li> </ul> </li> </ul> <p><code>ET\uff08Edge Triggered\uff09</code>\uff1a\u5728 <code>ET</code> \u6a21\u5f0f\u4e0b\uff0c\u53ea\u6709\u5f53\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u72b6\u6001\u53d1\u751f\u53d8\u5316\u65f6\uff08\u5982\u53d8\u4e3a\u53ef\u8bfb\u6216\u53ef\u5199\uff09\uff0c<code>epoll_wait</code> \u624d\u4f1a\u8fd4\u56de\u8be5\u4e8b\u4ef6\u3002\u82e5\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u72b6\u6001\u6ca1\u6709\u53d8\u5316\uff0c\u5373\u4f7f\u6709\u6570\u636e\u53ef\u8bfb\uff0c\u4e5f\u4e0d\u4f1a\u518d\u6b21\u89e6\u53d1\u3002</p> <ul> <li>\u4f18\u70b9\uff1a<ul> <li>\u66f4\u9ad8\u6548\uff0c\u51cf\u5c11\u4e86\u7cfb\u7edf\u8c03\u7528\u6b21\u6570\uff0c\u5c24\u5176\u662f\u5728\u9ad8\u5e76\u53d1\u573a\u666f\u4e0b</li> <li>\u907f\u514d\u4e86\u5927\u91cf\u7684\u91cd\u590d\u4e8b\u4ef6\u901a\u77e5</li> </ul> </li> <li>\u7f3a\u70b9\uff1a<ul> <li>\u5b9e\u73b0\u590d\u6742\uff0c\u9700\u8981\u786e\u4fdd\u5728\u4e8b\u4ef6\u53d1\u751f\u540e\u5c3d\u5feb\u8bfb\u53d6\u6240\u6709\u53ef\u7528\u6570\u636e</li> <li>\u5982\u679c\u672a\u80fd\u8bfb\u53d6\u5b8c\u6240\u6709\u6570\u636e\uff0c\u53ef\u80fd\u4f1a\u9519\u8fc7\u540e\u7eed\u7684\u53ef\u8bfb\u4e8b\u4ef6</li> </ul> </li> </ul>"},{"location":"codelang/c/7/","title":"\u5e76\u884c\u7f16\u7a0b","text":"<p><code>OpenMP</code> \u662f\u4e00\u79cd\u89c4\u8303\uff0c\u5b83\u7528\u4e86 <code>#pragma</code> \u548c\u4e00\u4e9b\u51fd\u6570\u544a\u8bc9\u7f16\u8bd1\u5668\uff0c\u5728\u4ec0\u4e48\u65f6\u5019\uff0c\u600e\u4e48\u5f00\u5c55\u7ebf\u7a0b\u5904\u7406\u3002\u53ef\u4ee5\u7528\u6700\u5c11\u7684\u884c\u6570\uff0c\u628a\u4e32\u884c\u8fd0\u884c\u7684\u5faa\u73af\uff0c\u53d8\u6210\u7ebf\u7a0b\u5faa\u73af\u3002</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;omp.h&gt;\n#include &lt;time.h&gt;\n\nint main() {\n    long long int count = 0;\n    int num_iterations = 1000000000;\n\n    double start_time = omp_get_wtime();\n\n    for (int i = 0; i &lt; num_iterations; i++) {\n        count++;\n    }\n\n    double end_time = omp_get_wtime();\n\n    printf(\"Total count: %lld\\n\", count);\n    printf(\"Execution time: %f seconds\\n\", end_time - start_time);\n    return 0;\n}\n\n/*\nTotal count: 1000000000\nExecution time: 0.622888 seconds\n*/\n</code></pre> <p>\u6539\u4e3a <code>OpenMP</code>\uff0c\u8bb0\u5f97\u7f16\u8bd1\u65f6\u5e26\u4e0a <code>-fopenmp</code>\uff0c</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;omp.h&gt;\n#include &lt;time.h&gt;\n\nint main() {\n    long long int count = 0;\n    int num_iterations = 1000000000;\n\n    double start_time = omp_get_wtime();\n\n    #pragma omp parallel\n    {\n        long long int local_count = 0; // \u6bcf\u4e2a\u7ebf\u7a0b\u7684\u5c40\u90e8\u8ba1\u6570\u5668\n\n        #pragma omp for\n        for (int i = 0; i &lt; num_iterations; i++) {\n            local_count++;\n        }\n\n        #pragma omp atomic\n        count += local_count; \n    }\n\n    double end_time = omp_get_wtime();\n\n    printf(\"Total count: %lld\\n\", count);\n    printf(\"Execution time: %f seconds\\n\", end_time - start_time);\n    return 0;\n}\n\n/*\nTotal count: 1000000000\nExecution time: 0.111274 seconds\n*/\n</code></pre> <ul> <li><code>#pragma omp atomic</code> \u907f\u514d\u7ade\u4e89\u6761\u4ef6</li> <li><code>#pragma omp parallel for</code>\uff0c\u8868\u793a\u5faa\u73af\u5206\u89e3\u4e3a\u591a\u4e2a\u6bb5\u3002</li> </ul> <p>\u5206\u89e3\u7684\u6bb5\u6570\u5927\u5c0f\u53ef\u4ee5\u4ece\u73af\u5883\u53d8\u91cf\u4e2d\u83b7\u53d6\uff0c<code>export OMP_NUM_THREADS=N</code>\uff0c\u6216\u5728\u7a0b\u5e8f\u5f00\u59cb\u65f6\u8bbe\u7f6e\u597d\uff0c</p> <pre><code>#include &lt;omp.h&gt;\nomp_set_num_threads(N);\n// omp_set_num_threads(omp_get_num_procs());\n</code></pre> <p>\u5bb9\u6613\u51fa\u73b0\u7684\u95ee\u9898\uff0c\u8fd9\u4e2a\u5730\u65b9\u5bb9\u6613\u51fa\u73b0\u7684\u95ee\u9898\u662f\uff0c\u5f53\u4f60\u5c1d\u8bd5\u6279\u91cf\u8fd0\u884c\u542b\u6709 openmp \u7684\u7a0b\u5e8f\u65f6\uff0c\u867d\u7136\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u6709\u81ea\u5df1\u7684\u865a\u62df\u5185\u5b58\u7a7a\u95f4\uff0c\u4f46\u5b83\u4eec\u5171\u4eab\u7740\u7cfb\u7edf\u8d44\u6e90\u554a\uff0c\u6bd4\u5982CPU\u3001\u5185\u5b58\u3001\u548c IO\u3002\u8fd9\u53ef\u80fd\u5bfc\u81f4\u8d44\u6e90\u7684\u7ade\u4e89\uff0c\u4ece\u800c\u4f7f\u6027\u80fd\u4e0b\u964d\uff0c\u800c\u4e0d\u662f\u63d0\u5347\u3002</p>"},{"location":"codelang/c/stl-cpy/","title":"\u6807\u51c6\u5e93 strcpy","text":"<p>\u770b\u4e86 \u5728 C \u4e2d\uff0c\u5982\u4f55\u6b63\u786e\u62f7\u8d1d\u5b57\u7b26\u4e32 \u4e00\u6587\uff0c\u6ca1\u60f3\u5230\u8fd9\u4e9b\u5730\u65b9\u8fd8\u6709\u5bb9\u6613\u5ffd\u89c6\u7684\u95ee\u9898\uff0c\u7279\u6765\u9a8c\u8bc1\u4e00\u4e0b\u3002</p>"},{"location":"codelang/c/stl-cpy/#strcpy_1","title":"<code>strcpy</code>","text":"<p><pre><code>void test_strcpy()\n{\n    char src[5];\n    char dst[10];\n\n    memset(&amp;src, 'a', 5);\n    memset(&amp;dst, '1', 10);\n\n    strcpy(dst, src);\n}\n\n\n(gdb) x/32xb src\n0x7fffffffd439: 0x61    0x61    0x61    0x61    0x61    0x31    0x31    0x31\n0x7fffffffd441: 0x31    0x31    0x31    0x31    0x31    0x31    0x31    0x00\n0x7fffffffd449: 0x67    0x13    0x3d    0xa2    0x2a    0x7d    0x9d    0x60\n0x7fffffffd451: 0xd4    0xff    0xff    0xff    0x7f    0x00    0x00    0xd4\n(gdb) n\n(gdb) x/32xb src\n0x7fffffffd439: 0x61    0x61    0x61    0x61    0x61    0x61    0x61    0x61\n0x7fffffffd441: 0x61    0x61    0x31    0x31    0x31    0x31    0x31    0x31\n0x7fffffffd449: 0x31    0x31    0x31    0x31    0x00    0x7d    0x9d    0x60\n0x7fffffffd451: 0xd4    0xff    0xff    0xff    0x7f    0x00    0x00    0xd4\n(gdb) p src\n$1 = \"aaaaa\"\n(gdb) p dst\n$2 = \"aaaaa11111\"\n(gdb) p &amp;dst\n$3 = (char (*)[10]) 0x7fffffffd43e\n</code></pre> \u4ece\u5185\u5b58\u4e0a\u770b\uff0csrc \u7d27\u63a5\u7740 dst\uff0c</p> <p>\u53ef\u4ee5\u770b\u5230\u56e0\u4e3a src \u4e0d\u662f\u4ee5<code>NUL</code>\u7ed3\u5c3e\uff0c\u5b83\u7684\u8303\u56f4\u88ab\u6269\u5927\u5230\u4e86\u7b2c\u4e00\u4e2a 0x00\uff0c\u7136\u540e<code>strcpy</code>\u64cd\u4f5c\u4ece dst \u7684\u8d77\u59cb\u5730\u5740\u5f00\u59cb\u8986\u76d6\uff0cdst \u5b9e\u9645\u4f4d\u7f6e\u4e4b\u540e\u7684\u5185\u5b58\u88ab\u4fee\u6539\u4e86\uff0c\u5982\u679c dst \u540e\u7eed\u6709\u4e00\u4e2a\u6570\u7ec4\u5927\u5c0f\u7b49\u540c\u4e8e src\uff0c\u4e14\u5185\u5bb9\u662f<code>\uff1f</code>\uff0c\u90a3\u4e48\u5b83\u5c06\u5168\u90e8\u4fee\u6539\u6210 dst \u540e\u7eed\u7684\u5185\u5bb9\uff0c\u4fd7\u79f0\u8e29\u5185\u5b58\u3002</p> <p><pre><code>void test_strcpy()\n{\n    char src[5];\n    char dst[10];\n    char ques[5];\n\n    memset(&amp;src, 'a', 5);\n    memset(&amp;dst, '1', 10);\n    memset(&amp;ques, '?', 5);\n\n    strcpy(dst, src);\n\n}\n\n(gdb) x/32xb src\n0x7fffffffd434: 0x61    0x61    0x61    0x61    0x61    0x3f    0x3f    0x3f\n0x7fffffffd43c: 0x3f    0x3f    0x31    0x31    0x31    0x31    0x31    0x31\n0x7fffffffd444: 0x31    0x31    0x31    0x31    0x00    0x46    0x2c    0xa5\n0x7fffffffd44c: 0x37    0x71    0x2c    0x1c    0x60    0xd4    0xff    0xff\n(gdb) n\n(gdb) x/32xb src\n0x7fffffffd434: 0x61    0x61    0x61    0x61    0x61    0x3f    0x3f    0x3f\n0x7fffffffd43c: 0x3f    0x3f    0x61    0x61    0x61    0x61    0x61    0x3f\n0x7fffffffd444: 0x3f    0x3f    0x3f    0x3f    0x31    0x31    0x31    0x31\n0x7fffffffd44c: 0x31    0x31    0x31    0x31    0x31    0x31    0x00    0xff\n</code></pre> \u5b9e\u9645\u60c5\u51b5\u66f4\u6709\u8da3\uff0c\u7f16\u8bd1\u5668\u5c06 ques \u7684\u7a7a\u95f4\u653e\u5728\u4e86 src \u548c dst \u4e4b\u540e\uff0c\u5bfc\u81f4 dst \u6700\u540e\u53d8\u6210\u4e86 <code>aaaaa?????</code>\uff0c\u4e14 dst \u4e4b\u540e\u7684\u7a7a\u95f4\u4ecd\u8e29\u4e86\u5185\u5b58\u3002</p> <p>dst \u7684\u957f\u5ea6\u4e0d\u591f\u8fd9\u79cd\u60c5\u51b5\uff0c\u6839\u636e\u53d8\u91cf\u5185\u5b58\u5206\u5e03\uff0c\u5fc5\u7136\u53d1\u751f\u8986\u76d6\u591a\u4f59\u7684\u5b57\u8282\u3002</p>"},{"location":"codelang/c/stl-cpy/#strncpy","title":"<code>strncpy</code>","text":"<p>\u770b\u6837\u5b50\u8981\u9650\u5236\u590d\u5236\u7684\u957f\u5ea6\u4e86\uff0c\u4f46\u5bf9\u4e8e<code>'\\0'</code>\uff0cstrncpy \u4e5f\u4e0d\u80fd\u5904\u7406\u5b8c\u7f8e\u3002</p> <p>\u6bd4\u5982\u5c06 src \u7684 <code>NUL</code> \u62f7\u8d1d\u7ed9\u4e86 dst\uff0c\u5bfc\u81f4 dst \u4ece\u4e2d\u622a\u65ad\u3002</p>"},{"location":"codelang/c/stl-cpy/#memcpy","title":"<code>memcpy</code>","text":"<p>\u65e2\u7136\u4e00\u5b9a\u8981\u77e5\u9053 src \u7684\u957f\u5ea6\uff0c\u5c31\u5982\u6587\u7ae0\u4e2d\u8bf4\u7684\u90a3\u6837\uff0c\u76f4\u63a5\u7528 <code>memcpy</code>\u3002\u8fd9\u6837\u66f4\u76f4\u89c2\uff0c\u8ba9\u4eba\u610f\u8bc6\u5230\u8fd9\u662f\u5728\u64cd\u7eb5\u5185\u5b58\u5b57\u8282\uff0c\u4ece\u800c\u8003\u8651 <code>NUL</code> \u7684\u60c5\u51b5\u3002</p>"},{"location":"codelang/c/stl/","title":"\u6807\u51c6\u5e93","text":"<p>C \u6807\u51c6\u5e93\u63d0\u4f9b\u4e86\u8bb8\u591a\u51fd\u6570\uff0c\u7528\u4e8e\u5404\u79cd\u64cd\u4f5c\u548c\u529f\u80fd\u3002\u6839\u636e\u529f\u80fd\u7684\u4e0d\u540c\uff0c\u8fd9\u4e9b\u5e93\u51fd\u6570\u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b\u51e0\u7c7b\uff1a</p>"},{"location":"codelang/c/stl/#1","title":"1. \u8f93\u5165\u8f93\u51fa\u51fd\u6570","text":"<ul> <li>\u6807\u51c6\u8f93\u5165\u8f93\u51fa\uff1a</li> <li><code>printf()</code>, <code>scanf()</code></li> <li><code>fprintf()</code>, <code>fscanf()</code></li> <li><code>sprintf()</code>, <code>sscanf()</code></li> <li> <p><code>vprintf()</code>, <code>vscanf()</code></p> </li> <li> <p>\u6587\u4ef6\u64cd\u4f5c\uff1a</p> </li> <li><code>fopen()</code>, <code>fclose()</code></li> <li><code>fread()</code>, <code>fwrite()</code></li> <li><code>fseek()</code>, <code>ftell()</code></li> <li><code>fprintf()</code>, <code>fscanf()</code></li> <li><code>feof()</code>, <code>ferror()</code>, <code>clearerr()</code></li> </ul>"},{"location":"codelang/c/stl/#2","title":"2. \u5b57\u7b26\u4e32\u5904\u7406\u51fd\u6570","text":"<ul> <li>\u57fa\u672c\u5b57\u7b26\u4e32\u64cd\u4f5c\uff1a</li> <li><code>strlen()</code>, <code>strcpy()</code>, <code>strncpy()</code> -&gt; memcpy</li> <li><code>strcat()</code>, <code>strncat()</code> -&gt; memcpy</li> <li><code>strcmp()</code>, <code>strncmp()</code></li> <li><code>strchr()</code>, <code>strrchr()</code></li> <li> <p><code>strstr()</code>, <code>strtok()</code></p> </li> <li> <p>\u5b57\u7b26\u4e32\u8f6c\u6362\uff1a</p> </li> <li><code>atoi()</code>, <code>atol()</code>, <code>atoll()</code></li> <li><code>strtol()</code>, <code>strtoul()</code></li> <li><code>strtod()</code>, <code>strtof()</code>, <code>strtold()</code></li> </ul>"},{"location":"codelang/c/stl/#3","title":"3. \u5185\u5b58\u7ba1\u7406\u51fd\u6570","text":"<ul> <li>\u52a8\u6001\u5185\u5b58\u5206\u914d\uff1a</li> <li><code>malloc()</code>, <code>calloc()</code></li> <li> <p><code>realloc()</code>, <code>free()</code></p> </li> <li> <p>\u5185\u5b58\u64cd\u4f5c\uff1a</p> </li> <li><code>memcpy()</code>, <code>memmove()</code></li> <li><code>memcmp()</code>, <code>memset()</code></li> </ul>"},{"location":"codelang/c/stl/#4","title":"4. \u6570\u5b66\u51fd\u6570","text":"<ul> <li>\u57fa\u672c\u6570\u5b66\u8fd0\u7b97\uff1a</li> <li><code>abs()</code>, <code>fabs()</code></li> <li><code>pow()</code>, <code>sqrt()</code>, <code>exp()</code>, <code>log()</code></li> <li> <p><code>sin()</code>, <code>cos()</code>, <code>tan()</code></p> </li> <li> <p>\u5176\u4ed6\u6570\u5b66\u51fd\u6570\uff1a</p> </li> <li><code>ceil()</code>, <code>floor()</code>, <code>fmod()</code></li> <li><code>round()</code>, <code>trunc()</code>, <code>hypot()</code></li> </ul>"},{"location":"codelang/c/stl/#5","title":"5. \u65f6\u95f4\u548c\u65e5\u671f\u51fd\u6570","text":"<ul> <li>\u65f6\u95f4\u83b7\u53d6\uff1a</li> <li><code>time()</code>, <code>localtime()</code>, <code>gmtime()</code></li> <li> <p><code>mktime()</code>, <code>strftime()</code></p> </li> <li> <p>\u65f6\u95f4\u6d4b\u91cf\uff1a</p> </li> <li><code>clock()</code>, <code>difftime()</code></li> <li><code>clock_gettime()</code>, <code>clock_getres()</code></li> </ul>"},{"location":"codelang/c/stl/#6","title":"6. \u6807\u51c6\u5e93\u8f85\u52a9\u51fd\u6570","text":"<ul> <li>\u73af\u5883\u548c\u8fdb\u7a0b\u63a7\u5236\uff1a</li> <li><code>exit()</code>, <code>atexit()</code></li> <li> <p><code>getenv()</code>, <code>putenv()</code></p> </li> <li> <p>\u9519\u8bef\u5904\u7406\uff1a</p> </li> <li><code>perror()</code>, <code>strerror()</code></li> </ul>"},{"location":"codelang/c/stl/#7","title":"7. \u7c7b\u578b\u9650\u5b9a\u7b26","text":"<ul> <li>\u9650\u5236\u7c7b\u578b\u529f\u80fd\uff1a</li> <li><code>sizeof()</code>, <code>alignof()</code></li> </ul>"},{"location":"codelang/c/stl/#8","title":"8. \u5176\u4ed6\u529f\u80fd","text":"<ul> <li>\u65ad\u8a00\uff1a</li> <li> <p><code>assert()</code></p> </li> <li> <p>\u4e34\u65f6\u6587\u4ef6\uff1a</p> </li> <li><code>tmpfile()</code>, <code>tmpnam()</code></li> </ul>"},{"location":"codelang/c%23/","title":"CSharp","text":"<p>\u6253\u7b97\u7528 MonoGame \u505a\u4e2a\u5c0f\u6e38\u620f\uff0c\u81ea\u5a31\u81ea\u4e50\u3002</p>"},{"location":"codelang/go/","title":"Go","text":"<p>Go \u8bed\u8a00\u5185\u7f6e\u5e76\u53d1\u3001\u6709\u5f3a\u5927\u7684\u6807\u51c6\u5e93\u3001\u652f\u6301\u4ea4\u53c9\u7f16\u8bd1\uff08\u8de8\u5e73\u53f0\uff09\uff0c\u5de5\u5177\u94fe\u5b8c\u5584\uff08fmt \u4ee3\u7801\u683c\u5f0f\u5316\u3001vet \u9759\u6001\u5206\u6790\u3001test \u6d4b\u8bd5\uff09\u3002</p>"},{"location":"codelang/go/#_1","title":"\u5185\u5bb9","text":"<ul> <li>\u57fa\u672c\u5143\u7d20</li> <li>\u51fd\u6570</li> <li>\u65b9\u6cd5</li> <li>\u63a5\u53e3</li> <li>\u5e76\u53d1</li> <li>\u5305</li> <li>\u53cd\u5c04</li> </ul>"},{"location":"codelang/go/#_2","title":"\u53c2\u8003","text":"<ul> <li>https://golang-china.github.io/gopl-zh/index.html</li> <li>https://tour.go-zh.org/list</li> </ul>"},{"location":"codelang/go/1/","title":"\u57fa\u672c\u5143\u7d20","text":""},{"location":"codelang/go/1/#_2","title":"\u53d8\u91cf","text":"<pre><code>var i, j int = 1, 2\nvar a, b = \"alice\", \"bob\" \n\nfunc main() {\n    c, python, go := false, true, \"yes!\"\n}\n</code></pre> <ul> <li>\u7c7b\u578b\u53ef\u4ee5\u58f0\u660e\uff0c\u4e5f\u80fd\u81ea\u52a8\u63a8\u5bfc</li> <li><code>:=</code> \u5728\u51fd\u6570\u5185\u5feb\u901f\u58f0\u660e\u5c40\u90e8\u53d8\u91cf\uff0c\u4e0d\u9700\u8981\u7528 <code>var</code>\uff0c\u4f46\u53ea\u80fd\u5728\u51fd\u6570\u5185\uff0c\u7b97\u4e00\u4e2a\u8bed\u6cd5\u7cd6</li> </ul>"},{"location":"codelang/go/1/#type","title":"type","text":"<pre><code>bool  // default false\n\nstring  // default \"\"\n\n//default 0\nint  int8  int16  int32  int64\nuint uint8 uint16 uint32 uint64\nuintptr\n\nbyte // equals uint8\nrune // equals int32\n\nfloat32 float64\ncomplex64 complex128\n</code></pre> <pre><code>var (\n    ToBe   bool       = false\n    MaxInt uint64     = 1&lt;&lt;64 - 1\n    z      complex128 = cmplx.Sqrt(-5 + 12i)\n    p      *int       = nil \n)\n\nfunc main() {\n    fmt.Printf(\"\u7c7b\u578b\uff1a%T \u503c\uff1a%v\\n\", ToBe, ToBe)\n    fmt.Printf(\"\u7c7b\u578b\uff1a%T \u503c\uff1a%v\\n\", MaxInt, MaxInt)\n    fmt.Printf(\"\u7c7b\u578b\uff1a%T \u503c\uff1a%v\\n\", z, z)\n\n    i := 42\n    f := float64(i)\n\n    p := &amp;i\n}\n</code></pre> <p>Go \u8ddf C \u4e0d\u4e00\u6837\uff0c</p> <ul> <li>\u6240\u6709\u6570\u503c\u7c7b\u578b\u8f6c\u6362\u5fc5\u987b\u663e\u5f0f</li> <li>\u6307\u9488\u8ddf C \u7c7b\u4f3c\uff0c\u4f46\u662f\u6ca1\u6709\u6307\u9488\u8fd0\u7b97\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u9690\u5f0f\u89e3\u5f15\u7528 (*p).X p.X,</li> </ul>"},{"location":"codelang/go/1/#_3","title":"\u7ed3\u6784\u4f53","text":"<pre><code>package main\n\nimport \"fmt\"\n\ntype Vertex struct {\n    X, Y int\n}\n\nfunc main() {\n    v := Vertex{1, 2}\n    v.X = 4\n    fmt.Println(v.X)\n}\n</code></pre>"},{"location":"codelang/go/1/#_4","title":"\u6570\u7ec4","text":""},{"location":"codelang/go/1/#_5","title":"\u6761\u4ef6","text":"<pre><code>if x &lt; 0 {\n    x += 1\n} else {\n    return x\n}\n\n// \u8fd8\u80fd\u5728\u5224\u65ad\u4e4b\u524d\uff0c\u6267\u884c\u8bed\u53e5\nif v := x * x; v &lt; 100 {\n    return v\n}\n</code></pre>"},{"location":"codelang/go/1/#_6","title":"\u5339\u914d","text":"<p><pre><code>switch os := runtime.GOOS; os {\ncase \"darwin\":\n    fmt.Println(\"macOS.\")\ncase \"linux\":\n    fmt.Println(\"Linux.\")\ndefault:\n    fmt.Printf(\"%s.\\n\", os)\n}\n\n// \u65e0\u6761\u4ef6\u7684 switch\nt := time.Now()\nswitch {\ncase t.Hour() &lt; 12:\n    fmt.Println(\"\u65e9\u4e0a\u597d\uff01\")\ncase t.Hour() &lt; 17:\n    fmt.Println(\"\u4e0b\u5348\u597d\uff01\")\ndefault:\n    fmt.Println(\"\u665a\u4e0a\u597d\uff01\")\n}\n</code></pre>     defer func() {         // \u4f7f\u7528 recover \u6765\u6355\u83b7\u9519\u8bef         if r := recover(); r != nil {             fmt.Println(\"\u6062\u590d\u4e86\u9519\u8bef:\", r)         }     }() - <code>switch case</code> \u4e2d\u4e0d\u9700\u8981 <code>break</code>\uff0c\u5b83\u53ea\u4f1a\u8fd0\u884c\u9009\u5b9a\u7684 <code>case</code></p>"},{"location":"codelang/go/1/#_7","title":"\u5faa\u73af","text":"<p>go \u53ea\u6709\u4e00\u79cd\u5faa\u73af\uff0c<code>for</code>\uff0c\u4f46\u7528\u6cd5\u5f88\u591a\uff0c</p> <pre><code>for i := 0; i &lt; 10; i++ {\n    sum += i\n}\n\n// range\nnumbers := []int{1, 2, 3, 4, 5}\nfor index, value := range numbers {\n    fmt.Println(index, value)\n}\n\n// \u7b49\u4ef7\u4e8e while\nfor ; sum &lt; 100; {\n    sum += sum\n}\n\nfor sum &lt; 100 {\n    sum += sum\n}\n\n// \u65e0\u9650\u5faa\u73af\nfor {\n\n}\n</code></pre> <pre><code>func Sqrt(x float64) float64 {\n    z := 1.0\n    for i:= 0; i &lt; 10; i++ {\n        z -= (z*z -x) / (2*z)\n    }\n    return z\n}\n</code></pre>"},{"location":"codelang/go/1/#defer-recover","title":"defer recover \u8bed\u53e5","text":""},{"location":"codelang/go/1/#defer","title":"defer","text":"<pre><code>func readFile(filename string) {\n    file, err := os.Open(filename)\n    if err != nil {\n        log.Fatal(err)\n    }\n    defer file.Close()\n\n    // ...\n}\n</code></pre> <p>\u63a8\u8fdf\u8c03\u7528\uff0c<code>defer</code> \u8bed\u53e5\u662f\u4e3a\u4e86\u7b80\u5316\u8d44\u6e90\u7ba1\u7406\u548c\u6e05\u9664\u8bbe\u8ba1\u7684\u3002\u600e\u4e48\u770b\u90fd\u662f\u957f\u671f\u88ab <code>C</code> \u6298\u78e8\u7684\u4eba\u8bbe\u8ba1\u51fa\u6765\u7684\u3002</p> <ul> <li>\u91ca\u653e\u64cd\u4f5c\u5c31\u5728\u5206\u914d\u7684\u9644\u8fd1\uff0c\u786e\u4fdd\u4e0d\u4f1a\u5fd8\u8bb0\uff0c\u6574\u6d01\u3001\u597d\u7ef4\u62a4</li> <li>\u591a\u4e2a <code>defer</code> \u8bed\u53e5\uff0c\u6309 \u540e\u8fdb\u5148\u51fa \u7684\u987a\u5e8f\u6267\u884c\uff0c\u8fd8\u662f\u4e3a\u4e86\u65b9\u4fbf\u8d44\u6e90\u91ca\u653e</li> </ul>"},{"location":"codelang/go/1/#recover","title":"recover","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n)\n\nfunc main() {\n    fmt.Println(\"\u7a0b\u5e8f\u5f00\u59cb\")\n\n    safeFunction()\n\n    fmt.Println(\"\u7a0b\u5e8f\u7ed3\u675f\")\n}\n\nfunc safeFunction() {\n    defer func() {\n        // \u4f7f\u7528 recover \u6765\u6355\u83b7\u9519\u8bef\n        if r := recover(); r != nil {\n            fmt.Println(\"\u6062\u590d\u4e86\u9519\u8bef:\", r)\n        }\n    }() // () \u533f\u540d\u51fd\u6570\u7684\u7acb\u5373\u8c03\u7528\n\n    fmt.Println(\"\u8fdb\u5165 safeFunction\")\n\n    var a, b = 1, 0\n    fmt.Println(\"\u7ed3\u679c:\", a/b) // \u8fd9\u5c06\u5f15\u53d1\u8fd0\u884c\u65f6\u9519\u8bef (\u9664\u4ee5\u96f6)\n}\n</code></pre> <p><code>recover</code> \u8bed\u53e5\u5e38\u8ddf <code>defer</code> \u642d\u914d\u4f7f\u7528\uff0c</p> <ul> <li><code>recover</code> \u7528\u4e8e\u4ece\u8fd0\u884c\u65f6\u9519\u8bef\u4e2d\u6062\u590d\u3002\u5f53\u7a0b\u5e8f\u9047\u5230\u9519\u8bef\uff08\u5982\u9664\u4ee5\u96f6\uff09\u65f6\uff0c\u5b83\u4f1a\u89e6\u53d1\u4e00\u4e2a\u6050\u614c\uff08panic\uff09\uff0c\u7136\u540e\u7a0b\u5e8f\u7684\u63a7\u5236\u6d41\u4f1a\u88ab\u8f6c\u79fb\u5230 <code>defer</code> \u58f0\u660e\u7684\u51fd\u6570\u4e2d</li> <li>\u5982\u679c\u5728 <code>defer</code> \u51fd\u6570\u4e2d\u8c03\u7528 <code>recover</code>\uff0c\u5b83\u4f1a\u8fd4\u56de\u53d1\u751f\u7684\u9519\u8bef\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\uff0c\u800c\u7a0b\u5e8f\u4e0d\u4f1a\u5d29\u6e83</li> </ul>"},{"location":"codelang/go/2/","title":"\u51fd\u6570","text":"<pre><code>package main\n\nimport \"fmt\"\n\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc sub(x, y int) int {\n    return x - y\n}\n\nfunc swap(x, y string) (string, string) {\n    return y, x\n}\n\nfunc split(sum int) (x, y int) {\n    x = sum * 4 / 9\n    y = sum - x\n    return\n}\n\nfunc main() {\n    fmt.Println(add(42, 13))\n}\n</code></pre> <p>\u4ed4\u7ec6\u89c2\u5bdf\u4e0b go \u7684\u51fd\u6570\u58f0\u660e\uff0c</p> <ul> <li><code>add sub</code> \u5f62\u53c2\u7684 type \u7f6e\u540e\u4e86\u3002\u540c type \u5f62\u53c2\u53ef\u4ee5\u5408\u5e76\uff0c</li> <li><code>swap</code> \u8fd4\u56de type \u7f6e\u540e\u4e86\u3002\u80fd\u8fd4\u56de\u591a\u4e2a type</li> <li><code>split</code> \u8fd4\u56de\u503c\u53ef\u4ee5\u547d\u540d\uff0c\u6ca1\u6709\u53c2\u6570\u7684 return \u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de\u547d\u540d\u503c</li> </ul>"},{"location":"codelang/go/3/","title":"\u65b9\u6cd5","text":""},{"location":"codelang/go/4/","title":"\u63a5\u53e3","text":""},{"location":"codelang/go/5/","title":"\u5e76\u53d1","text":""},{"location":"codelang/go/6/","title":"\u5305","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\nfunc main() {\n    fmt.Println(\"pi =\", math.Pi)\n}\n</code></pre> <p>\u6bcf\u4e2a go \u6587\u4ef6\u90fd\u90fd\u662f\u4e00\u4e2a\u5305\uff0c\u8fd9\u4e2a\u6982\u5ff5\u4fc3\u8fdb\u4e86\u4ee3\u7801\u91cd\u7528\u548c\u6a21\u5757\u5316\u3002</p> <ul> <li><code>math.Pi</code> \u5927\u5199\u5f00\u5934\uff0c\u8868\u793a\u53ef\u4ee5\u5728\u5305\u5916\u4f7f\u7528</li> </ul>"},{"location":"codelang/go/7/","title":"\u53cd\u5c04","text":""},{"location":"codelang/js/","title":"JavaScript","text":""},{"location":"codelang/python/","title":"Python","text":"<p>\u501f\u52a9 Python \u4e86\u89e3\u65b0\u7684\u601d\u7ef4\u65b9\u5f0f\uff0c</p> <ul> <li>\u9762\u5411\u5bf9\u8c61</li> <li>\u51fd\u6570\u5f0f\u7f16\u7a0b</li> <li>\u95ed\u5305</li> <li>\u5783\u573e\u56de\u6536</li> </ul>"},{"location":"codelang/python/#_1","title":"\u5185\u5bb9","text":"<ul> <li>\u57fa\u672c\u5143\u7d20 </li> <li>\u51fd\u6570</li> <li>\u6a21\u5757</li> <li>\u8f93\u5165\u8f93\u51fa</li> <li>\u5f02\u5e38\u5904\u7406</li> <li>\u9762\u5411\u5bf9\u8c61</li> <li>\u6807\u51c6\u5e93 </li> <li>\u51fd\u6570\u5f0f\u7f16\u7a0b</li> <li>\u534f\u7a0b</li> <li>\u8fdb\u7a0b\u7ebf\u7a0b</li> </ul>"},{"location":"codelang/python/#_2","title":"\u94fe\u63a5","text":"<ul> <li>\u5b98\u65b9\u6559\u7a0b\uff1a https://docs.python.org/3/tutorial</li> <li>\u53ef\u89c6\u5316\u6808\u5e27\uff1a https://pythontutor.com</li> <li>\u7b80\u7ec3\u6559\u7a0b\uff1ahttps://liaoxuefeng.com/books/python/introduction/index.html</li> </ul>"},{"location":"codelang/python/1/","title":"\u57fa\u672c\u5143\u7d20","text":"<pre><code>&gt;&gt;&gt; a = 'abc'\n&gt;&gt;&gt; b = a.replace('a', 'A')\n&gt;&gt;&gt; b\n'Abc'\n&gt;&gt;&gt; a\n'abc'\n</code></pre> <p><code>immutable</code> \u4e0d\u53ef\u53d8\u5bf9\u8c61\uff1a\u81ea\u8eab\u4e0d\u4f1a\u6539\u53d8\uff0c\u5bf9\u8c61\u81ea\u8eab\u7684\u4efb\u4f55\u65b9\u6cd5\u53ea\u4f1a\u521b\u5efa\u65b0\u7684\u5bf9\u8c61\u8fd4\u56de\u3002</p> <p><code>mutable</code> \u53ef\u53d8\u5bf9\u8c61\u3002</p>"},{"location":"codelang/python/1/#_2","title":"\u5e03\u5c14\u503c","text":"<p><code>True</code> <code>False</code>\uff0c\u903b\u8f91\u8fd0\u7b97 <code>and or not</code></p> <p><code>None</code> \u7a7a\u503c\uff0c\u4e0d\u662f 0</p>"},{"location":"codelang/python/1/#number","title":"number","text":"<p><code>number immutable</code>\uff0c\u5206\u4e3a int float\u3002</p> <ul> <li>\u6570\u5b57\u652f\u6301\u5199\u6210 <code>10_000_000_000</code>\uff0c\u7b97\u662f\u4e00\u4e2a\u8bed\u6cd5\u7cd6\u5427</li> <li>\u79d1\u5b66\u8ba1\u6570\u6cd5 <code>1.23e9</code> <code>12.3e8</code> \u662f\u4e00\u6837\u7684\u610f\u601d\u3002</li> </ul>"},{"location":"codelang/python/1/#string","title":"string","text":"<pre><code>str = '\u4e2d\u6587'\nprint(len(str))              # 2\nprint(str.encode('utf-8'))   # b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'\n</code></pre> <p><code>string immutable</code> \uff0c\u652f\u6301\u7d22\u5f15 <code>[1]</code> \u548c \u5207\u7247 <code>[1:]</code>\uff0c\u652f\u6301\u7f16\u7801 <code>str.encode('utf-8')</code> \u548c\u89e3\u7801 <code>str.decode()</code>\uff0c\u5173\u4e8e\u7f16\u7801\u6700\u597d\u5728\u5934\u90e8\u52a0\u4e0a <code># -*- coding: utf-8 -*-</code> \u544a\u8bc9\u89e3\u91ca\u5668\u7528 utf-8 \u7f16\u7801\u8bfb\u53d6\u6e90\u4ee3\u7801</p> <ul> <li>\u5408\u5e76 <code>'Language: ' + 'python'</code></li> <li><code>r'\\name'</code> r \u8868\u793a\u4f7f\u7528\u539f\u59cb\u5b57\u7b26\u4e32\uff0c\u4e0d\u8f6c\u4e49</li> <li><code>b'ABC'</code> \u6bcf\u4e2a\u5b57\u7b26\u5360\u4e00\u4e2a\u5b57\u8282</li> <li>\u957f\u5ea6 <code>\u5b57\u7b26\u6570 len(str)</code> \u6216\u8005 <code>\u5b57\u8282\u6570 len(b'') len(str.encode('utf-8'))</code> </li> <li>\u683c\u5f0f\u5316\u8ddf c \u8bed\u8a00\u4e2d\u76f8\u540c\uff0c<code>%s %d %f %x</code>\uff0c\u6216\u8005\u4f7f\u7528 <code>f'{var}'</code></li> </ul>"},{"location":"codelang/python/1/#list-tuple","title":"list tuple","text":""},{"location":"codelang/python/1/#list","title":"list","text":"<p><pre><code>var = 1\n\n# var \u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u53d8\u91cf\uff0c\u5176\u503c\u5728\u8d4b\u503c\u65f6\u88ab\u590d\u5236\uff0c\u800c\u4e0d\u662f\u5f15\u7528\u3002\noriginal = [0, var, ['000', '111'], '222'] \n\ncopy_list = original[:]\noriginal[2][1] = '9'  # \u4fee\u6539\u5d4c\u5957\u5217\u8868\u4e2d\u7684\u5143\u7d20\nvar = 3  # \u4fee\u6539 var \u7684\u503c\n\nprint(original)  # \u8f93\u51fa: [0, 1, ['000', '9'], '222']\nprint(copy_list) # \u8f93\u51fa: [0, 1, ['000', '9'], '222']\n# \u5b83\u4eec\u5f15\u7528\u4e86\u540c\u4e00\u4e2a\u5d4c\u5957\u5217\u8868\n</code></pre> <code>list []  mutable</code> \u53ef\u4ee5\u5305\u542b\u4e0d\u540c\u7c7b\u578b\u7684\u5143\u7d20\uff0c\u652f\u6301\u7d22\u5f15 <code>[1]</code> \u548c\u5207\u7247 <code>[1:]</code>\u3002</p> <ul> <li>\u5207\u7247\u4f1a\u8fd4\u56de\u4e00\u4e2a\u6d45\u62f7\u8d1d\u7684\u5217\u8868\uff0c\u5217\u8868\u5143\u7d20\u4e0d\u4f1a\u66f4\u6539\uff0c\u53ea\u4f1a\u5bf9\u5d4c\u5957\u5217\u8868\u5185\u7684\u5143\u7d20\u540c\u6b65\u4fee\u6539\u3002</li> <li>\u521b\u5efa <code>L = []</code></li> <li>\u6dfb\u52a0 <code>\u672b\u5c3e\u6dfb\u52a0 list.append(e)</code>\u3001<code>list.insert(pos, e)</code></li> <li>\u5220\u9664 <code>list.pop() or list.pop(i)</code> \u6216\u8005\u6e05\u7a7a <code>list.clear()</code></li> <li>\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570 <code>list.count(e)</code></li> <li>\u987a\u5e8f <code>list.sort()</code> <code>list.reverse()</code></li> <li>\u62f7\u8d1d <code>\u6d45 [:]  list.copy()</code> \u6216 <code>\u6df1 copy.deepcopy(list)</code></li> <li>\u5408\u5e76 <code>[] + []</code></li> <li>\u957f\u5ea6 <code>len(L)</code> `</li> </ul> <p>\u975e\u5e38\u9002\u5408\u5199\u7b97\u6cd5\u554a\u3002</p>"},{"location":"codelang/python/1/#tuple","title":"tuple","text":"<pre><code>t = (1, 2) # t = 1, 2\n\nempty_t = ()\nprint(empty_t)\n\none_t = (1,)\nprint(one_t)\n\noriginal = (t, 3, ['A', 'B'])\noriginal[2][0] = 'X'\noriginal[2][1] = 'Y'\n\nprint(original)\n</code></pre> <p><code>tuple ()  immutable</code>\uff0c\u521d\u59cb\u5316\u540e\u5c31\u4e0d\u80fd\u518d\u6539\uff0c\u4f46\u540c\u6837\u652f\u6301\u7d22\u5f15 <code>[1]</code> \u548c \u5207\u7247 <code>[1:]</code>\u3002</p> <ul> <li>\u56e0\u4e3a\u4e0d\u80fd\u4fee\u6539\uff0c\u6240\u4ee5\u6ca1\u6709 <code>append insert pop</code>\uff0c\u4e5f\u4e0d\u80fd\u5408\u5e76</li> <li>\u521b\u5efa <code>t = ()</code></li> <li>\u957f\u5ea6 <code>len(t)</code></li> </ul> <p>\u56e0\u4e3atuple\u4e0d\u53ef\u53d8\uff0c\u6240\u4ee5\u4ee3\u7801\u66f4\u5b89\u5168\u3002\u5982\u679c\u53ef\u80fd\uff0c\u80fd\u7528tuple\u4ee3\u66fflist\u5c31\u5c3d\u91cf\u7528tuple\u3002</p>"},{"location":"codelang/python/1/#dict-set","title":"dict set","text":""},{"location":"codelang/python/1/#dict","title":"dict","text":"<pre><code>dic = {'jack': 4098, 'sape': 4139}\n\ndic = dict(sape=4139, guido=4127, jack=4098)\n\ndic = dict([('sape', 4139), ('guido', 4127), ('jack', 4098)])\n\ndic = {x: x**2 for x in (2, 4, 6)}\n\nfor k, v in dic.items():\n    print(k, v)\n</code></pre> <p><code>dict {'key':'value', 'immutable':'mutable'}</code>\uff0c\u5728\u5176\u4ed6\u8bed\u8a00\u4e2d\u88ab\u53eb\u505a <code>map</code>\uff0c\u67e5\u627e\u901f\u5ea6\u5feb\u3002 - \u521b\u5efa <code>dic = {}</code> - \u6dfb\u52a0 <code>dict['Adam'] = 67</code> - \u5220\u9664 <code>dict.pop('Adam')</code> - \u67e5\u627e <code>'Adam' in dict</code> \u6216\u8005 <code>dict.get('Adam')</code></p>"},{"location":"codelang/python/1/#set","title":"set","text":"<pre><code>s1 = {1, 2, 3}\ns2 = {2, 3, 4}\n\nprint(s1 &amp; s2) # {2, 3}\nprint(s1 | s2) # {1, 2, 3, 4}\n</code></pre> <p><code>set {key, immutable}</code>\uff0cset \u53ef\u4ee5\u770b\u4f5c\u96c6\u5408\uff0c\u5b83\u53ef\u4ee5\u8fdb\u884c\u4ea4\u96c6 <code>&amp;</code> \u5e76\u96c6 <code>|</code> \u64cd\u4f5c\u3002 - \u521b\u5efa <code>s = set()</code>\uff0c\u4e0d\u80fd\u7528 <code>s = {}</code>\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u65b9\u5f0f\u88ab dict \u5148\u4f7f\u7528\u4e86\u3002 - \u6dfb\u52a0 <code>set.add('key')</code> - \u5220\u9664 <code>set.remove('key')</code> </p>"},{"location":"codelang/python/1/#del","title":"del \u8bed\u53e5","text":"<pre><code>L = [0, 1, 2]\ndel L[2]\ndel L\n\nT = (0, 1, 2)\ndel T[2] # error \ndel T\n\ndic = {'key':5}\ndel dic['key']\ndel dic\n</code></pre> <p><code>del</code> \u6309\u7d22\u5f15 <code>[1]</code> \u6216\u5207\u7247 <code>[1:]</code> \u6e05\u7a7a\u5143\u7d20\uff0c \u6216\u5220\u9664\u6574\u4e2a\u53d8\u91cf\u3002</p>"},{"location":"codelang/python/1/#_3","title":"\u5e8f\u5217\u89e3\u5305","text":"<pre><code>t = ((1, 2), 3, [5, 6, 7])\nx, y, z = t\n</code></pre>"},{"location":"codelang/python/1/#_4","title":"\u6761\u4ef6","text":"<pre><code>age = 3\nif age &gt;= 18:\n    print('adult')\nelif age &gt;= 6:\n    print('teenager')\nelse:\n    print('kid')\n</code></pre>"},{"location":"codelang/python/1/#_5","title":"\u5339\u914d","text":"<pre><code>args = ['gcc', 'hello.c', 'world.c']\n# args = ['clean']\n# args = ['gcc']\n\nmatch args:\n    # \u5982\u679c\u4ec5\u51fa\u73b0gcc\uff0c\u62a5\u9519:\n    case ['gcc']:\n        print('gcc: missing source file(s).')\n    # \u51fa\u73b0gcc\uff0c\u4e14\u81f3\u5c11\u6307\u5b9a\u4e86\u4e00\u4e2a\u6587\u4ef6:\n    case ['gcc', file1, *files]:\n        print('gcc compile: ' + file1 + ', ' + ', '.join(files))\n    # \u4ec5\u51fa\u73b0clean:\n    case ['clean']:\n        print('clean')\n    case _: # \u76f8\u5f53\u4e8e default\n        print('invalid command.')\n</code></pre>"},{"location":"codelang/python/1/#_6","title":"\u5faa\u73af","text":"<pre><code>for in :\n\nwhile :\n\nbreak continue\n</code></pre> <p>\u5faa\u73af\u4e2d\u5e38\u7528\u7684\u4e00\u4e9b\u51fd\u6570\u64cd\u4f5c\uff0c\u5faa\u73af\u7684\u6280\u5de7\uff1a</p>"},{"location":"codelang/python/1/#enumerate","title":"enumerate()","text":"<pre><code>for i, v in enumerate(['tic', 'tac', 'toe']):\n    print(i, v)\n\n# \u5bf9 dict\uff0c\u53d6\u51fa \u7d22\u5f15 \u548c key\nfor i, k in enumerate(dic):\n    print(i, k)\n</code></pre> <p><code>enumerate</code> \u540c\u65f6\u53d6\u51fa\u4f4d\u7f6e\u7d22\u5f15\u548c\u5bf9\u5e94\u7684\u503c</p>"},{"location":"codelang/python/1/#zip","title":"zip()","text":"<pre><code>questions = ['name', 'quest', 'favorite color']\nanswers = ['lancelot', 'the holy grail']\nfor q, a in zip(questions, answers):\n    print('What is your {0}?  It is {1}.'.format(q, a))\n</code></pre> <p><code>zip</code> \u5bf9\u5143\u7d20\u6253\u5305</p>"},{"location":"codelang/python/1/#range","title":"range()","text":"<pre><code>sum = 0\nfor x in range(5):\n    sum = sum + x\nprint(sum)\n</code></pre> <p><code>range(5)</code> \u751f\u6210\u4e00\u4e2a\u5e8f\u5217 [1, 2, 3, 4, 5]</p> <p><code>range(start, end, step)</code> \u751f\u6210\u4e00\u4e2a\u5e8f\u5217 [start, end)\uff0c\u5176\u4e2d\u7684\u6b65\u8fdb\u8de8\u5ea6\u662f step\u3002</p>"},{"location":"codelang/python/1/#sorted-reversed","title":"sorted() reversed()","text":"<p><pre><code>for i in reversed(range(1, 10, 2)):\n     print(i)\n\nfor i in sorted(reversed(range(1, 10, 2))):\n     print(i)\n</code></pre> \u8fd9\u4e2a\u6bd4\u8f83\u5e38\u89c1\uff0c\u6392\u5e8f\u548c\u53cd\u8f6c\u3002</p>"},{"location":"codelang/python/1/#set_1","title":"set()","text":"<pre><code>basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']\nfor f in sorted(set(basket)):\n    print(f)\n</code></pre> <p>\u53bb\u9664\u91cd\u590d\u5143\u7d20</p>"},{"location":"codelang/python/1/#pass","title":"pass \u8bed\u53e5","text":"<p>\u8bed\u53e5\u7684\u5360\u4f4d\u7b26\uff0c\u6267\u884c\u65f6\u88ab\u5ffd\u7565\uff0c\u8ba9\u4f60\u4fdd\u6301\u5728\u66f4\u62bd\u8c61\u7684\u5c42\u6b21\u8fdb\u884c\u601d\u8003\u3002</p>"},{"location":"codelang/python/10/","title":"\u8fdb\u7a0b\u7ebf\u7a0b","text":""},{"location":"codelang/python/10/#_2","title":"\u8fdb\u7a0b","text":"<pre><code>import os\n\npid = os.fork()\nprint(os.getpid())\n\nif pid == 0:\n    print('child: pid = %s, ppid = %s' % (os.getpid(), os.getppid()))\nelse:\n    print('parent: pid = %s, childpid = %s' % (os.getpid(), pid))\n\n# 27524\n# parent: pid = 27524, childpid = 27525\n# 27525\n# child: pid = 27525, ppid = 27524\n</code></pre> <p>\u7531\u4e8e Windows \u6ca1\u6709 fork \u8c03\u7528\uff0c\u5f97\u7528\u4e0a\u8de8\u5e73\u53f0\u7684\u5e93 <code>multiprocessing</code>\u3002</p> <pre><code>from multiprocessing import Process\nimport os\n\ndef run_proc(name):\n    print('child %s : %s' % (name, os.getpid()))\n\nif __name__ == '__main__':\n    print('parent: %s' % os.getpid())\n\n    p = Process(target=run_proc, args=('test',))\n    p.start()\n    p.join() # \u7b49\u5f85\u5b50\u8fdb\u7a0b\u7ed3\u675f\n</code></pre> <p>\u8fdb\u4e00\u6b65\uff0c\u5e93\u91cc\u8fd8\u6709\u5b9e\u7528\u7684\u8fdb\u7a0b\u6c60\u3002</p> <pre><code>from multiprocessing import Pool\nimport os\n\ndef run_proc(name):\n    print('child %s : %s' % (name, os.getpid()))\n\nif __name__ == '__main__':\n    print('parent: %s' % os.getpid())\n\n    p = Pool(4)\n    for i in range(6):\n        p.apply_async(run_proc, args=(i,))\n    p.close()  # \u4e0d\u7ee7\u7eed\u6dfb\u52a0 Process\n    p.join()   # \u7b49\u5f85\u6240\u6709\u5b50\u8fdb\u7a0b\u7ed3\u675f\n</code></pre> <p>\u8fdb\u7a0b\u95f4\u901a\u4fe1\u53ef\u4ee5\u7528 <code>Queue</code>\uff0c</p> <pre><code>from multiprocessing import Process, Queue\nimport os, time, random\n\ndef read(q):\n    print('read pid: %s' % os.getpid())\n    while True:\n        value = q.get(True)\n        print('Get %s from queue' % value)\n\ndef write(q):\n    print('write pid: %s' % os.getpid())\n    for value in ['A', 'B', 'C']:\n        print('Put %s into queue' % value)\n        q.put(value)\n        time.sleep(random.random())\n\n\nif __name__ == '__main__':\n    q = Queue()\n    pw = Process(target=write, args=(q,))\n    pr = Process(target=read, args=(q,))\n\n    pw.start()\n    pr.start()\n\n    pw.join() # \u7b49\u5f85 pw \u5b50\u8fdb\u7a0b\u7ed3\u675f\n    pr.terminate() # \u4e3b\u52a8\u7ec8\u7ed3 pr \u5b50\u8fdb\u7a0b\uff0c\u89c6\u60c5\u51b5\u6709\u4e22\u5931\u6570\u636e\u7684\u5206\u9669\n</code></pre> <p>\u6b64\u5916\uff0c\u4f5c\u4e3a\u811a\u672c\u8bed\u8a00\u7684\u8bdd\uff0c\u7528\u5b50\u8fdb\u7a0b\u53bb\u8c03\u7528\u5916\u90e8\u7a0b\u5e8f\u3002</p> <pre><code>import subprocess\n\nprint('$ nslookup www.python.org')\nr = subprocess.call(['nslookup', 'www.python.org'])\nprint('Exit code:', r)\n</code></pre>"},{"location":"codelang/python/10/#_3","title":"\u7ebf\u7a0b","text":"<pre><code>import threading\n\ndef run_thread():\n    print('child thread name : %s' \n          % threading.current_thread().name)\n\nprint('Main Thraed')\nt = threading.Thread(target=run_thread, name='task')\nt.start()\nt.join()\n</code></pre> <p>\u76f4\u63a5\u7528\u5c01\u88c5\u4e86 <code>_thread</code> \u7684 <code>threading</code>\uff0c\u5e76\u652f\u6301\u9501 <code>Lock</code>,</p> <pre><code>import threading\n\nlock = threading.Lock()\nglobal_var = 0\n\ndef run_add():\n    lock.acquire()\n    try:\n        global_var += 1\n    finally:\n        lock.release()\n\nt = threading.Thread(target=run_add)\nprint(global_var)\n</code></pre> <p>\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0cPython \u6709\u4e00\u4e2aGIL\u9501\uff08Global Interpreter Lock\uff09\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u5fc5\u987b\u83b7\u5f97\u4e86\u9501\u5728\u80fd\u6267\u884c\uff0c\u56e0\u6b64\uff0c\u591a\u7ebf\u7a0b\u5728 Python \u4e2d\u53ea\u662f\u4ea4\u66ff\u6267\u884c\u3002\u591a\u7ebf\u7a0b\u4e0d\u80fd\u5b9e\u73b0\u591a\u6838\u4efb\u52a1\uff0c\u4f46\u662f\u591a\u8fdb\u7a0b\u53ef\u4ee5\u3002\uff08\u6216\u5176\u4ed6\u8bed\u8a00\u53bb\u505a\uff0c\u6bd4\u5982 C\u3002\uff09</p> <pre><code>import threading\n\n# \u521b\u5efa ThreadLocal \u5bf9\u8c61\nthread_local_data = threading.local()\n\ndef worker(num):\n    thread_local_data.value = num\n\n    print(f'Thread {threading.current_thread().name}: {thread_local_data.value}')\n\nthreads = []\nfor i in range(5):\n    t = threading.Thread(target=worker, args=(i,))\n    threads.append(t)\n    t.start()\n\nfor t in threads:\n    t.join()\n</code></pre> <p><code>ThreadLocal</code> \u5728\u591a\u4e2a\u7ebf\u7a0b\u4e2d\u5171\u4eab\u540c\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u4f46\u6bcf\u4e2a\u7ebf\u7a0b\u5bf9\u8be5\u5b9e\u4f8b\u7684\u8bbf\u95ee\u662f\u9694\u79bb\u7684\u3002</p>"},{"location":"codelang/python/10/#_4","title":"\u5206\u5e03\u5f0f\u8fdb\u7a0b","text":""},{"location":"codelang/python/2/","title":"\u51fd\u6570","text":""},{"location":"codelang/python/2/#_2","title":"\u5e38\u7528\u51fd\u6570","text":"<ul> <li>\u6570\u5b66<ul> <li><code>abs()</code> <code>max()</code> <code>min()</code> <code>sum()</code></li> </ul> </li> <li>\u5b57\u7b26\u4e32<ul> <li><code>len()</code> <code>upper()</code> <code>lower()</code> <code>split()</code> <code>join()</code></li> </ul> </li> <li>\u8f93\u5165\u8f93\u51fa<ul> <li><code>input()</code> <code>print()</code></li> </ul> </li> <li>\u6570\u636e\u7ed3\u6784\u8f6c\u6362<ul> <li><code>list()</code> <code>set()</code> <code>tuple() dict()</code></li> </ul> </li> <li>\u5b57\u5178<ul> <li><code>keys()</code> <code>values()</code> <code>items()</code></li> </ul> </li> <li>\u6570\u636e\u7c7b\u578b\u5224\u65ad\u3001\u8f6c\u6362<ul> <li><code>type()</code> <code>isinstance()</code> <code>dir()</code></li> <li><code>int()</code> <code>float()</code> <code>str()</code> <code>bool</code></li> </ul> </li> </ul> <pre><code># \u5224\u65ad\u662f\u5426\u662f\u53ef\u8fed\u4ee3\u5bf9\u8c61\nfrom typing import Iterable\n\nprint(isinstance('string', Iterable))\nprint(isinstance([], Iterable))\nprint(isinstance((1,), Iterable))\nprint(isinstance({'key'}, Iterable))\nprint(isinstance({'key':'value'}, Iterable))\nprint(isinstance((x for x in range(10)), Iterable))\n\nprint(isinstance(100, Iterable)) # False\n</code></pre>"},{"location":"codelang/python/2/#_3","title":"\u53c2\u6570","text":"<pre><code>def func(*tuple_, **dict_, defalut_='default'):\n    pass\n\ndef concat(*args, sep=\"/\"):\n    return sep.join(args)\n\nprint(concat(\"earth\", \"mars\", \"venus\"))\n# 'earth/mars/venus'\nprint(concat(\"earth\", \"mars\", \"venus\", sep=\".\"))\n# 'earth.mars.venus'\n</code></pre>"},{"location":"codelang/python/2/#lambda","title":"\u533f\u540d\u51fd\u6570\uff1alambda \u8868\u8fbe\u5f0f","text":"<pre><code>def make_incrementor(n):\n    return lambda x: x + n\n\nf = make_incrementor(42)\nprint(f(0))\n</code></pre>"},{"location":"codelang/python/2/#_4","title":"\u51fd\u6570\u5185\u90e8\u5b9a\u4e49\u51fd\u6570","text":"<pre><code>def func1():\n    def func2():\n        pass\n    # using func2\n    return None\n</code></pre> <p>\u4e00\u79cd\u662f\u76f4\u63a5\u4f7f\u7528\uff0c\u76f8\u5f53\u4e8e\u8f85\u52a9\u51fd\u6570\uff1b\u53e6\u4e00\u79cd\u662f\u8fd4\u56de\u5185\u90e8\u5b9a\u4e49\u7684\u51fd\u6570\uff0c\u53ef\u4ee5\u53c2\u8003 SICP\u3002</p> <pre><code>def func1():\n    def func2():\n        pass\n    return func2\n</code></pre>"},{"location":"codelang/python/2/#doctest","title":"doctest","text":"<pre><code>def my_function():\n    \"\"\"Do nothing, but document it.\n    No, really, it doesn't do anything.\n    &gt;&gt;&gt; my_function()\n    'doctest'\n    \"\"\"\n    pass\n    return 'doctest'\n</code></pre>"},{"location":"codelang/python/3/","title":"\u6a21\u5757","text":"<p>\u6a21\u5757\uff1aModule\uff0c\u4e00\u4e2a <code>.py</code> \u6587\u4ef6\u5c31\u662f\u4e00\u4e2a\u6a21\u5757\u3002</p> <p>\u5305\uff1aPackage\uff0c\u6309\u76ee\u5f55\u6765\u7ec4\u7ec7\u6a21\u5757\u7684\u65b9\u6cd5\uff0c\u7528 <code>__init__.py</code> \u6807\u8bc6\u4e00\u4e2a\u5305\u3002</p> <pre><code>mycompany\n \u251c\u2500 web\n \u2502  \u251c\u2500 __init__.py  # mycompany.web\n \u2502  \u251c\u2500 utils.py     # mycompany.web.utils\n \u2502  \u2514\u2500 www.py\n \u251c\u2500 __init__.py     # mycompany\n \u251c\u2500 abc.py\n \u2514\u2500 utils.py        # mycompany.utils\n</code></pre>"},{"location":"codelang/python/3/#if","title":"if \u6d4b\u8bd5","text":"<pre><code>if __name__=='__main__':\n    pass\n</code></pre> <p>Python \u89e3\u91ca\u5668\u628a\u7279\u6b8a\u53d8\u91cf <code>__name__</code> \u7f6e\u4e3a <code>__main__</code>\uff0c\u5728\u5176\u4ed6\u5730\u65b9\u5bfc\u5165\u8be5\u6a21\u5757\u65f6\uff0c<code>if</code> \u5224\u65ad\u5c06\u5931\u8d25\u3002</p> <p>\u8fd9\u79cd <code>if</code> \u975e\u5e38\u9002\u5408\u8fd0\u884c\u6d4b\u8bd5\u3002</p>"},{"location":"codelang/python/3/#pycache","title":"pycache","text":"<p>\u4e3a\u4e86\u5feb\u901f\u52a0\u8f7d\u6a21\u5757\uff0cPython \u4f1a\u628a\u7f16\u8bd1\u7248\u672c\u7f13\u5b58\u5728 <code>__pycache__</code> \u76ee\u5f55\u4e2d\uff0c\u6587\u4ef6\u540d\u4e3a <code>module.version.pyc</code>\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u5b8c\u5168\u662f\u81ea\u52a8\u7684\uff0c\u4e0d\u7528\u6050\u614c\u7a81\u7136\u591a\u51fa\u6765\u7684\u4e1c\u897f\u3002</p>"},{"location":"codelang/python/3/#_2","title":"\u5185\u7f6e\u6a21\u5757","text":"<ul> <li>\u57fa\u7840\u6570\u636e\u7ed3\u6784 <code>collections</code> <code>array</code></li> <li>\u6587\u4ef6\u76ee\u5f55 <code>os</code></li> <li>\u6570\u636e\u5904\u7406 <code>json</code> <code>csv</code> <code>pickle</code></li> <li>\u7f51\u7edc\u7f16\u7a0b <code>urllib</code> <code>socket</code></li> <li>\u591a\u7ebf\u7a0b/\u8fdb\u7a0b <code>threading</code> <code>multiprocessing</code></li> <li>\u65f6\u95f4\u65e5\u671f <code>datetime</code> <code>time</code></li> <li>\u6b63\u5219 <code>re</code></li> <li>\u6570\u5b66 <code>math</code> <code>random</code></li> <li>\u54c8\u5e0c <code>hashlib</code> <code>hmac</code></li> <li>\u6570\u636e\u5e93 <code>sqlite3</code></li> <li>\u5176\u4ed6 <code>sys</code> <code>logging</code> <code>io</code> <code>argparse</code> <code>base64</code> </li> </ul>"},{"location":"codelang/python/3/#_3","title":"\u7b2c\u4e09\u65b9\u6a21\u5757","text":"<ul> <li>\u56fe\u50cf\u5904\u7406 <code>Pillow</code></li> <li>\u7f51\u7edc\u8d44\u6e90 <code>requests</code></li> <li>\u5b57\u7b26\u96c6 <code>chardet</code></li> <li>\u7cfb\u7edf\u8fd0\u7ef4 <code>psutil</code></li> </ul> <p>\u4f7f\u7528 <code>pip</code> \u5b89\u88c5\uff0c\u6216\u8005\u7528\u96c6\u6210\u7684\u5e73\u53f0\uff0c\u5982 <code>Anaconda</code>\u3002</p> <p>\u81ea\u6d4b\u6a21\u5757\u6216\u5305\u65f6\uff0c\u53ef\u80fd\u9700\u8981\u6dfb\u52a0\u6a21\u5757\u641c\u7d22\u8def\u5f84\uff0c</p> <ul> <li><code>sys.path.append('path')</code></li> <li>\u73af\u5883\u53d8\u91cf\uff0c<code>PYTHONPATH=$PYTHONPATH:path</code></li> </ul>"},{"location":"codelang/python/3/#dir","title":"dir()","text":"<p><code>dir()</code> \u53ef\u4ee5\u67e5\u770b\u6a21\u5757\u5185\u90e8\u7684\u5b9a\u4e49\u3002</p> <pre><code>import sqlite3\n\nprint(dir(sqlite3))\n</code></pre>"},{"location":"codelang/python/3/#_4","title":"\u865a\u62df\u73af\u5883","text":"<p>\u67d0\u4e2a\u5e94\u7528\u9700\u8981\u5305\u7684\u7248\u672c1\uff0c\u53e6\u4e00\u4e2a\u5e94\u7528\u9700\u8981\u5305\u7684\u7248\u672c2\u3002\u5728\u540c\u4e00\u53f0\u673a\u5668\u4e0a\uff0c\u4f1a\u6709\u51b2\u7a81\uff0c\u9700\u8981\u865a\u62df\u73af\u5883\u6765\u89e3\u51b3\u3002</p> <ul> <li>venv\uff0c\u5185\u7f6e\uff0c\u7b80\u5355\uff0c\u6fc0\u6d3b\u5feb\uff0c\u4e0d\u80fd\u7ba1\u7406\u4f9d\u8d56</li> <li>virtualenv\uff0c\u7b80\u5355\uff0c\u6bd4 venv \u5f3a\u4e00\u70b9</li> <li>conda\uff0c\u79d1\u5b66\u8ba1\u7b97\uff0c\u4e0d\u662f\u4e13\u4e1a\u7684\uff0c\u57fa\u672c\u7528\u4e0d\u4e0a\u3002</li> <li>pipenv\uff0c\u6027\u80fd\u8fd8\u884c\uff0c\u6709\u7b80\u5355\u7684\u4f9d\u8d56\u7ba1\u7406\uff0c\u81ea\u52a8\u751f\u6210 Pipfile \u548c Pipfile.lock\uff0c\u53ef\u91cd\u73b0\uff0c\u9002\u5408\u5c0f\u578b\u9879\u76ee\u3002</li> <li>poetry\uff0c\u66f4\u73b0\u4ee3\uff0c\u6027\u80fd\u597d\uff0c\u4f9d\u8d56\u7ba1\u7406\u3001\u7248\u672c\u63a7\u5236\uff0cpyproject.toml\uff0c\u63d0\u4f9b\u53d1\u5e03\u5230PyPI\uff0c\u9002\u5408\u590d\u6742\u9879\u76ee\u3002</li> </ul> <p>\u5bf9\u4e8e\u66f4\u5927\u578b\u3001\u590d\u6742\u7684\u5305\u4f9d\u8d56\u60c5\u51b5\uff0c\u76f4\u63a5\u4e0a docker \u5bb9\u5668\u7b97\u4e86\u3002</p>"},{"location":"codelang/python/4/","title":"\u8f93\u5165\u8f93\u51fa","text":""},{"location":"codelang/python/4/#_2","title":"\u6587\u4ef6","text":"<pre><code>with open('test.txt', 'r') as f:\n    print(f.read())\n    print(f.read(5))\n    print(f.readline())\n    print(f.readlines()) # [ , , ]\n</code></pre> <p>\u539f\u5148\u7684 open read close \u88ab with \u8bed\u53e5\u66ff\u4ee3\u4e86\uff0c\u8fd9\u6837\u4f1a\u81ea\u52a8\u5173\u95ed\u6587\u4ef6\u3002</p> <ul> <li>\u4e8c\u8fdb\u5236\u6587\u4ef6 <code>rb</code></li> <li>\u7f16\u7801 <code>encoding='utf-8'</code></li> <li>\u5199\u6587\u4ef6 <code>w</code> \u5199\u4e8c\u8fdb\u5236\u6587\u4ef6 <code>wb</code></li> <li>\u8ffd\u52a0 <code>a</code></li> </ul>"},{"location":"codelang/python/4/#stringio-bytesio","title":"StringIO BytesIO","text":"<pre><code>from io import StringIO\n\nf = StringIO()\nf.write('Hello')\nf.write(' World')\nprint(f.getvalue())\nf.close()\n</code></pre> <p>StringIO \u64cd\u4f5c\u5b57\u7b26\u4e32\uff0cBytesIO \u64cd\u4f5c\u5b57\u8282\uff08\u4e8c\u8fdb\u5236\u6570\u636e\uff09\u3002</p> <pre><code>from io import BytesIO\n\nf = BytesIO()\nf.write('\u4e2d\u6587'.encode('gbk'))\nprint(f.getvalue())\nf.close()\n</code></pre>"},{"location":"codelang/python/4/#os","title":"os \u6a21\u5757","text":"<pre><code>import os\n\nprint(os.name)\nprint(os.environ)\nprint(os.environ.get('PATH'))\nprint(os.uname())\n\nprint(os.path.abspath('.'))\ndirpath = os.path.join(os.path.abspath('.'), 'test')\nos.mkdir(dirpath)\nos.rmdir(dirpath)\n</code></pre> <ul> <li><code>os.path.splitext()</code> \u5206\u79bb\u6269\u5c55\u540d</li> <li><code>os.rename(old, new)</code> \u91cd\u547d\u540d\u6587\u4ef6</li> <li><code>os.remove(file)</code> \u5220\u9664\u6587\u4ef6</li> <li><code>os.rmdir(dir)</code> \u5220\u9664\u76ee\u5f55</li> </ul>"},{"location":"codelang/python/4/#_3","title":"\u5e8f\u5217\u5316","text":""},{"location":"codelang/python/4/#pickle","title":"pickle","text":"<pre><code>import pickle\n\ndic = dict(name='Alice', age=16)\nprint(pickle.dumps(dic))\n\nf = open('dump.txt', 'wb')\npickle.dump(dic, f)\nf.close()\n\nwith open('dump.txt', 'rb') as f:\n    read_dic = pickle.load(f)\n    print(read_dic)\n</code></pre> <p>\u7b80\u5355\uff0c\u597d\u7528\uff0c\u5c31\u662f\u4e0d\u592a\u6b63\u89c4\uff0c\u53ef\u80fd\u5b58\u5728\u4e0d\u540c pickle \u7248\u672c\u4e0d\u517c\u5bb9\u7684\u95ee\u9898\u3002</p>"},{"location":"codelang/python/4/#json","title":"json \u6a21\u5757","text":"<pre><code>import json\n\nd = dict(name='Alice', age=20)\nprint(json.dumps(d))\n\nf = open('dump.txt', 'w')\njson.dump(d, f)\nf.close()\n\nwith open('dump.txt', 'r') as f:\n    read_json = json.load(f)\n    print(read_json)\n</code></pre>"},{"location":"codelang/python/5/","title":"\u5f02\u5e38\u5904\u7406","text":"<pre><code>try:\n    print('try...')\n    r = 10 / int('2')\n    print('result:', r)\nexcept ValueError as e:\n    print('ValueError:', e)\nexcept ZeroDivisionError as e:\n    print('ZeroDivisionError:', e)\nelse:\n    # raise # \u5904\u7406\u4e0d\u4e86\uff0c\u629b\u51fa\u53bb\n    print('no error!')\nfinally:\n    print('finally...')\nprint('END')\n</code></pre> <p>\u8ba4\u4e3a\u53ef\u80fd\u4f1a\u51fa\u9519\u7684\u4ee3\u7801\uff0c\u53ef\u4ee5\u4e22\u7ed9 <code>try except</code>\uff0c\u5982\u679c\u6709\u7684\u8bdd\uff0c\u8fd8\u4f1a\u6267\u884c<code>finally</code> \u8bed\u53e5\u5757\u3002</p>"},{"location":"codelang/python/5/#assert","title":"assert","text":"<pre><code>assert 5 &gt; 2\n</code></pre> <p>\u5982\u679c\u901a\u4e0d\u8fc7\uff0c\u7a0b\u5e8f\u4f1a\u629b\u51fa\u5f02\u5e38\u6808\u3002</p>"},{"location":"codelang/python/5/#pdb","title":"pdb","text":"<p>\u8ddf gdb \u5f88\u7c7b\u4f3c\u3002</p>"},{"location":"codelang/python/5/#_2","title":"\u6d4b\u8bd5","text":"<ul> <li>doctest\uff0c\u5185\u7f6e\uff0c\u6587\u6863\u6d4b\u8bd5</li> <li>pytest\uff0c\u529f\u80fd\u66f4\u5f3a\u5927\uff0c\u5355\u5143\u6d4b\u8bd5</li> </ul>"},{"location":"codelang/python/6/","title":"\u9762\u5411\u5bf9\u8c61","text":"<p>\u9762\u5411\u5bf9\u8c61\uff0c\u9996\u5148\u8003\u8651\u7684\u4e0d\u662f\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\uff0c\u800c\u662f\u5148\u628a\u6570\u636e\u89c6\u4e3a\u5bf9\u8c61\u3002\u5bf9\u8c61\u6709\u54ea\u79cd\u5c5e\u6027\uff0c\u4ec0\u4e48\u65b9\u6cd5\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u5c31\u9690\u85cf\u4e86\u5185\u90e8\u7684\u590d\u6742\u903b\u8f91\u3002</p> <pre><code>class Student(object):  # \u7ee7\u627f\u81ea object\n    def __init__(self, name, score) -&gt; None:\n        self.name = name\n        self.score = score\n\n    def print_score(self):\n        print('%5s : %s ' % (self.name, self.score))\n\nalice = Student('alice', 59)\nbob = Student('bob', 59.9)\n\nalice.print_score()\nbob.score = 60\nbob.print_score()\n</code></pre> <p>\u7c7b\uff1aClass\uff0c\u62bd\u8c61\u7684\u6a21\u677f\u3002 \u5b9e\u4f8b\uff1aInstance\uff0c\u6839\u636e\u7c7b\u521b\u5efa\u51fa\u6765\u7684\u4e00\u4e2a\u4e2a\u5177\u4f53\u7684\u5bf9\u8c61\uff0c\u6bcf\u4e2a\u5bf9\u8c61\u6570\u636e\u4e0d\u540c\uff0c\u65b9\u6cd5\u4e00\u6837\u3002</p> <p>\u7c7b\u7684 <code>__init__</code> \u65b9\u6cd5\uff0c\u5728\u521b\u5efa\u5b9e\u4f8b\u7684\u65f6\u5019\uff0c\u628a <code>name score</code> \u7b49\u5c5e\u6027\u7ed1\u4e0a\u53bb\u3002<code>self</code> \u5c31\u6307\u5411\u521b\u5efa\u7684\u5b9e\u4f8b\u672c\u8eab\u3002</p>"},{"location":"codelang/python/6/#_2","title":"\u8bbf\u95ee\u9650\u5236","text":"<pre><code>    def __init__(self, name, score) -&gt; None:\n        self.__name = name\n        self.__score = score\n\nbob.__score = 60\nprint(bob.__score)  # 60\nbob.print_score()   # 59.9\n</code></pre> <ul> <li>\u7279\u6b8a\u53d8\u91cf\uff0c\u524d\u540e\u5e26\u6709\u4e24\u4e2a\u4e0b\u5212\u7ebf\u7684\u547d\u540d\uff0c<code>__name__</code> <code>__init__</code></li> <li>\u4e00\u4e2a\u4e0b\u5212\u7ebf\u5f00\u59cb\u7684\u547d\u540d\uff0c<code>_name</code>\uff0c\u5c3d\u91cf\u89c6\u4e3a\u79c1\u6709\u7684</li> <li>\u4e24\u4e2a\u4e0b\u5212\u7ebf\u5f00\u59cb\u7684\u547d\u540d\uff0c<code>__name</code>\uff0c\u79c1\u6709\u53d8\u91cf\uff0c\u5916\u90e8\u4e0d\u80fd\u76f4\u63a5\u8bbf\u95ee</li> </ul>"},{"location":"codelang/python/6/#_3","title":"\u7ee7\u627f\u548c\u591a\u6001","text":"<pre><code>class Animal(object):\n    def run(self):\n        print('Animal is running...')\n\nclass Dog(Animal):\n    pass\n\nclass Cat(Animal):\n    def run(self):\n        print('Cat is running...')\n\ndef Animal_run(animal):\n    animal.run()\n\ndog = Dog()\ncat = Cat()\n\nAnimal_run(dog)\ncat.run()\n</code></pre> <p>\u7ee7\u627f\uff1a\u5b50\u7c7b\u62e5\u6709\u7236\u7c7b\u7684\u5c5e\u6027\u548c\u65b9\u6cd5\u3002</p> <p>\u591a\u6001\uff1a\u6765\u81ea\u7ee7\u627f\u3002\u7279\u70b9\u4e00\uff0c\u5b50\u7c7b\u548c\u7236\u7c7b\u6709\u76f8\u540c\u7684\u65b9\u6cd5\u65f6\uff0c\u5b50\u7c7b\u7684\u65b9\u6cd5\u8986\u76d6\u4e86\u7236\u7c7b\u7684\uff0c\u4ee3\u7801\u8fd0\u884c\u65f6\uff0c\u603b\u4f1a\u8c03\u7528\u5b50\u7c7b\u7684\u65b9\u6cd5\u3002\u7279\u70b9\u4e8c\uff0c\u8c03\u7528\u4f20\u53c2\u65f6\uff0c\u5b50\u7c7b\u7684\u5b9e\u4f8b\u53ef\u4ee5\u88ab\u5f53\u4f5c\u7236\u7c7b\u7684\u7c7b\u578b\uff0c\u53ef\u4ee5\u65e0\u9650\u6269\u5c55\u5b50\u7c7b\uff0c\u800c\u4e0d\u9700\u4fee\u6539\u8c03\u7528\u3002</p>"},{"location":"codelang/python/6/#_4","title":"\u5bf9\u8c61\u4fe1\u606f","text":"<ul> <li><code>type()</code> <code>isInstance()</code> <code>dir()</code></li> <li><code>hasattr()</code> <code>setattr()</code> <code>getattr()</code></li> </ul> <pre><code>setattr(dog, 'stop', 'OK!')\nprint(getattr(dog, 'stop'))\nprint(hasattr(dog, 'run'))\n</code></pre> <p>\u53ef\u4ee5\u60f3\u5230\uff0c\u53ef\u4ee5\u7528 <code>dir()</code> \u548c\u8fd9\u4e9b\u63a5\u53e3\uff0c\u5b9e\u73b0\u53cd\u5c04\u673a\u5236\uff0c\u5373\u52a8\u6001\u5730\u83b7\u53d6 \u7c7b\u578b\u4fe1\u606f\u548c\u65b9\u6cd5\u3002</p>"},{"location":"codelang/python/6/#_5","title":"\u7c7b\u5c5e\u6027","text":"<pre><code>class Dog():\n    _name = 'Dog'\n    def __init__(self, name) -&gt; None:\n        self.name = name\n\ndog = Dog('instance')\nprint(dog.name, dog._name) # instance Dog\n</code></pre> <p>\u901a\u8fc7 <code>__init__</code> \u65b9\u6cd5\u548c <code>self.</code> \u521b\u5efa\u7684\u662f\u5b9e\u4f8b\u5c5e\u6027\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5b9a\u4e49\u7c7b\u5c5e\u6027\u3002\u7c7b\u5c5e\u6027\u5f52\u7c7b\u6240\u6709\uff0c\u6240\u6709\u5b9e\u4f8b\u90fd\u80fd\u8bbf\u95ee\u5230\uff0c\u4e5f\u5c31\u662f\u5c3d\u91cf\u4e0d\u8981\u7528\u5217\u8868\u8fd9\u79cd\u53ef\u53d8\u6570\u636e\u4f5c\u4e3a\u7c7b\u5c5e\u6027\u3002</p> <p>\u8fd8\u6709\uff0c\u76f8\u540c\u540d\u79f0\u7684\u5b9e\u4f8b\u5c5e\u6027\u5c06\u5c4f\u853d\u6389\u7c7b\u5c5e\u6027\u3002</p>"},{"location":"codelang/python/6/#property","title":"\u88c5\u9970\u5668 @property","text":"<pre><code>class Student(object):\n    @property\n    def birth(self):\n        return self._birth\n\n    @birth.setter\n    def birth(self, value):\n        self._birth = value\n\ns = Student()\ns.birth = 16  # s.birth(16)\nprint(s.birth) #s.birth()\n</code></pre> <p>\u88c5\u9970\u5668\u628a\u65b9\u6cd5\u53d8\u4f5c\u5c5e\u6027\uff0c\u8fd9\u70b9\u5f88\u65b9\u4fbf\u8c03\u7528\u3002\u65b9\u6cd5\u540d\u4e0d\u8981\u4e0e\u5c5e\u6027\u540d\u4e00\u6837\uff0c\u7f16\u8bd1\u5668\u4f1a\u5206\u4e0d\u6e05\u3002</p> <p>\u53ef\u4ee5\u81ea\u5b9a\u4e49\u88c5\u9970\u5668\uff0c</p> <pre><code>def repeat(num_times):\n    def decorator_repeat(func):\n        def wrapper(*args, **kwargs):\n            for _ in range(num_times):\n                func(*args, **kwargs)\n        return wrapper\n    return decorator_repeat\n\n@repeat(3)\ndef greet(name):\n    print(f\"Hello, {name}!\")\n\n# \u8c03\u7528\u88c5\u9970\u540e\u7684\u51fd\u6570\ngreet(\"Alice\")\n</code></pre>"},{"location":"codelang/python/6/#_6","title":"\u679a\u4e3e\u7c7b","text":"<pre><code>from enum import Enum, unique\n\n@unique # \u68c0\u67e5\u6709\u65e0\u91cd\u590d\u503c\nclass Weekday(Enum):\n    Sun = 0 # Sun\u7684value\u88ab\u8bbe\u5b9a\u4e3a0\n    Mon = 1\n    Tue = 2\n    Wed = 3\n    Thu = 4\n    Fri = 5\n    Sat = 6\n\nprint(Weekday.Mon)       # Weekday.Mon\nprint(Weekday.Mon.value) # 1\n</code></pre> <p>\u8fd9\u4e5f\u662f Python \u4e2d\u6bd4\u8f83\u4f18\u96c5\u7684\u4f7f\u7528\u679a\u4e3e\u53d8\u91cf\u4e86\u3002</p>"},{"location":"codelang/python/6/#_7","title":"\u5176\u4ed6\u7279\u6b8a\u51fd\u6570","text":"<ul> <li><code>__bases__</code> \u7ee7\u627f\u4e86\u54ea\u4e9b\u7c7b</li> <li><code>__slots__</code> \u9650\u5236\u5b9e\u4f8b\u7684\u5c5e\u6027</li> <li><code>__len__</code> \u8fd4\u56de\u5b9e\u4f8b\u7684\u957f\u5ea6</li> <li><code>__str__</code> \u5b9a\u5236\u7c7b\u4fe1\u606f</li> <li><code>__iter__</code> \u8fed\u4ee3\u81ea\u8eab</li> </ul>"},{"location":"codelang/python/7/","title":"\u6807\u51c6\u5e93","text":""},{"location":"codelang/python/8/","title":"\u51fd\u6570\u5f0f\u7f16\u7a0b","text":""},{"location":"codelang/python/8/#map-reduce-filter","title":"map reduce filter","text":""},{"location":"codelang/python/8/#map","title":"map","text":"<pre><code>L = [x for x in range(1, 10)]\nprint(list(map(str, L)))\n</code></pre> <p><code>map(func, Iterable)</code>\uff0c\u5c06\u4f20\u5165\u7684\u51fd\u6570\uff0c\u4f9d\u6b21\u4f5c\u7528\u5230\u5e8f\u5217\u4e0a\uff0c\u5e76\u8fd4\u56de\u65b0\u7684 <code>Iterable</code>\uff0c\u5355\u4e2a\u53c2\u6570\u7684\u6620\u5c04\u3002</p>"},{"location":"codelang/python/8/#reduce","title":"reduce","text":"<pre><code>from functools import reduce\nL = [x for x in range(1, 10)]\nsum = reduce(add, L) # f(f(x1, x2),x3)...\n</code></pre> <p><code>reduce(func, Iterrable)</code>\uff0c\u5bf9\u4f20\u5165\u7684\u5e8f\u5217\uff0c\u53cd\u590d\u5e94\u7528\u4f20\u5165\u7684\u51fd\u6570\uff0c\u4e24\u4e2a\u53c2\u6570\u7684\u8ba1\u7b97\u3002</p>"},{"location":"codelang/python/8/#filter","title":"filter","text":"<pre><code>def is_odd(n):\n    return n % 2 == 1\n\nlist(filter(is_odd, [1, 2, 4, 5, 6, 9, 10, 15]))\n# [1, 5, 9, 15]\n</code></pre> <p><code>filter(func, Iterrable)</code> \u8fc7\u6ee4\u5e8f\u5217\uff0c\u8fd4\u56de\u503c <code>True</code> \u4fdd\u7559 <code>False</code> \u4e22\u5f03\u3002</p> <pre><code>def _odd_iter(): # \u4ee5 3 \u5f00\u59cb\u7684\u5947\u6570\u7cfb\u5217\n    n = 1\n    while True:\n        n = n + 2\n        yield n\n\ndef _not_divisible(n): # \u80fd\u5426\u88ab\u6574\u9664\n    return lambda x: x % n &gt; 0\n\ndef primes():\n    yield 2\n    it = _odd_iter() # \u521d\u59cb\u5e8f\u5217 [3, 5, 7, 9 , ...]\n    while True:\n        n = next(it)\n        yield n\n        it = filter(_not_divisible(n), it)\n\n# \u6253\u53701000\u4ee5\u5185\u7684\u7d20\u6570:\nfor n in primes():\n    if n &lt; 1000:\n        print(n)\n    else:\n        break\n</code></pre> <p><code>it = filter(_not_divisible(n), it)</code> \u8fd9\u91cc\u5c31\u662f\u7b5b\u6cd5\u7684\u6838\u5fc3\u4e86\uff0c\u7b5b\u6389\u5e8f\u5217\u4e2d n \u7684\u500d\u6570\uff0c\u4fdd\u7559\u4e0b\u6765\u5e8f\u5217\u4e2d\u7b2c\u4e00\u4e2a\u6c38\u8fdc\u4f1a\u662f\u7d20\u6570\u3002</p>"},{"location":"codelang/python/8/#closure","title":"\u95ed\u5305 closure","text":"<p>\u95ed\u5305\uff0c\u5b9e\u73b0\u6570\u636e\u9690\u85cf\u548c\u5c01\u88c5\u3002\u518d\u901a\u4fd7\u70b9\uff0c\u5c31\u662f\u53ef\u4ee5\u6355\u83b7\u73af\u5883\u4e2d\u7684\u53d8\u91cf\u3002</p> <ul> <li>\u5d4c\u5957\u51fd\u6570\uff1a\u4e00\u4e2a\u51fd\u6570\u5b9a\u4e49\u5728\u53e6\u4e00\u4e2a\u51fd\u6570\u5185\u3002</li> <li>\u81ea\u7531\u53d8\u91cf\uff1a\u5d4c\u5957\u51fd\u6570\u5f15\u7528\u4e86\u5916\u90e8\u51fd\u6570\u7684\u53d8\u91cf\u3002</li> <li>\u5916\u90e8\u51fd\u6570\u7684\u8fd4\u56de\uff1a\u5916\u90e8\u51fd\u6570\u8fd4\u56de\u5d4c\u5957\u51fd\u6570\u7684\u5f15\u7528\u3002</li> </ul> <p>\u8fd9\u4e2a\u5728 SICP \u4e2d\u6700\u5e38\u89c1\u4e86\uff0c</p> <pre><code>def composite_identity(f, g):\n    \"\"\"\n    Return a function with one parameter x that returns True if f(g(x)) is\n    equal to g(f(x)). You can assume the result of g(x) is a valid input for f\n    and vice versa.\n\n    &gt;&gt;&gt; add_one = lambda x: x + 1        # adds one to x\n    &gt;&gt;&gt; square = lambda x: x**2          # squares x [returns x^2]\n    &gt;&gt;&gt; b1 = composite_identity(square, add_one)\n    &gt;&gt;&gt; b1(0)                            # (0 + 1) ** 2 == 0 ** 2 + 1\n    True\n    &gt;&gt;&gt; b1(4)                            # (4 + 1) ** 2 != 4 ** 2 + 1\n    False\n    \"\"\"\n    def is_equal(x):\n        if f(g(x)) == g(f(x)):\n            return True\n        else:\n            return False\n    return is_equal\n</code></pre>"},{"location":"codelang/python/8/#lambda","title":"lambda \u8868\u8fbe\u5f0f","text":"<pre><code>f = lambda x: x * x\n\ndef f(x):\n    return x * x\n</code></pre> <p>lambda \u8868\u8fbe\u5f0f\uff0c\u4e5f\u53eb\u533f\u540d\u51fd\u6570\u3002</p>"},{"location":"codelang/python/9/","title":"\u534f\u7a0b","text":"<pre><code>def consumer():\n    r = ''\n    while True:\n        n = yield r\n        print('[C] ',n)\n\ndef produce(c):\n    next(c) # \u542f\u52a8\u751f\u6210\u5668\u51fd\u6570 c\n\n    n = 0\n    while n &lt; 5:\n        n = n + 1\n        print('[P] ', n)\n        r = c.send(n)\n    c.close() # \u5173\u95ed\u751f\u6210\u5668\u51fd\u6570\n\nc = consumer()\nproduce(c)\n</code></pre> <p>\u751f\u6210\u5668\u51fd\u6570\uff1a</p> <ul> <li><code>consumer()</code> \u662f\u4e00\u4e2a\u751f\u6210\u5668\u51fd\u6570\uff0c\u5b83\u5305\u542b <code>yield</code> \u8bed\u53e5\u3002 \u5f53\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u65f6\uff0c\u5b83\u4e0d\u4f1a\u7acb\u5373\u6267\u884c\uff0c\u800c\u662f\u8fd4\u56de\u4e00\u4e2a\u751f\u6210\u5668\u5bf9\u8c61\u3002</li> </ul> <p><code>yield</code> \u5173\u952e\u8bcd\uff1a</p> <ul> <li><code>yield</code> \u7528\u4e8e\u6682\u505c\u51fd\u6570\u7684\u6267\u884c\uff0c\u5e76\u5c06\u4e00\u4e2a\u503c\u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u3002</li> <li>\u5f53\u751f\u6210\u5668\u88ab\u8c03\u7528\u65f6\uff0c\u6267\u884c\u4f1a\u6682\u505c\u5728 <code>yield</code> \u8bed\u53e5\uff0c\u76f4\u5230\u8c03\u7528\u8005\u4f7f\u7528 <code>next()</code> \u6216 <code>send()</code> \u65b9\u6cd5\u91cd\u65b0\u6062\u590d\u6267\u884c\u3002</li> <li>\u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c<code>yield r</code> \u4f1a\u8fd4\u56de <code>r</code> \u7684\u5f53\u524d\u503c\uff0c\u5e76\u7b49\u5f85\u5916\u90e8\u53d1\u9001\u7684\u503c\u3002</li> </ul> <p>\u63a5\u6536\u5916\u90e8\u503c\uff1a</p> <ul> <li> <p><code>n = yield r</code> \u5141\u8bb8\u5916\u90e8\u901a\u8fc7 <code>send()</code> \u65b9\u6cd5\u5411\u751f\u6210\u5668\u53d1\u9001\u503c\u3002 \u5982\u679c\u53d1\u9001\u7684\u503c\u4e3a None \u6216\u7a7a\uff0c\u751f\u6210\u5668\u4f1a\u9000\u51fa\u3002</p> </li> <li> <p><code>yield</code> \u5173\u952e\u8bcd\u5c06\u51fd\u6570\u8f6c\u6362\u4e3a\u751f\u6210\u5668\uff0c\u5141\u8bb8\u5176\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u6682\u505c\u5e76\u6062\u590d\u3002</p> </li> <li>\u751f\u6210\u5668\u53ef\u4ee5\u63a5\u6536\u5916\u90e8\u503c\u3002</li> </ul> <p>\u8fd9\u79cd\u65b9\u5f0f\u63a7\u5236\u4e86\u7a0b\u5e8f\u8fd0\u884c\u6d41\u7a0b\uff0c\u76f8\u5f53\u4e8e\u7528\u6237\u6001\u7684\u201c\u7ebf\u7a0b\u201d\u3002\u4ece\u5355\u6b65\u8c03\u8bd5\u8fc7\u7a0b\u4e2d\u6765\u770b\uff0c\u751f\u6210\u5668\u51fd\u6570\u50cf\u662f\u88ab\u6302\u8f7d\u5728 <code>send()</code> \u4e4b\u4e2d\uff0c\u96be\u602a <code>Donald Knuth</code> \u8bf4 \u201c\u5b50\u7a0b\u5e8f\u5c31\u662f\u534f\u7a0b\u7684\u4e00\u79cd\u7279\u4f8b\u3002\u201d</p>"},{"location":"codelang/sicp/","title":"\u8ba1\u7b97\u673a\u7a0b\u5e8f\u7684\u6784\u9020\u4e0e\u89e3\u91ca","text":""},{"location":"codelang/sicp/#_2","title":"\u73af\u5883","text":"<p>\u8fd9\u672c\u4e66\u91c7\u7528\u7684\u662f Lisp \u7684\u4e00\u79cd\u65b9\u8a00 Scheme\uff0c\u5b83\u7684\u6807\u51c6\u5b9e\u73b0\u662f MIT/GNU Scheme\uff0c\u540e\u6765\u8fd9\u4e2a\u5b9e\u73b0\u7684\u7ef4\u62a4\u8005\u8f6c\u5411\u4e86\u66f4\u597d\u7528\u7684\u7ade\u4e89\u5bf9\u624b DrScheme\u3002  </p> <p>DrScheme \u53d1\u5c55\u4e2d\u9010\u6e10\u4ece Scheme \u884d\u751f\u51fa\u65b0\u7684\u65b9\u8a00 Racket\uff0cDrScheme \u4e5f\u66f4\u540d\u4e3a DrRacket\u3002\u8fd9\u91cc\u7528\u7684\u73af\u5883\u662f DrRacket\u3002</p>"},{"location":"codelang/sicp/#_3","title":"\u7ec3\u4e60","text":"<ol> <li>\u6784\u9020\u8fc7\u7a0b\u62bd\u8c61<ul> <li>1.1 \u7a0b\u5e8f\u8bbe\u8ba1\u7684\u57fa\u672c\u5143\u7d20 E1.1 ~ E1.8</li> <li>1.2 \u8fc7\u7a0b\u4e0e\u5b83\u4eec\u6240\u4ea7\u751f\u7684\u8ba1\u7b97 E1.9 ~ E1.28</li> <li>1.3 \u7528\u9ad8\u9636\u51fd\u6570\u505a\u62bd\u8c61 E1.29 ~ E1.45</li> </ul> </li> <li>\u6784\u9020\u6570\u636e\u62bd\u8c61<ul> <li>2.1 \u6570\u636e\u62bd\u8c61\u5f15\u5bfc</li> <li>2.2 \u5c42\u6b21\u6027\u6570\u636e\u548c\u95ed\u5305\u6027\u8d28</li> <li>2.3 \u7b26\u53f7\u6570\u636e</li> <li>2.4 \u62bd\u8c61\u6570\u636e\u7684\u591a\u91cd\u8868\u793a</li> <li>2.5 \u5e26\u6709\u901a\u7528\u578b\u64cd\u4f5c\u7684\u7cfb\u7edf</li> </ul> </li> <li>\u6a21\u5757\u5316\u3001\u5bf9\u8c61\u548c\u72b6\u6001<ul> <li>3.1 \u8d4b\u503c\u548c\u5c40\u90e8\u72b6\u6001</li> <li>3.2 \u6c42\u503c\u7684\u73af\u5883\u6a21\u578b</li> <li>3.3 \u7528\u53d8\u52a8\u6570\u636e\u505a\u6a21\u62df</li> <li>3.4 \u5e76\u53d1\uff0c\u65f6\u95f4\u662f\u4e00\u4e2a\u672c\u8d28\u95ee\u9898</li> <li>3.5 \u6d41</li> </ul> </li> <li>\u5143\u8bed\u8a00\u62bd\u8c61<ul> <li>4.1 \u5143\u5faa\u73af\u6c42\u503c\u5668</li> <li>4.2 Scheme \u7684\u53d8\u5f62\uff0c\u60f0\u6027\u6c42\u503c</li> <li>4.3 Scheme \u7684\u53d8\u5f62\uff0c\u975e\u786e\u5b9a\u6027\u8ba1\u7b97</li> <li>4.4 \u903b\u8f91\u7a0b\u5e8f\u8bbe\u8ba1</li> </ul> </li> <li>\u5bc4\u5b58\u5668\u673a\u5668\u91cc\u7684\u8ba1\u7b97<ul> <li>5.1 \u5bc4\u5b58\u5668\u673a\u5668\u7684\u8bbe\u8ba1</li> <li>5.2 \u4e00\u4e2a\u5bc4\u5b58\u5668\u673a\u5668\u6a21\u62df\u5668</li> <li>5.3 \u5b58\u50a8\u5206\u914d\u548c\u5e9f\u6599\u6536\u96c6</li> <li>5.4 \u663e\u5f0f\u63a7\u5236\u7684\u6c42\u503c\u5668</li> <li>5.5 \u7f16\u8bd1</li> </ul> </li> </ol>"},{"location":"codelang/sicp/#_4","title":"\u89e3\u7b54","text":""},{"location":"codelang/sicp/1.1/","title":"1.1 \u7a0b\u5e8f\u8bbe\u8ba1\u7684\u57fa\u672c\u5143\u7d20","text":""},{"location":"codelang/sicp/1.1/#_1","title":"\u56de\u987e","text":"<ul> <li>\u57fa\u672c\u5355\u5143\uff1a\u6700\u7b80\u5355\u7684\u4e2a\u4f53\u3002</li> <li>\u7ec4\u5408\uff1a\u4ece\u7b80\u5355\u7684\u4e2a\u4f53\u51fa\u53d1\u6784\u9020\u51fa\u590d\u5408\u7684\u5bf9\u8c61\u3002</li> <li>\u62bd\u8c61\uff1a\u4e3a\u590d\u5408\u7684\u5bf9\u8c61\u547d\u540d\uff0c\u89c6\u4e3a\u57fa\u672c\u5355\u5143\u64cd\u4f5c\u3002</li> </ul>"},{"location":"codelang/sicp/1.1/#e11","title":"E1.1","text":"<pre><code>10 ; 10\n(+ 5 3 4) ; 12\n(- 9 1) ; 8\n(/ 6 2) ; 3\n(+ (* 2 4) (- 4 6)) ; 6\n(define a 3) ; a = 3\n(define b (+ a 1)) ; b = 4\n(+ a b (* a b)) ; 19\n(= a b) ; false\n\n(if (and (&gt; b a) (&lt; b (* a b)))\n    b\n    a)\n; 4\n\n(cond ((= a 4) 6)\n      ((= b 4) (+ 6 7 a))\n      (else 25))\n; 16\n\n(+ 2 (if (&gt; b a) b a))\n; 6\n\n(* (cond ((&gt; a b) a)\n         ((&lt; a b) b)\n         (else -1))\n   (+ a 1))\n; 16\n</code></pre>"},{"location":"codelang/sicp/1.1/#e12","title":"E1.2","text":"<p>\\(\\frac{5+4+(2-(3-(6+\\frac{4}{5})))}{3(6-2)(2-7)}\\)\uff0c\u6362\u6210\u524d\u7f00\u8868\u8fbe\u5f0f</p> <pre><code>(/ (+ 5 4\n      (- 2 \n         (- 3 \n            (+ 6 (/ 4 5))))) \n   (* 3 (- 6 2) (- 2 7)))\n; -37/150\n</code></pre>"},{"location":"codelang/sicp/1.1/#e13","title":"E1.3","text":"<p>\u4e24\u4e2a\u8f83\u5927\u6570\u4e4b\u548c -&gt; \u51cf\u53bb\u6700\u5c0f\u7684\u6570\uff0c  </p> <pre><code>(define (min-value a b c)\n    (cond ((and (&lt; a b) (&lt; a c)) a)\n          ((and (&lt; b a) (&lt; b c)) b)\n          ((and (&lt; c a) (&lt; c b)) c))\n)\n\n(define (two-bigger-sum a b c)\n    (+ a b c \n        (- 0 (min-value a b c))\n    )\n)\n</code></pre>"},{"location":"codelang/sicp/1.1/#e14","title":"E1.4","text":"<p><pre><code>(define (a-plus-abs-b a b)\n    ((if (&gt; b 0) + -) a b)\n)\n</code></pre> <code>if</code> \u8fd9\u91cc\u662f\u5c06\u8fc7\u7a0b\uff08+ -\uff09\u4f5c\u4e3a\u8fd4\u56de\u503c\uff0c\u5c06\u8fc7\u7a0b\u89c6\u4e3a\u57fa\u672c\u5143\u7d20\u6765\u64cd\u7eb5\uff0c\u662f\u9ad8\u9636\u8fc7\u7a0b\u7684\u7279\u5f81\u3002 </p>"},{"location":"codelang/sicp/1.1/#e15","title":"E1.5","text":"<pre><code>(define (p)\n    (p))\n\n(define (test x y)\n  (if (= x 0)\n      0\n      y))\n\n(test 0 (p))\n</code></pre> <p>p \u7684\u5b9a\u4e49\u662f\u65e0\u9650\u5faa\u73af\u3002\u5982\u679c\u662f\u5e94\u7528\u5e8f\uff0c\u5148\u5bf9\u53c2\u6570\u6c42\u503c\uff0c\u518d\u8fdb\u884c\u4e0b\u4e00\u8f6e\u4ee3\u6362\uff0c\u8fd9\u91cc\u4f1a\u5bf9 p \u6c42\u503c\uff0c\u4ece\u800c\u9677\u5165\u65e0\u9650\u5faa\u73af\uff1b\u5982\u679c\u662f\u6b63\u5219\u5e8f\uff0c\u53c2\u6570\u5148\u4e0d\u6c42\u503c\uff0c\u8fdb\u884c\u4e00\u4e00\u8f6e\u4ee3\u6362\uff0c\u4f1a\u5728 <code>if</code> \u8bed\u53e5\u4e2d\uff0c\u56e0 <code>x = 0</code>\uff0c\u8fd4\u56de <code>0</code> \u800c\u7ed3\u675f\u3002</p> <p>\u5e94\u7528\u5e8f\u7684\u7279\u70b9\u662f\uff0c\u8fd9\u6837\u4e00\u6765\u4e0d\u7528\u5bf9\u53c2\u6570\u91cd\u590d\u8ba1\u7b97\uff0cDrRacket \u89e3\u91ca\u5668\u91c7\u7528\u7684\u662f\u5e94\u7528\u5e8f\u3002</p>"},{"location":"codelang/sicp/1.1/#e16","title":"E1.6","text":"<pre><code>(define (new-if predicate then-clause else-clause)\n    (cond (predicate then-clause)\n          (else else-clause)))\n</code></pre> <p>\u518d\u6765\u56de\u987e\u4e00\u4e0b <code>if</code> \u8fd9\u4e2a\u7279\u6b8a\u8fc7\u7a0b\u6c42\u503c\u89c4\u5219\u7684\u5b9a\u4e49\uff0c\u5176\u4e2d\u7684\u8c13\u8bcd\u90e8\u5206\u5148\u884c\u6c42\u503c\uff0c\u6839\u636e\u5176\u7ed3\u679c\u786e\u5b9a\u968f\u540e\u6c42\u503c\u7684\u5b50\u8868\u8fbe\u5f0f\u90e8\u5206\u3002\u4e00\u4e2a\u5b50\u8868\u8fbe\u5f0f\u4f1a\u88ab\u6c42\u503c\uff0c\u53e6\u4e00\u4e2a\u5219\u4e0d\u4f1a\u3002\u5982\u679c\u901a\u8fc7 <code>cond</code> \u5b9a\u4e49\u4e3a\u4e00\u4e2a\u5e38\u89c4\u8fc7\u7a0b\uff0c\u4e24\u4e2a\u5b50\u8868\u8fbe\u5f0f\u90fd\u4f1a\u88ab\u6c42\u503c\uff0c\u65e0\u8bba\u8c13\u8bcd\u90e8\u5206\u7684\u7ed3\u679c\u662f\u771f\u662f\u5047\u3002</p> <pre><code>(if #t (display \" true \") (display \" false \"))     ; true\n(new-if #t (display \" true \") (display \" false \")) ; true false\n</code></pre> <p>\u56de\u5230\u6c42\u5e73\u65b9\u6839\u7684\u7a0b\u5e8f\uff1a <pre><code>(define (sqrt x)\n  (define (square x)\n    (* x x))\n  (define (average a b)\n    (/ (+ a b) 2))\n  (define (good-enough? guess)\n    (&lt; (abs (- (square guess) x)) 0.001))\n  (define (improve guess)\n    (average guess (/ x guess)))\n  (define (sqrt-iter guess)\n    (if (good-enough? guess)              ; if -&gt; new-if\n        guess\n        (sqrt-iter (improve guess))))\n  (sqrt-iter 1.0))\n</code></pre> \u5982\u679c\u66ff\u6362\u6210 <code>new-if</code> \u7684\u8bdd\uff0c\u5373\u4f7f <code>guess</code> <code>good-enough</code> \u4e86\uff0c<code>sqrt-iter</code> \u4ecd\u4f1a\u7ee7\u7eed\uff0c\u65e0\u9650\u9012\u5f52\u5230\u5185\u5b58\u8017\u5c3d\u800c\u62a5\u9519\u3002</p>"},{"location":"codelang/sicp/1.1/#e17","title":"E1.7","text":"<p>\u5bf9\u4e8e\u8db3\u591f\u5c0f\u7684\u6570\u7684\u5e73\u65b9\u6839\u800c\u8a00\uff0c<code>good-enough?</code> \u7684\u7cbe\u5ea6\u662f\u4e0d\u591f\u7684\uff0c\u5148\u627e\u5230\u8fd9\u6837\u8db3\u591f\u5c0f\u7684\u6570\u770b\u4e0b\u7ed3\u679c\uff0c <pre><code>&gt; (sqrt 0.01)\n0.10032578510960605\n&gt; (sqrt 0.00001)\n0.03135649010771716\n</code></pre></p> <p>\u6309\u7167\u7ed9\u51fa\u7684\u5efa\u8bae\uff0c<code>good-enough</code> \u6539\u4e3a\u731c\u6d4b\u503c\u7684\u53d8\u5316\u91cf\u76f8\u6bd4\u731c\u6d4b\u503c\u7684\u6bd4\u7387\u8db3\u591f\u5c0f\uff0c</p> <pre><code>(define (good-enough? guess)\n  (&lt; (/ (abs (- (improve guess) guess)) guess) 0.001))\n; &gt; (sqrt 0.01)\n; 0.10000052895642693\n; &gt; (sqrt 0.00001)\n; 0.0031622926477232706\n</code></pre> <p>\u7cbe\u5ea6\u786e\u5b9e\u63d0\u5347\u4e86\u4e0d\u5c11\u3002</p>"},{"location":"codelang/sicp/1.1/#e18","title":"E1.8","text":"<p>\u6c42\u7acb\u65b9\u6839\u7684\u725b\u987f\u6cd5\uff0c\u731c\u6d4b\u503c\u7684 <code>improve</code> \u8fc7\u7a0b\u4e3a \\(\\frac{\\frac{x}{y^{2}} + 2y}{3}\\)\uff0c</p> <pre><code>(define (cbrt x)\n  (define (cube x)\n    (* x x x))\n  (define (improve guess x)\n    (/ (+ (/ x (* guess guess)) (* 2 guess)) 3))\n  (define (good-enough? guess x)\n    (&lt; (abs (- (cube guess) x)) 0.001))\n  (define (cbrt-iter guess x)\n    (if (good-enough? guess x)\n        guess\n        (cbrt-iter (improve guess x) x)))\n  (cbrt-iter 1 x))\n\n(display (exact-&gt;inexact (cbrt (* 4 4 4)))) \uff1b4.000017449510739\n(display (exact-&gt;inexact (cbrt (* 5 5 5)))) \uff1b5.000000000287929\n</code></pre> <p>\u8fd9\u4e2a\u6548\u7387\u4e0d\u592a\u884c\uff0c\u6bcf\u52a0\u4e00\u4e2a\u5355\u4f4d\u503c\uff0c\u8ba1\u7b97\u65f6\u95f4\u5448\u6307\u6570\u4e0a\u5347\u3002</p>"},{"location":"codelang/sicp/1.2/","title":"\u8fc7\u7a0b\u4e0e\u5b83\u4eec\u6240\u4ea7\u751f\u7684\u8ba1\u7b97","text":""},{"location":"codelang/sicp/1.2/#_2","title":"\u793a\u4f8b","text":"<pre><code>; \u7ebf\u6027\u9012\u5f52\u8fc7\u7a0b\n(define (factorial n)\n  (if (= n 1)\n    1\n    (* n factorial (- n 1))))\n</code></pre> <pre><code>; \u8fed\u4ee3\u8ba1\u7b97\u8fc7\u7a0b\uff0c\n(define (fact-iter product counter max-count)\n  (if (&gt; counter max-count)\n      product\n      (fact-iter (* counter product)\n                 (+ counter 1)\n                 max-count)))\n\n(define (factorial n)\n  (fact-iter 1 1 n))\n</code></pre> <pre><code>(define (fib n)\n  (if (&lt; n 2)\n     n\n     (+ (fib (- n 1)) (fib (- n 2)))))\n</code></pre> <p>\u8fd9\u4e00\u8282\uff0c\u5b83\u63a8\u6f14\u4e86\u7ebf\u6027\u9012\u5f52\u8fc7\u7a0b\uff08\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u6ca1\u6709\u4efb\u4f55\u7684\u589e\u957f\u548c\u6536\u7f29\uff0c\u8ba1\u7b97\u7684\u4e2d\u95f4\u7ed3\u679c\u4f1a\u4fdd\u5b58\u5728\u8f68\u8ff9\u91cc\uff09\uff0c\u5c06\u8fd9\u79cd\u7ebf\u6027\u9012\u5f52\u79f0\u4e3a\u8fed\u4ee3\u8ba1\u7b97\u8fc7\u7a0b\uff08\u7ebf\u6027\u8fed\u4ee3\u8fc7\u7a0b\uff09\u3002</p> <p>\u4ee4\u6211\u611f\u5230\u5370\u8c61\u6df1\u523b\u7684\u662f\uff0c\u5b83\u8bf4\uff0c\u5728\u5e38\u91cf\u7a7a\u95f4\u4e2d\u6267\u884c\u8fed\u4ee3\u578b\u8ba1\u7b97\u8fc7\u7a0b\uff0c\u5373\u4f7f\u5b83\u662f\u9012\u5f52\u8fc7\u7a0b\u63cf\u8ff0\u7684\uff0c\u5177\u5907\u8fd9\u79cd\u7279\u6027\u7684\u9012\u5f52\u79f0\u4e3a\u5c3e\u9012\u5f52\u3002\u800c\u5229\u7528\u8fd9\u79cd\u5e38\u89c4\u7684\u8fc7\u7a0b\u8c03\u7528\u673a\u5236\u8868\u8fbe\u8fed\u4ee3\uff0c\u90a3\u4e9b\u5404\u79cd\u590d\u6742\u7684\u4e13\u7528\u8fed\u4ee3\u7ed3\u6784\u4e0d\u8fc7\u662f\u4e00\u4e9b\u8bed\u6cd5\u7cd6\u8863\u7f62\u4e86\u3002</p>"},{"location":"codelang/sicp/1.2/#_3","title":"\u7ec3\u4e60","text":""},{"location":"codelang/sicp/1.2/#19","title":"1.9","text":"<p><pre><code>(if (= a 0)\n    b\n    (inc (+ (dec a) b)))\n\n\n(if (= a 0)\n    b\n    (+ (dec a) (inc b)))\n</code></pre> \u4ece\u8bed\u6cd5\u5f62\u5f0f\u4e0a\u6765\u8bf4\uff0c\u8fd9\u4e24\u4e2a\u8fc7\u7a0b\u90fd\u662f\u9012\u5f52\u7684\u3002\u4ece\u8ba1\u7b97\u8fc7\u7a0b\u4e0a\u6765\u8bf4\uff0c\u524d\u8005\u662f\u9012\u5f52\u7684\uff0c\u540e\u8005\u662f\u8fed\u4ee3\u7684\u3002</p>"},{"location":"codelang/sicp/1.2/#110","title":"1.10","text":"<pre><code>(define (A x y)\n  (cond ((= y 0) 0)\n        ((= x 0) (* 2 y))\n        ((= y 1) 2)\n        (else (A (- x 1)\n                 (A x (- y 1))))))\n\n(define (f n) (A 0 n)) ; 2 \u7684 n \u7684 0 \u6b21\u65b9\n(define (g n) (A 1 n)) ; 2 \u7684 n \u7684 1 \u6b21\u65b9\n(define (h n) (A 2 n)) ; 2 \u7684 n \u7684 2 \u6b21\u65b9\n</code></pre>"},{"location":"codelang/sicp/1.3/","title":"1.3 \u7528\u9ad8\u9636\u51fd\u6570\u505a\u62bd\u8c61","text":""},{"location":"codelang/sicp/1.3/#e129","title":"E1.29","text":"<p>\u5148\u6765\u770b\u4e0b\u4f8b\u5b50\u7ed9\u7684\u79ef\u5206\u8ba1\u7b97\u65b9\u6cd5\uff0c\u6c42\u548c\u516c\u5f0f\u7684\u6a21\u677f <code>sum</code></p> \\[\\sum_{n=a}^{b}f(n)=f(a)+\\cdots+f(b)\\] <pre><code>(define (sum term a next b)\n  (if (&gt; a b)\n      0\n      (+ (term a)\n         (sum term (next a) next b))))\n</code></pre> <p>\u51fd\u6570 \\(f\\) \u5728\u533a\u95f4 \\(a\\) \u5230 \\(b\\) \u4e4b\u95f4\u7684\u79ef\u5206\u8ba1\u7b97\u4e3a</p> \\[\\int_{a}^{b}f=\\left [ f(a+\\frac{dx}{2})+f(a+dx+\\frac{dx}{2})+f(a+2dx+\\frac{dx}{2})+\\cdots \\right ] dx\\] <pre><code>(define (cube x)\n  (* x x x))\n\n(define (integral f a b dx)\n  (define (add-dx x) (+ x dx))\n  (* (sum f (+ a (/ dx 2.0)) add-dx b) dx))\n\n(integral cube 0 1 0.00001)\n; 0.24999999998662864\n</code></pre> <p>\u9a8c\u8bc1\u4e5f\u5f88\u5bb9\u6613\uff0c\u5c06\u5b9a\u79ef\u5206 \\(\\int_{0}^{1} x^{3} \\, dx\\) \u8f6c\u6362\u6210\u4e0d\u5b9a\u79ef\u5206 \\(\\int x^{3} \\, dx = \\frac{ x^{4} }{4} + C\\)\uff0c\u8ba1\u7b97\u8fb9\u754c\u503c \\(\\int_0^1 x^3 \\, dx = \\left[ \\frac{x^4}{4} \\right]_0^1\\)\uff0c\u4e0a\u4e0b\u9650\u76f8\u51cf\u5f97\u5230 \\(\\frac{1}{4}\\)\uff0c\u80fd\u770b\u5230\u7a0b\u5e8f\u8fd0\u884c\u7ed3\u679c\u4e0e\u7b54\u6848\u5341\u5206\u63a5\u8fd1\u3002</p> <p>\u63a5\u7740\u6362\u6210\u8f9b\u666e\u68ee\u89c4\u5219\u6c42\u89e3\u79ef\u5206\uff0c\u5176\u4e2d \\(h = \\frac{b - a}{n}\\)\uff0c\\(n\\) \u662f\u67d0\u4e2a\u5076\u6570\uff0c\u800c \\(y_k = f(a+kh)\\)</p> \\[\\frac{h}{3} \\left [ y_0 + 4y_1 + 2y_2 + 4y_3 + 2y_4 + \\cdots +2y_{n-2} + 4y_{n-1} + y_n \\right ]\\]"},{"location":"codelang/sicp/1.3/#e130","title":"E1.30","text":"<p>\u56de\u5230 1.2 \u7ae0\u8282\u518d\u6765\u533a\u5206\u4e00\u4e0b\u7ebf\u6027\u9012\u5f52\u548c\u8fed\u4ee3\u7684\u6982\u5ff5\uff0c</p> <p>\u8fc7\u7a0b <code>sum</code> \u4f1a\u4ea7\u751f\u4e00\u4e2a\u7ebf\u6027\u9012\u5f52\uff0c\u600e\u4e48\u5c06\u5176\u6539\u4e3a\u8fed\u4ee3\u9012\u5f52\uff0c</p> <pre><code>\n</code></pre>"},{"location":"codelang/sicp/1.3/#e131","title":"E1.31","text":""},{"location":"codelang/sicp/1.3/#e132","title":"E1.32","text":""},{"location":"codelang/sicp/1.3/#e133","title":"E1.33","text":""},{"location":"codelang/sicp/1.3/#e134","title":"E1.34","text":""},{"location":"codelang/sicp/1.3/#e135","title":"E1.35","text":""},{"location":"codelang/sicp/1.3/#e136","title":"E1.36","text":""},{"location":"codelang/sicp/1.3/#e137","title":"E1.37","text":""},{"location":"codelang/sicp/1.3/#e138","title":"E1.38","text":""},{"location":"codelang/sicp/1.3/#e139","title":"E1.39","text":""},{"location":"codelang/sicp/1.3/#e140","title":"E1.40","text":""},{"location":"codelang/sicp/1.3/#e141","title":"E1.41","text":""},{"location":"codelang/sicp/1.3/#e142","title":"E1.42","text":""},{"location":"codelang/sicp/1.3/#e143","title":"E1.43","text":""},{"location":"codelang/sicp/1.3/#e144","title":"E1.44","text":""},{"location":"codelang/sicp/1.3/#e145","title":"E1.45","text":""},{"location":"software/","title":"\u8f6f\u4ef6\u4f7f\u7528","text":"<ul> <li> <p>\u547d\u4ee4\u884c\uff1assh fish <code>tmux</code> rsync vim git man | <code>for more...</code></p> </li> <li> <p>\u811a\u672c\uff1amarkdown makefile</p> </li> <li> <p>\u8f6f\u4ef6: veracrypt</p> </li> <li> <p>\u7f51\u7ad9: website</p> </li> </ul>"},{"location":"software/git/","title":"git","text":""},{"location":"software/git/#_1","title":"\u5176\u4ed6","text":"<ul> <li><code>git restore --staged &lt;file&gt;</code> \u4e0d\u8be5\u52a0\u7684 add \u4e86\uff0c\u64a4\u9500\u64a4\u9500</li> <li><code>git blame</code> fuck\uff0c\u8fd9\u8be5\u6b7b\u7684\u4ee3\u7801\u662f\u8c01\u5199\u7684</li> <li><code>git show</code> \u7b49\u7b49\uff0c\u8fd9\u4e2a\u4eba\u63d0\u4ea4\u4e86\u54ea\u4e9b\u4e1c\u897f</li> <li><code>git add -p file</code> \u4ee3\u7801\u6709\u98ce\u9669\uff0c\u6dfb\u52a0\u9700\u8c28\u614e\uff0c\u4e00\u4e2a\u7247\u6bb5\u4e00\u4e2a\u7247\u6bb5\u6765</li> </ul>"},{"location":"software/git/#git-tag","title":"git tag","text":"<ul> <li><code>git tag &lt;version&gt;</code> \u8fd9\u6b21\u63d0\u4ea4\u540e\uff0c\u6574\u4f53\u50cf\u4e2a\u6837\u5b50\u4e86\uff0c\u6253\u4e2a tag \u5427\uff0c\u6307\u4e0d\u5b9a\u7528\u6765\u53d1\u5e03</li> <li><code>git push origin &lt;version&gt;</code> \u5582\uff0c\u8fdc\u7a0b\u7684\u4e2d\u5fc3\u4ed3\u5e93\uff0c\u63a5\u53d7\u4e00\u4e0b\u4ffa\u7684 tag</li> <li><code>git tag -d &lt;version&gt;</code> \u4e0d\u884c\uff0c\u8fd9\u4e2a tag \u4e0d\u884c\uff0c\u5220\u6389\u5427</li> <li><code>git push origin :refs/tags/&lt;version&gt;</code> \u5582\uff0c\u8fdc\u7a0b\uff0c\u540c\u6b65\u4e00\u4e0b\uff0c\u521a\u521a\u90a3\u4e2a tag \u88ab\u4ffa\u5220\u4e86</li> </ul>"},{"location":"software/git/#git-rebase","title":"git rebase","text":"<ul> <li><code>git rebase -i HEAD~2</code> \u63d0\u4ea4\u5386\u53f2\u592a\u4e71\u4e86\uff0c\u5f97\u6574\u7406\u4e0b<ul> <li>\u8fd9\u4e2a commit \u4e0d\u7528\u6539\uff0c pick\uff1b\u90a3\u51e0\u4e2a\u5408\u5e76\u4e0b\uff0c</li> <li>\u597d\u4e86\u597d\u4e86\uff0c\u4fdd\u5b58 :wq</li> <li>\u8fd9\u5565\uff0c\u54e6\uff0c\u8fd9\u6b21\u4fee\u8ba2\u7684 commit \u4fe1\u606f\uff0crefractor\uff0c:wq </li> <li>\u5582\uff0c \u8fdc\u7a0b\u4e2d\u5fc3\uff0c\u4fee\u6539\u5c81\u6708\u53f2\u4e66\u4e86 <code>git push origin branch-name --force</code> </li> </ul> </li> <li>\u4e0a\u9762\u771f\u9ebb\u70e6\uff0c\u80fd\u4e0d\u80fd\u7c97\u66b4\u4e00\u70b9<ul> <li>\u4ffa\u6765\u521b\u5efa\u4e00\u4e2a\u5b64\u513f\u5206\u652f <code>git checkout --orphan new-branch</code></li> <li>\u6587\u4ef6\u52a0\u8fdb\u6765\uff0c\u90fd\u52a0\u8fdb\u6765 <code>git add -A</code></li> <li>\u63d0\u4ea4\u63d0\u4ea4 <code>git commit -m \" \"</code></li> <li>\u4f60\u4e0d\u662f\u6b63\u7edf\uff0c\u4ffa\u624d\u662f\u6b63\u7edf <code>git branch -D master</code></li> <li>\u563f\u563f\uff0c\u4ffa\u5c31\u662f\u6b63\u7edf\u4e86 <code>git branch -m master</code></li> <li>\u5582\uff0c\u8fdc\u7a0b\u4e2d\u5fc3\uff0c\u4fee\u6539\u5c81\u6708\u53f2\u4e66\u4e86 <code>git push origin master --force</code></li> </ul> </li> </ul>"},{"location":"software/git/#git-init","title":"git init","text":"<pre><code>#!/bin/bash\nrepo_name=$1\ngit init --bare  ${repo_name}.git  # \u88f8\u4ed3\u5e93\nchown -R git:git ${repo_name}.git\n</code></pre>"},{"location":"software/latex/","title":"Latex","text":""},{"location":"software/latex/#latex","title":"Latex","text":"<p>\u5b9e\u9645\u4f7f\u7528\u4e0d\u9700\u8981\u53bb\u80cc\u7b26\u53f7\uff0c\u63a8\u8350\u4e00\u4e2a\u5728\u7ebf Letex \u516c\u5f0f\u7f16\u8f91\u7f51\u7ad9\uff0c\u5148\u7528\u8d77\u6765\uff0c\u6b21\u6570\u591a\u4e86\uff0c\u89c2\u5bdf\u7684\u8db3\u591f\u4e86\uff0c\u5e76\u4e14\u4e0b\u610f\u8bc6\u80fd\u6253\u51fa\u6765\u65f6\u81ea\u7136\u5c31\u4f1a\u4e86\u3002</p> <p>\u672c\u7ad9\u7528 mkdocs \u7684 material \u4e3b\u9898\uff0c\u4f7f\u7528 Latex \u6309\u7167\u5b98\u65b9\u7ed9\u51fa\u7684\u914d\u7f6e\u9009\u9879\u3002</p> <p>\u7f8e\u4e2d\u4e0d\u8db3\u7684\u4e00\u70b9\uff0clatex \u516c\u5f0f\u6e32\u67d3\u65f6\u4f1a\u8f83\u5c0f\uff0c\u5f53\u7136\u53ef\u4ee5\u5728\u6bcf\u4e2a\u516c\u5f0f\u524d\u624b\u52a8\u6dfb\u52a0 <code>\\huge</code>\uff0c\u4f46\u592a\u8fc7\u9ebb\u70e6\uff0c\u5728\u7ed9\u51fa\u7684 js \u4e2d\u6dfb\u52a0\u6269\u5927\u6bd4\u4f8b\uff0c</p> <pre><code>window.MathJax = {\n  tex: {\n    inlineMath: [[\"\\\\(\", \"\\\\)\"]],\n    displayMath: [[\"\\\\[\", \"\\\\]\"]],\n    processEscapes: true,\n    processEnvironments: true\n  },\n  options: {\n    ignoreHtmlClass: \".*|\",\n    processHtmlClass: \"arithmatex\"\n  },\n  chtml: {\n    scale: 2.0 // \u8bbe\u7f6e\u7f29\u653e\u6bd4\u4f8b\n  }\n};\n\ndocument$.subscribe(() =&gt; { \n  MathJax.startup.output.clearCache()\n  MathJax.typesetClear()\n  MathJax.texReset()\n  MathJax.typesetPromise()\n})\n</code></pre>"},{"location":"software/makefile/","title":"makefile","text":"<p>make \u89c4\u5219\u4e2d\u7684\u6bcf\u884c\u547d\u4ee4\u662f\u5728\u4e00\u4e2a\u5355\u72ec\u7684 shell \u4e2d\u6267\u884c\u7684\uff0c \u8fd9\u548c shellscript \u4e0d\u540c\uff0c\u505a\u4e00\u4e2a\u7b80\u5355\u6d4b\u8bd5\uff1a</p> <pre><code>source:\n        pwd\n        cd /tmp\n        pwd\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230 cd \u540e\uff0c\u5f53\u524d\u7684\u76ee\u5f55\u5e76\u6ca1\u6709\u6539\u53d8\u3002</p>"},{"location":"software/makefile/#_1","title":"\u683c\u5f0f","text":"<pre><code>&lt;target&gt;: [prerequisites]\n&lt;tab&gt; [commands]\n</code></pre> <p>\u603b\u4e4b\uff0cmake \u7684\u89c4\u5219\u5c31\u662f \u76ee\u6807 target \u7531 \u524d\u7f6e\u6761\u4ef6 prerequisites \u7ec4\u6210\uff0c\u66f4\u65b0 target \u7684\u6b65\u9aa4\u662f commands\u3002</p> <p>makefile \u53ea\u5bf9\u53d8\u52a8\u7684\u6587\u4ef6\u91cd\u65b0\u6784\u5efa\uff0c\u867d\u7136 shellscript \u4e5f\u80fd\u505a\u5230\u8fd9\u4e00\u70b9\uff08\u5982 nginx\uff09\uff0c\u4f46\u6bd4\u8f83\u9ebb\u70e6\u3002</p> <p>\u6709\u4e9b\u89c4\u5219\u4e0d\u9700\u8981\u53bb\u68c0\u6d4b\u6587\u4ef6\u662f\u5426\u53d8\u52a8\uff08\u5bf9\u6bd4\u6587\u4ef6\u65f6\u95f4\u6233\uff09\uff0c\u53ef\u4ee5\u7528\u4f2a\u76ee\u6807 phony target\uff0c\u5982 <code>.PHONY: clean</code>\u3002</p> <p>makefile \u4f1a\u6309\u7167\u76ee\u6807\u4f9d\u8d56\u987a\u5e8f\u6267\u884c\u89c4\u5219\uff0c\u5982\u679c\u6ca1\u6709\u6307\u5b9a\uff0c\u90a3\u5c31\u662f\u4ece\u7b2c\u4e00\u4e2a\u547d\u4ee4\u5f00\u59cb\u3002</p>"},{"location":"software/makefile/#_2","title":"\u8bed\u6cd5","text":"<ul> <li><code>#</code> \u6ce8\u91ca</li> <li><code>@</code> \u5173\u95ed\u6267\u884c\u6b65\u9aa4\u63d0\u793a \uff08\u4f4d\u4e8e commands \u524d\u9762\uff09</li> <li><code>wildcard</code> \u8ddf bash \u4e00\u81f4\u7684\u901a\u914d\u7b26</li> <li><code>$(variable)</code> \u7c7b bash \u53d8\u91cf\uff0c= \u4e24\u8fb9\u53ef\u4ee5\u7a7a\u683c\uff0c\u7528() \u800c\u4e0d\u662f {}</li> <li><code>$$shell_varuable</code> \u8fd9\u70b9\u786e\u5b9e\u4e0d\u77e5\u9053\uff0cmakefile \u4f1a\u5bf9 $ \u8f6c\u4e49\uff0c\u6240\u4ee5\u9700\u8981\u91cd\u590d\u3002</li> </ul> <p>makefile \u652f\u6301\u53d8\u91cf\uff0c\u5173\u4e8e\u8d4b\u503c\u8bed\u53e5\uff0c\u6709\u4e0b\u9762\u7684\u533a\u5206</p> <pre><code>VARIABLE ?= value # \u53ea\u6709\u5728\u8be5\u53d8\u91cf\u4e3a\u7a7a\u65f6\u624d\u8bbe\u7f6e\u503c\u3002\n\nVARIABLE += value # \u5c06\u503c\u8ffd\u52a0\u5230\u53d8\u91cf\u7684\u5c3e\u7aef\u3002\n\nVARIABLE = value  # \u5728\u8fd0\u884c\u65f6\u6269\u5c55\uff0c\u5141\u8bb8\u9012\u5f52\u6269\u5c55\uff0c\u9002\u5408\u53d8\u91cf\u3002\n\nVARIABLE := value # \u5728\u5b9a\u4e49\u65f6\u6269\u5c55\uff0c\u9002\u5408\u5e38\u91cf\u3002\n</code></pre> <ul> <li><code>$(CC)</code> \u5f53\u524d\u7f16\u8bd1\u5668</li> <li><code>$(MAKE)</code> \u5f53\u524d make \u547d\u4ee4</li> <li><code>$@</code> \u5f53\u524d\u6307\u5b9a\u7684 target </li> <li><code>$&lt;</code> target \u7684\u7b2c\u4e00\u4e2a\u524d\u7f6e\u6761\u4ef6</li> <li><code>$?</code> \u6bd4 target \u65f6\u95f4\u6233\u65b0\u7684 \u6240\u6709\u524d\u7f6e\u6761\u4ef6</li> <li><code>$^</code> \u6240\u6709\u524d\u7f6e\u6761\u4ef6</li> <li><code>$*</code> \u5339\u914d\u7b26 % \u6307\u4ee3\u7684\u90e8\u5206</li> <li><code>$(@D)</code> $@ \u7684\u76ee\u5f55\u540d</li> <li><code>$(@F)</code> $@ \u7684\u6587\u4ef6\u540d</li> <li><code>$(&lt;D)</code> $&lt; \u7684\u76ee\u5f55\u540d</li> <li><code>$(&lt;F)</code> $&lt; \u7684\u6587\u4ef6\u540d</li> </ul> <p>\u903b\u8f91\u5206\u652f\u3001\u5faa\u73af\u548c\u51fd\u6570\u5c31\u4e0d\u5c55\u5f00\u4e86\uff0c\u81f3\u4eca\u5f88\u5c11\u9047\u89c1\u8fc7\u4f7f\u7528\u7684\u4f8b\u5b50\uff0c\u9891\u7387\u592a\u4f4e\u3002\uff08\u5927\u578b\u9879\u76ee\u4e00\u822c\u4e0a cmake\uff09</p>"},{"location":"software/makefile/#_3","title":"\u53c2\u8003","text":"<ul> <li>https://www.ruanyifeng.com/blog/2015/02/make.html</li> <li>https://www.cnblogs.com/tp-16b/p/8955462.html</li> </ul>"},{"location":"software/man/","title":"man","text":"<p>man \u547d\u4ee4\uff0c\u76f8\u5f53\u6709\u7528\u3002</p> <p>\u6253\u4e2a\u6bd4\u65b9\uff0c\u5728\u7f51\u7edc\u7f16\u7a0b\u65f6\uff0c\u5fd8\u8bb0\u4e86\u5e38\u7528\u7684 socketaddr \u7ed3\u6784\u5c5e\u4e8e\u54ea\u4e2a\u5934\u6587\u4ef6\uff0c\u8fd9\u65f6\u5019 <code>man socketaddr</code> \u5c31\u4f1a\u51fa\u73b0\u9700\u8981\u7684\u4fe1\u606f\u3002</p> <p><code>man man</code> \u53ef\u4ee5\u67e5\u8be2\u81ea\u8eab\u600e\u4e48\u4f7f\u7528</p> <pre><code>1   Executable programs or shell commands\n2   System calls (functions provided by the kernel)\n3   Library calls (functions within program libraries)\n</code></pre> <p>\u6bd4\u5982 </p> <ul> <li><code>man 3</code> \u8c03\u51fa\u7684\u624b\u518c\u5c31\u662f Library Functions Manual</li> <li><code>man 2</code> \u8c03\u51fa\u7684\u624b\u518c\u5c31\u662f System Calls Manual</li> <li><code>man -k</code> \u6309\u7167\u6b63\u5219\u641c\u7d22\u5173\u952e\u5b57\u6761\u76ee</li> <li><code>man -f</code> \u7ed9\u51fa\u5173\u952e\u5b57\u7684\u7b80\u8981\u63cf\u8ff0\u4fe1\u606f</li> </ul> <p>\u8fd8\u6709\u4e00\u4e9b\u901a\u8fc7 man \u5feb\u901f\u67e5\u5230\u7684</p> <ul> <li><code>man ascii</code> ASCII \u5b57\u7b26\u8868</li> <li><code>man hier</code> linux filesystem hierarchy</li> </ul> <p>\u6b64\u5916\uff0c\u9664\u4e86 man\uff0c\u8fd8\u6709 apropos \u548c info \u7528\u6765\u67e5\u8be2\u624b\u518c\u4fe1\u606f\u3002</p>"},{"location":"software/markdown/","title":"markdown","text":"<p>\u53ef\u4ee5\u53c2\u8003 \u6559\u7a0b</p> <p>Markdown \u4e0d\u5e38\u7528\u64cd\u4f5c</p> <ul> <li>\u811a\u6ce8\uff1a<code>[^1]</code> <code>[^1]: footer</code></li> <li>\u6807\u9898\u8df3\u8f6c\uff1a<code>[jump to](#Markdown)</code></li> <li>\u6587\u5b57\u60ac\u505c\u6ce8\u91ca\uff1a<code>[Genius](\"Genius only means hard-working all one's life.\")</code></li> <li>\u56f4\u680f diff\uff1a<code>```diff  +add content -sub content ```</code></li> <li>\u5185\u5bb9\u76ee\u5f55\uff1a<code>[TOC]</code></li> </ul> <p>HTML \u6280\u5de7</p> <ul> <li>\u6362\u884c\uff1a<code>&lt;br&gt;&lt;/br&gt;</code> \u6216\u7ed3\u5c3e\u4e24\u4e2a\u4ee5\u4e0a\u7a7a\u683c\u518d\u56de\u8f66</li> <li>\u591a\u884c\u6ce8\u91ca\uff1a<code>&lt;!-- --&gt;</code></li> <li>\u7a7a\u683c\uff1a<code>&amp;nbsp;</code></li> <li>\u4e0a\u6807\uff1a<code>y = x&lt;sup&gt;2&lt;/sup&gt;</code></li> <li>\u4e0b\u6807\uff1a<code>H&lt;sub&gt;2&lt;/sub&gt;O</code></li> <li>\u4e0b\u62c9\u83dc\u5355\uff1a<code>&lt;details&gt; &lt;summary&gt;title&lt;/summary&gt; content &lt;/details&gt;</code></li> <li>\u6846\uff1a<code>&lt;table&gt; &lt;tr&gt; &lt;td&gt;Boxed text&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;</code></li> <li>\u4e0b\u5212\u7ebf\uff1a<code>&lt;ins&gt; Underlined text &lt;/ins&gt;</code></li> <li>\u6587\u5b57\u989c\u8272\uff1a <code>&lt;font color=green&gt; green text &lt;/font&gt;</code></li> <li>\u6587\u5b57\u5927\u5c0f\uff1a<code>&lt;font size=3&gt; size &lt;/font&gt;</code></li> </ul> <p>\u5bfc\u5165\u97f3\u89c6\u9891</p> <ul> <li>\u97f3\u9891\uff1a\u7f51\u6613\u4e91\u751f\u6210\u5916\u94fe\uff08\u53d7\u7248\u6743\u4fdd\u62a4\u6b4c\u66f2\u4e0d\u884c\uff09</li> <li>\u89c6\u9891\uff1a<ul> <li>youtube \u751f\u6210\u5916\u94fe</li> <li>bilibili \u9ed8\u8ba4\u5916\u94fe\u592a\u7b80\u964b\u4e86\uff0c\u9700\u8981\u6dfb\u52a0 <code>&amp;poster=1&amp;autoplay=0</code>\uff0c\u4e14\u9700\u8981\u5728 iframe \u91cc\u6dfb\u52a0 <code>width=668 height=376</code> \u53c2\u6570\u8c03\u6574\u6210\u5408\u9002\u5927\u5c0f</li> </ul> </li> </ul>"},{"location":"software/msys2/","title":"MSYS2","text":"<p>\u4e3a\u4e86\u80fd\u5728 windows \u5e73\u53f0\u4e0b\u4f7f\u7528 GNU \u7684\u5957\u4ef6\uff0c\u5c06 Unix \u4ee3\u7801\u5f15\u5165 Windows \u8ba1\u7b97\u673a\uff0c\u6765\u770b\u4e00\u4e0b\u73b0\u6709\u7684\u65b9\u6848\uff0c</p> <p>Cygwin \u7528 DLL \u7684\u5f62\u5f0f\u5b9e\u73b0\u4e86 POSIX \u517c\u5bb9\u73af\u5883</p> <p>MinGW Minimalist GNU for Windows\uff0cwindows \u7684\u6781\u7b80GNU</p> <p>MSYS2 minimal system 2\uff0c\u5728 Cygwin\u548cMinGW\u7684\u57fa\u7840\u4e0a</p> <p>\u5728\u5b89\u88c5\u540e\uff0c\u51fa\u73b0\u4e86\u591a\u4e2a\u6267\u884c\u7248\u672c\uff0c\u4e0d\u8981\u614c\uff0cMSYS2 - ucrt64 \uff0c - msys  - mingw64  - clang64  - clangarm64</p>"},{"location":"software/rsync/","title":"rsync","text":"<p>\u672c\u5730\u7684\u8d44\u6599\u5e38\u5e38\u9700\u8981\u540c\u6b65\u5230\u5f00\u53d1\u670d\u52a1\u5668\u3002rsync \u652f\u6301\u589e\u91cf\u5907\u4efd\uff0c\u8fd9\u4e00\u70b9\u5bf9\u5f00\u53d1\u8005\u5f88\u53cb\u5584\u3002</p> <pre><code>$ rsync -av src remote:/folder/\n\n# -a             \u9012\u5f52\u540c\u6b65\u6587\u4ef6\u5143\u4fe1\u606f\n# -v             \u4f20\u8f93\u65e5\u5fd7\u663e\u793a\u5230\u7ec8\u7aef\n# -n             \u6a21\u62df\u6267\u884c\n# --delete       \u540c\u6b65\u65f6\uff0c\u8fdc\u7a0b\u5c06\u5220\u9664\u672c\u5730\u4e2d\u6ca1\u6709\u7684\u6587\u4ef6\n# --link-desk    \u6307\u5b9a\u57fa\u51c6\u76ee\u5f55\uff0c\u7136\u540e\u589e\u91cf\u5907\u4efd\n# --exclude=path \u540c\u6b65\u65f6\u6392\u9664 path \u6587\u4ef6\u5939\n# ...\n</code></pre>"},{"location":"software/ssh/","title":"ssh","text":"<p>Abstract</p> <p>\u5173\u4e8e ssh \u914d\u7f6e\u7684\u5e38\u89c1\u65b9\u5f0f\u3002</p> <p>\u7ec8\u7aef\u4e0b\u6700\u5e38\u89c1\u7684\u64cd\u4f5c\u5c31\u662f\u8fdc\u7a0b\u5230\u670d\u52a1\u5668\uff0c\u4e00\u6b21\u6b21\u8f93\u5165\u5bc6\u7801\u65e2\u4e0d\u5b89\u5168\uff0c\u53c8\u8ba9\u4eba\u6bd4\u8f83\u5934\u75bc\u3002</p> <p>\u4f7f\u7528 ssh-keygen \u751f\u6210\u79c1\u94a5\u548c\u516c\u94a5\uff0c\u767b\u8bb0\u79c1\u94a5\u5230\u672c\u5730\u7684 ssh \u914d\u7f6e\u6587\u4ef6\u91cc\uff0c\u53d1\u9001\u516c\u94a5\u5230\u8fdc\u7a0b\u670d\u52a1\u5668\uff08\u9700\u8981\u8f93\u5165\u4e00\u6b21\u5bc6\u7801\uff09\uff0c\u8fd9\u6837\u540e\u9762\u518d\u8fde\u63a5\u8fdc\u7a0b\u670d\u52a1\u5668\u65f6\uff0c\u5c31\u505a\u5230\u4e86\u514d\u5bc6\u767b\u9646\u3002</p> <p>\u64cd\u4f5c\u6b65\u9aa4\u5982\u4e0b\uff1a</p> <pre><code># 1. \u751f\u6210\u79c1\u94a5\u548c\u516c\u94a5\n$ ssh-keygen -t rsa -f ecs\n\n# 2. \u79c1\u94a5\u767b\u8bb0\u5230\u672c\u5730 ssh \u914d\u7f6e\u6587\u4ef6\n$ vim ~/.ssh/config\n\nHost ecs\n    HostName xx.xx.xx.xx\n    User user-name\n        IdentityFile ~/.ssh/server/ecs\n\nHost ecs2\n    HostName xx.xx.xx.xx\n    User user-name\n        IdentityFile ~/.ssh/server/ecs2\n\n# 3. \u53d1\u9001\u516c\u94a5\u5230\u8fdc\u7a0b\u670d\u52a1\u5668\n$ ssh-copy-id -i ecs.pub  user-name@xx.xx.xx.xx\n\n# 4. \u514d\u5bc6\u8fde\u63a5\n$ ssh ecs\n\n# 5. \u8fdc\u7a0b\u6267\u884c\u547d\u4ee4\n$ ssh ecs 'bash git.sh test'\n</code></pre>"},{"location":"software/tmux/","title":"tmux","text":"<p>Quote</p> <p>\u9f20\u6807\u6b63\u5728\u62d6\u6162\u4f60\u7684\u901f\u5ea6\uff01</p> <p>\u6309\u952e\u7ea6\u5b9a\uff1a\u5982 &lt;C-a&gt; c \u6309\u952e\u7ec4\u5408\uff0c\u9700\u8981\u5148\u6309\u4e0b Ctrl \u548c a\uff0c\u677e\u5f00\u540e\u518d\u6309\u4e0b c\u3002</p> <p>\u547d\u4ee4\u524d\u7f00\uff1a\u5982\u679c\u7a0b\u5e8f\u662f\u5728 tmux \u73af\u5883\u4e2d\u8fd0\u884c\u7684\uff0c\u9700\u8981\u4e00\u79cd\u65b9\u5f0f\u544a\u8bc9 tmux\uff0c\u67d0\u4e2a\u64cd\u4f5c\u662f tmux \u53bb\u505a\u800c\u4e0d\u662f\u7a0b\u5e8f\u53bb\u505a\uff0c\u8fd9\u5c31\u662f\u524d\u7f00\u952e\u7684\u4f5c\u7528\u3002\u5728\u8fd9\u91cc\uff0c\u5c06\u524d\u7f00\u8bbe\u7f6e\u6210 &lt;C-a&gt;\u3002</p> <p>\u5173\u4e8e Ctrl \u952e\u4f4d</p> <p>Windows \u4e0b\u53ef\u4ee5\u4fee\u6539\u6ce8\u518c\u8868\uff0c\u4ea4\u6362 CapsLk \u548c Ctrl\u3002</p> <p>\u8fd9\u6837\u4e00\u6765\uff0c&lt;C-a&gt; \u5c06\u662f\u4e24\u4e2a\u5728\u7269\u7406\u4f4d\u7f6e\u4e0a\u8fde\u7eed\u7684\u6309\u952e\u3002</p>"},{"location":"software/tmux/#_1","title":"\u57fa\u7840\u7528\u6cd5","text":"<p>tmux \u4e09\u4e2a\u5173\u952e\u6982\u5ff5\u5c42\u5c42\u5d4c\u5957\uff1a\u4f1a\u8bdd-\u7a97\u53e3-\u9762\u677f</p> <ul> <li>\u4f1a\u8bdd\uff1a\u6bcf\u4e2a\u4f1a\u8bdd\u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u5de5\u4f5c\u533a\uff0c\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a\u7a97\u53e3<ul> <li><code>tmux</code> \u542f\u52a8\u4e00\u4e2a\u65b0\u4f1a\u8bdd</li> <li><code>tmux ls</code> \u5217\u51fa\u6240\u6709\u4f1a\u8bdd</li> <li><code>tmux attach -t N</code> \u767b\u5165\u5e8f\u53f7\u4e3a N \u7684\u4f1a\u8bdd</li> <li><code>tmux a</code> \u767b\u5165\u6700\u540e\u4e00\u4e2a\u4f1a\u8bdd</li> <li><code>tmux kill-session -t N</code> \u6740\u6b7b\u5e8f\u53f7\u4e3a N \u7684\u4f1a\u8bdd</li> </ul> </li> <li>\u7a97\u53e3\uff1a\u6bcf\u4e2a\u7a97\u53e3\u76f8\u5f53\u4e8e\u6d4f\u89c8\u5668\u4e2d\u7684\u6807\u7b7e\u9875\uff0c\u53ef\u4ee5\u5206\u5272\u6210\u591a\u4efd\u9762\u677f<ul> <li><code>&lt;C-a&gt; w</code> \u5217\u51fa\u6240\u6709\u7a97\u53e3</li> <li><code>&lt;C-a&gt; N</code> \u8df3\u8f6c\u5230\u7b2c N \u4e2a\u7a97\u53e3</li> <li><code>&lt;C-a&gt; c</code> \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7a97\u53e3</li> <li><code>&lt;C-a&gt; ,</code> \u91cd\u547d\u540d\u7a97\u53e3</li> <li><code>&lt;C-d&gt;</code> \u5173\u95ed\u7a97\u53e3</li> <li><code>&lt;C-a&gt; &lt;C-c&gt;</code> \u521b\u5efa\u65b0\u4f1a\u8bdd</li> <li><code>&lt;C-a&gt; d</code> \u4e34\u65f6\u767b\u51fa\u5f53\u524d\u4f1a\u8bdd</li> </ul> </li> <li>\u9762\u677f\uff1a\u9762\u677f\u5c06\u4e00\u4e2a\u7a97\u53e3\u5206\u5272\u4e3a\u591a\u4e2a\u533a\u57df\uff0c\u6bcf\u4e2a\u9762\u677f\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u4ea4\u4e92\u5f0f shell \u754c\u9762<ul> <li><code>&lt;C-a&gt; -</code> \u6c34\u5e73\u5206\u5272</li> <li><code>&lt;C-a&gt; _</code> \u5782\u76f4\u5206\u5272</li> <li><code>&lt;C-a&gt; &lt;\u65b9\u5411&gt;</code> \u5207\u6362\u5230\u6307\u5b9a\u9762\u677f</li> <li><code>&lt;C-a&gt; &lt;C-\u65b9\u5411&gt;</code> \u8c03\u6574\u9762\u677f\u8fb9\u754c </li> <li><code>&lt;C-a&gt; z</code> \u7f29\u653e\uff08zoom\uff09/\u6062\u590d \u9762\u677f</li> <li><code>&lt;C-a&gt; [</code> \u56de\u6eda\u5c4f\u5e55 </li> </ul> </li> </ul>"},{"location":"software/tmux/#_2","title":"\u7ed3\u5bf9\u7f16\u7a0b","text":"<p>\u4f7f\u7528 tmux \u7ed3\u5bf9\u7f16\u7a0b\u7684\u539f\u7406\u8ddf\u7b80\u5355\uff0c\u53ea\u8981\u4e24\u4eba\u767b\u5f55\u5230\u540c\u4e00\u4e2a\u4f1a\u8bdd\u5c31\u884c\u4e86\uff0c\u4e24\u4eba\u5c06\u5171\u4eab\u5c4f\u5e55\u4fe1\u606f\u3002</p> <p>\u8fd9\u6837\u505a\u7684\u4e00\u4e2a\u597d\u5904\u662f\uff0c\u6bd4\u8d77\u56fe\u5f62\u5316\u684c\u9762\u5171\u4eab\u8981\u8282\u7701\u4e0d\u5c11\u7f51\u7edc\u5e26\u5bbd\uff0c\u56e0\u6b64\u4f4e\u7f51\u901f\u4e5f\u80fd\u5f88\u597d\u7684\u5de5\u4f5c\u3002\u53e6\u4e00\u4e2a\u597d\u5904\u6765\u6e90\u4e8e tmux \u81ea\u8eab\uff0c\u4e34\u65f6\u767b\u51fa\u548c\u518d\u6b21\u767b\u5165\u7684\u64cd\u4f5c\u5f88\u65b9\u4fbf\u3002</p>"},{"location":"software/tmux/#_3","title":"\u914d\u7f6e\u6587\u4ef6","text":"<p>\u63a8\u8350\u7528\u5fc3\u5236\u4f5c\u7684 .tmux\u3002\u5728\u5b89\u88c5 tmux \u540e\uff0c\u76f4\u63a5\u4f7f\u7528\u8fd9\u4efd\u914d\u7f6e\u80fd\u7701\u5fc3\u4e0d\u5c11\u3002</p> <p>\u642d\u914d\u4f7f\u7528\uff0c\u5728 .tmux.conf \u91cc\u5c06\u9ed8\u8ba4\u7ec8\u7aef\u6362\u6210 zsh\u3002</p> <pre><code>set -g default-shell /bin/zsh\nset -g default-command /bin/zsh\n</code></pre>"},{"location":"software/tmux/#-","title":"\u63d2\u4ef6-\u4f1a\u8bdd\u6062\u590d","text":"<p>\u901a\u8fc7 tmux \u4fdd\u7559\u5de5\u4f5c\u73af\u5883\uff0c\u5e2e\u52a9\u56de\u5fc6\u601d\u8def\u3002</p> <ol> <li>\u5b89\u88c5 tmux \u63d2\u4ef6\u7ba1\u7406\u5668 tpm</li> <li>\u5b89\u88c5\u63d2\u4ef6 tmux-resurrect</li> <li>\u4f7f\u7528\u5feb\u6377\u952e<ul> <li><code>&lt;C-a&gt; &lt;C-s&gt;</code> \u4fdd\u5b58</li> <li><code>&lt;C-a&gt; &lt;C-r&gt;</code> \u6062\u590d</li> </ul> </li> </ol>"},{"location":"software/veracrypt/","title":"veracrypt","text":"<p>\u8fd9\u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u52a0\u5bc6\u8f6f\u4ef6\uff0c\u53ef\u4ee5\u7528\u6765\u52a0\u5bc6\u78c1\u76d8\uff0c\u975e\u5e38\u597d\u7528\u3002</p> <ul> <li>password \u53ef\u4ee5\u8bbe\u7f6e\u53e3\u4ee4</li> <li>PIM\uff08Personal Iteration Multiplier\uff09\u589e\u52a0\u5bc6\u7801\u6d3e\u751f\u51fd\u6570\u7684\u8fed\u4ee3\u6b21\u6570</li> <li>keyfiles \u5bc6\u94a5\u6587\u4ef6\uff0c\u989d\u5916\u7684\u8ba4\u8bc1\u56e0\u7d20</li> </ul> <p>\u7528\u8fd9\u73a9\u610f\u513f\u7684\u597d\u5904\u662f\uff0c\u67d0\u4e9b\u9690\u79c1\u6587\u4ef6\u53ef\u4ee5\u88ab\u4fdd\u62a4\u3002</p> <p>\u574f\u5904\u662f\u4e00\u65e6\u5fd8\u4e86\u5bc6\u7801\u3001PIM\uff0c\u6216\u662f\u4e22\u5931\u4e86\u5bc6\u94a5\u6587\u4ef6\uff0c\u90a3\u4e9b\u5f88\u91cd\u8981\u7684\u6587\u4ef6\u5c31\u518d\u4e5f\u627e\u4e0d\u56de\u6765\u4e86\uff08\u4e07\u4e00\u67d0\u5929\u4f60\u5931\u5fc6\u4e86\uff09\u3002</p> <p>\u6b63\u5e38\u7684\u4f7f\u7528\u573a\u666f\u662f\uff0c\u9700\u8981\u643a\u5e26\u4e00\u4e9b\u5907\u4efd\u6587\u4ef6\u5728\u5916\u65f6\uff0c\u7528 veracrypt \u4fdd\u8bc1\u6587\u4ef6\u5728\u5b58\u50a8\u4ecb\u8d28\u4e0a\u7684\u52a0\u5bc6\uff0c\u5373\u4fbf\u8fd9\u4e2a\u5b58\u50a8\u4ecb\u8d28\u4e22\u4e86\uff0c\u4e5f\u53ea\u662f\u7b80\u5355\u7684\u4ef7\u683c\u635f\u5931\u3002</p>"},{"location":"software/vim/","title":"vim","text":"<p>Quote</p> <p>\u9f20\u6807\u6b63\u5728\u62d6\u6162\u4f60\u7684\u901f\u5ea6\uff01</p>"},{"location":"software/vim/#_1","title":"\u57fa\u7840\u7528\u6cd5","text":"<p>\u65b0\u624b\u76f4\u63a5\u8ddf\u7740 vim \u81ea\u5e26\u7684 <code>vimtutor</code> \u7ec3\u4e60\u4e00\u6b21\uff0c\u5927\u6982\u82b1\u8d39 20 \u5206\u949f\u3002</p>"},{"location":"software/vim/#_2","title":"\u5b9a\u5236","text":"<p>Warning</p> <p>\u4e0d\u8981\u8fc7\u5ea6\u5b9a\u5236\uff0c\u907f\u514d\u5411 vimrc \u4e2d\u6dfb\u52a0\u8fc7\u591a\u7684\u4e1c\u897f\uff0c\u591a\u5173\u6ce8\u6838\u5fc3\u529f\u80fd</p>"},{"location":"software/website/","title":"website","text":"<ul> <li>\u6309\u53d7\u6b22\u8fce\u7a0b\u5ea6\u6bcf\u6708\u66f4\u65b0 DBMS \u6392\u540d</li> </ul>"}]}